
2021_FreeRTOS_FISEA_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e8  08012268  08012268  00022268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015550  08015550  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08015550  08015550  00025550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015558  08015558  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015558  08015558  00025558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801555c  0801555c  0002555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08015560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fc2c  20000238  08015798  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001fe64  08015798  0003fe64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eeb4  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000609e  00000000  00000000  0005f11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  000651c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  000672e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00049cde  00000000  00000000  00069170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f8a  00000000  00000000  000b2e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4689  00000000  00000000  000dbdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d0461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009de8  00000000  00000000  001d04b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801224c 	.word	0x0801224c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	0801224c 	.word	0x0801224c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <MX_DMA2D_Init+0x60>)
 8000f08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f36:	f003 fcf7 	bl	8004928 <HAL_DMA2D_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f40:	f000 fe60 	bl	8001c04 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f44:	2101      	movs	r1, #1
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_DMA2D_Init+0x5c>)
 8000f48:	f003 ff5c 	bl	8004e04 <HAL_DMA2D_ConfigLayer>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f52:	f000 fe57 	bl	8001c04 <Error_Handler>
  }

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2001f99c 	.word	0x2001f99c
 8000f60:	4002b000 	.word	0x4002b000

08000f64 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_DMA2D_MspInit+0x48>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d115      	bne.n	8000fa2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_DMA2D_MspInit+0x4c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_DMA2D_MspInit+0x4c>)
 8000f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_DMA2D_MspInit+0x4c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	205a      	movs	r0, #90	; 0x5a
 8000f98:	f003 fabc 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f9c:	205a      	movs	r0, #90	; 0x5a
 8000f9e:	f003 fad5 	bl	800454c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	4002b000 	.word	0x4002b000
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_FMC_Init+0x98>)
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <MX_FMC_Init+0x9c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_FMC_Init+0x98>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_FMC_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_FMC_Init+0x98>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_FMC_Init+0x98>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_FMC_Init+0x98>)
 8000fec:	2240      	movs	r2, #64	; 0x40
 8000fee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_FMC_Init+0x98>)
 8000ff2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ff6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_FMC_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_FMC_Init+0x98>)
 8001000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001004:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_FMC_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_FMC_Init+0x98>)
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001018:	2307      	movs	r3, #7
 800101a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001020:	2307      	movs	r3, #7
 8001022:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001024:	2303      	movs	r3, #3
 8001026:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_FMC_Init+0x98>)
 8001036:	f006 fe8b 	bl	8007d50 <HAL_SDRAM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001040:	f000 fde0 	bl	8001c04 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2001f9dc 	.word	0x2001f9dc
 8001050:	a0000140 	.word	0xa0000140

08001054 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001068:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <HAL_FMC_MspInit+0x104>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d16f      	bne.n	8001150 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_FMC_MspInit+0x104>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_FMC_MspInit+0x108>)
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	4a37      	ldr	r2, [pc, #220]	; (800115c <HAL_FMC_MspInit+0x108>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6393      	str	r3, [r2, #56]	; 0x38
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <HAL_FMC_MspInit+0x108>)
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001092:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001096:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a4:	230c      	movs	r3, #12
 80010a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	482c      	ldr	r0, [pc, #176]	; (8001160 <HAL_FMC_MspInit+0x10c>)
 80010ae:	f003 ffd7 	bl	8005060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80010b2:	2301      	movs	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4826      	ldr	r0, [pc, #152]	; (8001164 <HAL_FMC_MspInit+0x110>)
 80010cc:	f003 ffc8 	bl	8005060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80010d4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	481f      	ldr	r0, [pc, #124]	; (8001168 <HAL_FMC_MspInit+0x114>)
 80010ec:	f003 ffb8 	bl	8005060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <HAL_FMC_MspInit+0x118>)
 800110c:	f003 ffa8 	bl	8005060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001110:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001114:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001122:	230c      	movs	r3, #12
 8001124:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <HAL_FMC_MspInit+0x11c>)
 800112c:	f003 ff98 	bl	8005060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001140:	230c      	movs	r3, #12
 8001142:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <HAL_FMC_MspInit+0x120>)
 800114a:	f003 ff89 	bl	8005060 <HAL_GPIO_Init>
 800114e:	e000      	b.n	8001152 <HAL_FMC_MspInit+0xfe>
    return;
 8001150:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000254 	.word	0x20000254
 800115c:	40023800 	.word	0x40023800
 8001160:	40021400 	.word	0x40021400
 8001164:	40020800 	.word	0x40020800
 8001168:	40021800 	.word	0x40021800
 800116c:	40021000 	.word	0x40021000
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001180:	f7ff ff68 	bl	8001054 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <MX_GPIO_Init+0x240>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a88      	ldr	r2, [pc, #544]	; (80013cc <MX_GPIO_Init+0x240>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b86      	ldr	r3, [pc, #536]	; (80013cc <MX_GPIO_Init+0x240>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <MX_GPIO_Init+0x240>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a81      	ldr	r2, [pc, #516]	; (80013cc <MX_GPIO_Init+0x240>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <MX_GPIO_Init+0x240>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <MX_GPIO_Init+0x240>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <MX_GPIO_Init+0x240>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <MX_GPIO_Init+0x240>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	4b74      	ldr	r3, [pc, #464]	; (80013cc <MX_GPIO_Init+0x240>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a73      	ldr	r2, [pc, #460]	; (80013cc <MX_GPIO_Init+0x240>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b71      	ldr	r3, [pc, #452]	; (80013cc <MX_GPIO_Init+0x240>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <MX_GPIO_Init+0x240>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a6c      	ldr	r2, [pc, #432]	; (80013cc <MX_GPIO_Init+0x240>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <MX_GPIO_Init+0x240>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <MX_GPIO_Init+0x240>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a65      	ldr	r2, [pc, #404]	; (80013cc <MX_GPIO_Init+0x240>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <MX_GPIO_Init+0x240>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <MX_GPIO_Init+0x240>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a5e      	ldr	r2, [pc, #376]	; (80013cc <MX_GPIO_Init+0x240>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <MX_GPIO_Init+0x240>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <MX_GPIO_Init+0x240>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <MX_GPIO_Init+0x240>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <MX_GPIO_Init+0x240>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2116      	movs	r1, #22
 8001286:	4852      	ldr	r0, [pc, #328]	; (80013d0 <MX_GPIO_Init+0x244>)
 8001288:	f004 f9a2 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	4850      	ldr	r0, [pc, #320]	; (80013d4 <MX_GPIO_Init+0x248>)
 8001292:	f004 f99d 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800129c:	484e      	ldr	r0, [pc, #312]	; (80013d8 <MX_GPIO_Init+0x24c>)
 800129e:	f004 f997 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012a8:	484c      	ldr	r0, [pc, #304]	; (80013dc <MX_GPIO_Init+0x250>)
 80012aa:	f004 f991 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012ae:	2316      	movs	r3, #22
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4842      	ldr	r0, [pc, #264]	; (80013d0 <MX_GPIO_Init+0x244>)
 80012c6:	f003 fecb 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012ca:	f248 0307 	movw	r3, #32775	; 0x8007
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <MX_GPIO_Init+0x254>)
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	483d      	ldr	r0, [pc, #244]	; (80013d4 <MX_GPIO_Init+0x248>)
 80012e0:	f003 febe 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4836      	ldr	r0, [pc, #216]	; (80013d4 <MX_GPIO_Init+0x248>)
 80012fc:	f003 feb0 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001300:	2320      	movs	r3, #32
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <MX_GPIO_Init+0x254>)
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	482f      	ldr	r0, [pc, #188]	; (80013d0 <MX_GPIO_Init+0x244>)
 8001314:	f003 fea4 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	482e      	ldr	r0, [pc, #184]	; (80013e4 <MX_GPIO_Init+0x258>)
 800132c:	f003 fe98 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001330:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001342:	230c      	movs	r3, #12
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <MX_GPIO_Init+0x258>)
 800134e:	f003 fe87 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_GPIO_Init+0x258>)
 8001368:	f003 fe7a 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800136c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <MX_GPIO_Init+0x24c>)
 8001382:	f003 fe6d 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001386:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <MX_GPIO_Init+0x24c>)
 80013a0:	f003 fe5e 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_GPIO_Init+0x250>)
 80013be:	f003 fe4f 	bl	8005060 <HAL_GPIO_Init>

}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021800 	.word	0x40021800
 80013e0:	10120000 	.word	0x10120000
 80013e4:	40020400 	.word	0x40020400

080013e8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_I2C3_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <MX_I2C3_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_I2C3_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <MX_I2C3_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_I2C3_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_I2C3_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_I2C3_Init+0x74>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_I2C3_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2C3_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_I2C3_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_I2C3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_I2C3_Init+0x74>)
 8001426:	f004 f8ed 	bl	8005604 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 fbe8 	bl	8001c04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <MX_I2C3_Init+0x74>)
 8001438:	f005 f9d1 	bl	80067de <HAL_I2CEx_ConfigAnalogFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001442:	f000 fbdf 	bl	8001c04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_I2C3_Init+0x74>)
 800144a:	f005 fa04 	bl	8006856 <HAL_I2CEx_ConfigDigitalFilter>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001454:	f000 fbd6 	bl	8001c04 <Error_Handler>
  }

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2001fa10 	.word	0x2001fa10
 8001460:	40005c00 	.word	0x40005c00
 8001464:	000186a0 	.word	0x000186a0

08001468 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_I2C_MspInit+0xc4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d14b      	bne.n	8001522 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d4:	2304      	movs	r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4815      	ldr	r0, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0xcc>)
 80014e0:	f003 fdbe 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80014e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ea:	2312      	movs	r3, #18
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014f6:	2304      	movs	r3, #4
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_I2C_MspInit+0xd0>)
 8001502:	f003 fdad 	bl	8005060 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 8001510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_I2C_MspInit+0xc8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005c00 	.word	0x40005c00
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000

0800153c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2234      	movs	r2, #52	; 0x34
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00c fed9 	bl	800e300 <memset>

  hltdc.Instance = LTDC;
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001550:	4a39      	ldr	r2, [pc, #228]	; (8001638 <MX_LTDC_Init+0xfc>)
 8001552:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <MX_LTDC_Init+0xf8>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <MX_LTDC_Init+0xf8>)
 800156e:	2209      	movs	r2, #9
 8001570:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001574:	2201      	movs	r2, #1
 8001576:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <MX_LTDC_Init+0xf8>)
 800157a:	221d      	movs	r2, #29
 800157c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001580:	2203      	movs	r2, #3
 8001582:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001586:	f240 120d 	movw	r2, #269	; 0x10d
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <MX_LTDC_Init+0xf8>)
 800158e:	f240 1243 	movw	r2, #323	; 0x143
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_LTDC_Init+0xf8>)
 8001596:	f240 1217 	movw	r2, #279	; 0x117
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <MX_LTDC_Init+0xf8>)
 800159e:	f240 1247 	movw	r2, #327	; 0x147
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_LTDC_Init+0xf8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_LTDC_Init+0xf8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_LTDC_Init+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015bc:	481d      	ldr	r0, [pc, #116]	; (8001634 <MX_LTDC_Init+0xf8>)
 80015be:	f005 f989 	bl	80068d4 <HAL_LTDC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015c8:	f000 fb1c 	bl	8001c04 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80015d0:	23f0      	movs	r3, #240	; 0xf0
 80015d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80015d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015e2:	23ff      	movs	r3, #255	; 0xff
 80015e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015f0:	2307      	movs	r3, #7
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80015f4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80015fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_LTDC_Init+0xf8>)
 800161e:	f005 faeb 	bl	8006bf8 <HAL_LTDC_ConfigLayer>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001628:	f000 faec 	bl	8001c04 <Error_Handler>
  }

}
 800162c:	bf00      	nop
 800162e:	3738      	adds	r7, #56	; 0x38
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2001fa64 	.word	0x2001fa64
 8001638:	40016800 	.word	0x40016800

0800163c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a7b      	ldr	r2, [pc, #492]	; (8001848 <HAL_LTDC_MspInit+0x20c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	f040 80f0 	bne.w	8001840 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <HAL_LTDC_MspInit+0x210>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	4a78      	ldr	r2, [pc, #480]	; (800184c <HAL_LTDC_MspInit+0x210>)
 800166a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166e:	6453      	str	r3, [r2, #68]	; 0x44
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_LTDC_MspInit+0x210>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_LTDC_MspInit+0x210>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a71      	ldr	r2, [pc, #452]	; (800184c <HAL_LTDC_MspInit+0x210>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_LTDC_MspInit+0x210>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_LTDC_MspInit+0x210>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a5c      	ldr	r2, [pc, #368]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a55      	ldr	r2, [pc, #340]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_LTDC_MspInit+0x210>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_LTDC_MspInit+0x210>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_LTDC_MspInit+0x210>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_LTDC_MspInit+0x210>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001736:	230e      	movs	r3, #14
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	4843      	ldr	r0, [pc, #268]	; (8001850 <HAL_LTDC_MspInit+0x214>)
 8001742:	f003 fc8d 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001746:	f641 0358 	movw	r3, #6232	; 0x1858
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001758:	230e      	movs	r3, #14
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	483c      	ldr	r0, [pc, #240]	; (8001854 <HAL_LTDC_MspInit+0x218>)
 8001764:	f003 fc7c 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001768:	2303      	movs	r3, #3
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001778:	2309      	movs	r3, #9
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4835      	ldr	r0, [pc, #212]	; (8001858 <HAL_LTDC_MspInit+0x21c>)
 8001784:	f003 fc6c 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001788:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179a:	230e      	movs	r3, #14
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	482c      	ldr	r0, [pc, #176]	; (8001858 <HAL_LTDC_MspInit+0x21c>)
 80017a6:	f003 fc5b 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017aa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017bc:	230e      	movs	r3, #14
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4825      	ldr	r0, [pc, #148]	; (800185c <HAL_LTDC_MspInit+0x220>)
 80017c8:	f003 fc4a 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017cc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017de:	230e      	movs	r3, #14
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	481d      	ldr	r0, [pc, #116]	; (8001860 <HAL_LTDC_MspInit+0x224>)
 80017ea:	f003 fc39 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017ee:	2348      	movs	r3, #72	; 0x48
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fe:	230e      	movs	r3, #14
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4816      	ldr	r0, [pc, #88]	; (8001864 <HAL_LTDC_MspInit+0x228>)
 800180a:	f003 fc29 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800180e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001820:	2309      	movs	r3, #9
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <HAL_LTDC_MspInit+0x220>)
 800182c:	f003 fc18 	bl	8005060 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	2058      	movs	r0, #88	; 0x58
 8001836:	f002 fe6d 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800183a:	2058      	movs	r0, #88	; 0x58
 800183c:	f002 fe86 	bl	800454c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001840:	bf00      	nop
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40016800 	.word	0x40016800
 800184c:	40023800 	.word	0x40023800
 8001850:	40021400 	.word	0x40021400
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40021800 	.word	0x40021800
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00

08001868 <RTOS_AppConfigureTimerForRuntimeStats>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void RTOS_AppConfigureTimerForRuntimeStats(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  RTOS_RunTimeCounter = 0;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <RTOS_AppConfigureTimerForRuntimeStats+0x14>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <RTOS_AppConfigureTimerForRuntimeStats+0x18>)
 8001874:	f007 f8a1 	bl	80089ba <HAL_TIM_Base_Start_IT>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2001fb34 	.word	0x2001fb34
 8001880:	2001fcc4 	.word	0x2001fcc4

08001884 <RTOS_AppGetRuntimeCounterValueFromISR>:

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2001fb34 	.word	0x2001fb34

0800189c <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018a4:	1d39      	adds	r1, r7, #4
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	2201      	movs	r2, #1
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <__io_putchar+0x20>)
 80018ae:	f007 fcb4 	bl	800921a <HAL_UART_Transmit>
	return ch;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2001fd04 	.word	0x2001fd04

080018c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c6:	f002 fd07 	bl	80042d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ca:	f000 f8e9 	bl	8001aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ce:	f7ff fc5d 	bl	800118c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018d2:	f7ff fb15 	bl	8000f00 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018d6:	f7ff fb6d 	bl	8000fb4 <MX_FMC_Init>
  MX_I2C3_Init();
 80018da:	f7ff fd85 	bl	80013e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80018de:	f7ff fe2d 	bl	800153c <MX_LTDC_Init>
  MX_SPI5_Init();
 80018e2:	f000 f99b 	bl	8001c1c <MX_SPI5_Init>
  MX_TIM1_Init();
 80018e6:	f000 fe81 	bl	80025ec <MX_TIM1_Init>
  MX_TIM7_Init();
 80018ea:	f000 ff1d 	bl	8002728 <MX_TIM7_Init>
  MX_TIM5_Init();
 80018ee:	f000 fecd 	bl	800268c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80018f2:	f000 ffab 	bl	800284c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fc:	4857      	ldr	r0, [pc, #348]	; (8001a5c <main+0x19c>)
 80018fe:	f003 fe67 	bl	80055d0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001908:	4854      	ldr	r0, [pc, #336]	; (8001a5c <main+0x19c>)
 800190a:	f003 fe61 	bl	80055d0 <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 800190e:	f001 fb9b 	bl	8003048 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8001912:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001916:	2000      	movs	r0, #0
 8001918:	f001 fc18 	bl	800314c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 800191c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001920:	2001      	movs	r0, #1
 8001922:	f001 fc13 	bl	800314c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001926:	2001      	movs	r0, #1
 8001928:	f001 fc74 	bl	8003214 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800192c:	f002 f90c 	bl	8003b48 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f001 fd1e 	bl	8003374 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001938:	4849      	ldr	r0, [pc, #292]	; (8001a60 <main+0x1a0>)
 800193a:	f001 fceb 	bl	8003314 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800193e:	f04f 30ff 	mov.w	r0, #4294967295
 8001942:	f001 fccd 	bl	80032e0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 8001946:	4847      	ldr	r0, [pc, #284]	; (8001a64 <main+0x1a4>)
 8001948:	f001 fcb2 	bl	80032b0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 800194c:	f001 fcfc 	bl	8003348 <BSP_LCD_GetFont>
 8001950:	4603      	mov	r3, r0
 8001952:	88d9      	ldrh	r1, [r3, #6]
 8001954:	2301      	movs	r3, #1
 8001956:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <main+0x1a8>)
 8001958:	2000      	movs	r0, #0
 800195a:	f001 fd77 	bl	800344c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 800195e:	f001 fcf3 	bl	8003348 <BSP_LCD_GetFont>
 8001962:	4603      	mov	r3, r0
 8001964:	88db      	ldrh	r3, [r3, #6]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	b299      	uxth	r1, r3
 800196a:	2301      	movs	r3, #1
 800196c:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <main+0x1ac>)
 800196e:	2000      	movs	r0, #0
 8001970:	f001 fd6c 	bl	800344c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 8001974:	f001 fce8 	bl	8003348 <BSP_LCD_GetFont>
 8001978:	4603      	mov	r3, r0
 800197a:	88db      	ldrh	r3, [r3, #6]
 800197c:	461a      	mov	r2, r3
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	4413      	add	r3, r2
 8001982:	b299      	uxth	r1, r3
 8001984:	2301      	movs	r3, #1
 8001986:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <main+0x1b0>)
 8001988:	2000      	movs	r0, #0
 800198a:	f001 fd5f 	bl	800344c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 800198e:	4839      	ldr	r0, [pc, #228]	; (8001a74 <main+0x1b4>)
 8001990:	f001 fc8e 	bl	80032b0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2021/2022", CENTER_MODE);
 8001994:	f001 fcd8 	bl	8003348 <BSP_LCD_GetFont>
 8001998:	4603      	mov	r3, r0
 800199a:	88db      	ldrh	r3, [r3, #6]
 800199c:	461a      	mov	r2, r3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	b299      	uxth	r1, r3
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a34      	ldr	r2, [pc, #208]	; (8001a78 <main+0x1b8>)
 80019a8:	2000      	movs	r0, #0
 80019aa:	f001 fd4f 	bl	800344c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 80019ae:	4833      	ldr	r0, [pc, #204]	; (8001a7c <main+0x1bc>)
 80019b0:	f001 fc7e 	bl	80032b0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 80019b4:	f001 fcc8 	bl	8003348 <BSP_LCD_GetFont>
 80019b8:	4603      	mov	r3, r0
 80019ba:	88db      	ldrh	r3, [r3, #6]
 80019bc:	461a      	mov	r2, r3
 80019be:	00d2      	lsls	r2, r2, #3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b299      	uxth	r1, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <main+0x1c0>)
 80019c8:	2000      	movs	r0, #0
 80019ca:	f001 fd3f 	bl	800344c <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 80019ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019d2:	f002 fcc3 	bl	800435c <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <main+0x1c4>)
 80019d8:	f001 fc9c 	bl	8003314 <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f001 fcc8 	bl	8003374 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019e8:	f001 fc62 	bl	80032b0 <BSP_LCD_SetTextColor>

	printf("Test liaison serie...\n\r");
 80019ec:	4826      	ldr	r0, [pc, #152]	; (8001a88 <main+0x1c8>)
 80019ee:	f00d f8f9 	bl	800ebe4 <iprintf>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <main+0x19c>)
 80019fa:	f003 fde9 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a04:	4815      	ldr	r0, [pc, #84]	; (8001a5c <main+0x19c>)
 8001a06:	f003 fde3 	bl	80055d0 <HAL_GPIO_WritePin>


/*I2C3 bus scan*/
I2C_Scan(&hi2c3,I2C_add);
 8001a0a:	4920      	ldr	r1, [pc, #128]	; (8001a8c <main+0x1cc>)
 8001a0c:	4820      	ldr	r0, [pc, #128]	; (8001a90 <main+0x1d0>)
 8001a0e:	f00b fa25 	bl	800ce5c <I2C_Scan>

/*Sensors initialization*/
Init(&hi2c3);
 8001a12:	481f      	ldr	r0, [pc, #124]	; (8001a90 <main+0x1d0>)
 8001a14:	f00b fa4b 	bl	800ceae <Init>
Init_BMP280(&hi2c3);
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <main+0x1d0>)
 8001a1a:	f00b faa3 	bl	800cf64 <Init_BMP280>

/*I2C3 bus scan*/
I2C_Scan(&hi2c3,I2C_add);
 8001a1e:	491b      	ldr	r1, [pc, #108]	; (8001a8c <main+0x1cc>)
 8001a20:	481b      	ldr	r0, [pc, #108]	; (8001a90 <main+0x1d0>)
 8001a22:	f00b fa1b 	bl	800ce5c <I2C_Scan>

/*WHO AM I register read*/
HAL_I2C_Mem_Read(&hi2c3,MPU_ADD,WHO_AM_I_MPU9250,1,&I2CBuf[0],1,TIMEOUT);
 8001a26:	2332      	movs	r3, #50	; 0x32
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <main+0x1d4>)
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	2275      	movs	r2, #117	; 0x75
 8001a36:	21d0      	movs	r1, #208	; 0xd0
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <main+0x1d0>)
 8001a3a:	f004 f821 	bl	8005a80 <HAL_I2C_Mem_Read>


xTaskCreate(vInitTask, "vInitTask", 1000, NULL, 5, NULL);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2305      	movs	r3, #5
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4c:	4912      	ldr	r1, [pc, #72]	; (8001a98 <main+0x1d8>)
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <main+0x1dc>)
 8001a50:	f009 fa9a 	bl	800af88 <xTaskCreate>
/* Start scheduler FreeRTOS*/
vTaskStartScheduler();
 8001a54:	f009 fc6c 	bl	800b330 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <main+0x198>
 8001a5a:	bf00      	nop
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	20000048 	.word	0x20000048
 8001a64:	ff065784 	.word	0xff065784
 8001a68:	08012268 	.word	0x08012268
 8001a6c:	08012270 	.word	0x08012270
 8001a70:	0801227c 	.word	0x0801227c
 8001a74:	ff81b835 	.word	0xff81b835
 8001a78:	08012288 	.word	0x08012288
 8001a7c:	ff813c2f 	.word	0xff813c2f
 8001a80:	08012294 	.word	0x08012294
 8001a84:	20000050 	.word	0x20000050
 8001a88:	080122a0 	.word	0x080122a0
 8001a8c:	2001fb40 	.word	0x2001fb40
 8001a90:	2001fa10 	.word	0x2001fa10
 8001a94:	2001fb28 	.word	0x2001fb28
 8001a98:	080122b8 	.word	0x080122b8
 8001a9c:	080020d1 	.word	0x080020d1

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0a4      	sub	sp, #144	; 0x90
 8001aa4:	af04      	add	r7, sp, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aaa:	2230      	movs	r2, #48	; 0x30
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f00c fc26 	bl	800e300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2230      	movs	r2, #48	; 0x30
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00c fc17 	bl	800e300 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <SystemClock_Config+0x130>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a3d      	ldr	r2, [pc, #244]	; (8001bd0 <SystemClock_Config+0x130>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <SystemClock_Config+0x130>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <SystemClock_Config+0x134>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a37      	ldr	r2, [pc, #220]	; (8001bd4 <SystemClock_Config+0x134>)
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <SystemClock_Config+0x134>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b14:	2302      	movs	r3, #2
 8001b16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b22:	23b4      	movs	r3, #180	; 0xb4
 8001b24:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fab0 	bl	8007098 <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b3e:	f000 f861 	bl	8001c04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b42:	f005 fa59 	bl	8006ff8 <HAL_PWREx_EnableOverDrive>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b4c:	f000 f85a 	bl	8001c04 <Error_Handler>
  }

  if (HAL_I2C_Mem_Read(&hi2c3,MPU_ADD,WHO_AM_I_MPU9250,1,&I2CBuf[0],1,TIMEOUT) != HAL_OK)
 8001b50:	2332      	movs	r3, #50	; 0x32
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	2301      	movs	r3, #1
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <SystemClock_Config+0x138>)
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2275      	movs	r2, #117	; 0x75
 8001b60:	21d0      	movs	r1, #208	; 0xd0
 8001b62:	481e      	ldr	r0, [pc, #120]	; (8001bdc <SystemClock_Config+0x13c>)
 8001b64:	f003 ff8c 	bl	8005a80 <HAL_I2C_Mem_Read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001b6e:	f000 f849 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	230f      	movs	r3, #15
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2302      	movs	r3, #2
 8001b78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b88:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b8e:	2105      	movs	r1, #5
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 fcf1 	bl	8007578 <HAL_RCC_ClockConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001b9c:	f000 f832 	bl	8001c04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001ba4:	233c      	movs	r3, #60	; 0x3c
 8001ba6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 ff0c 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8001bc2:	f000 f81f 	bl	8001c04 <Error_Handler>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3780      	adds	r7, #128	; 0x80
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	2001fb28 	.word	0x2001fb28
 8001bdc:	2001fa10 	.word	0x2001fa10

08001be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bf2:	f002 fb93 	bl	800431c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40001000 	.word	0x40001000

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	//Allumer LED rouge
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0e:	4802      	ldr	r0, [pc, #8]	; (8001c18 <Error_Handler+0x14>)
 8001c10:	f003 fcde 	bl	80055d0 <HAL_GPIO_WritePin>


  /* USER CODE END Error_Handler_Debug */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021800 	.word	0x40021800

08001c1c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <MX_SPI5_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c50:	2218      	movs	r2, #24
 8001c52:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c6e:	f006 f8ee 	bl	8007e4e <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c78:	f7ff ffc4 	bl	8001c04 <Error_Handler>
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2001fb90 	.word	0x2001fb90
 8001c84:	40015000 	.word	0x40015000

08001c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_SPI_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001ce2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_SPI_MspInit+0x8c>)
 8001d00:	f003 f9ae 	bl	8005060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40015000 	.word	0x40015000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40021400 	.word	0x40021400

08001d18 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_SPI_MspDeInit+0x30>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10a      	bne.n	8001d40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d36:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_SPI_MspDeInit+0x38>)
 8001d3c:	f003 fb3c 	bl	80053b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40015000 	.word	0x40015000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021400 	.word	0x40021400

08001d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_MspInit+0x54>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_MspInit+0x54>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x54>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_MspInit+0x54>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_MspInit+0x54>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_MspInit+0x54>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	210f      	movs	r1, #15
 8001d96:	f06f 0001 	mvn.w	r0, #1
 8001d9a:	f002 fbbb 	bl	8004514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2036      	movs	r0, #54	; 0x36
 8001dc2:	f002 fba7 	bl	8004514 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc6:	2036      	movs	r0, #54	; 0x36
 8001dc8:	f002 fbc0 	bl	800454c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de8:	f107 0210 	add.w	r2, r7, #16
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fdbc 	bl	8007970 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001df8:	f005 fd92 	bl	8007920 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_InitTick+0xa8>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9b      	lsrs	r3, r3, #18
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_InitTick+0xac>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_InitTick+0xb0>)
 8001e14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_InitTick+0xac>)
 8001e18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_InitTick+0xac>)
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_InitTick+0xac>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_InitTick+0xac>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <HAL_InitTick+0xac>)
 8001e32:	f006 fd97 	bl	8008964 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <HAL_InitTick+0xac>)
 8001e3e:	f006 fdbc 	bl	80089ba <HAL_TIM_Base_Start_IT>
 8001e42:	4603      	mov	r3, r0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	2001fbe8 	.word	0x2001fbe8
 8001e5c:	40001000 	.word	0x40001000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <USART1_IRQHandler+0x10>)
 8001e9a:	f007 fa57 	bl	800934c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2001fd04 	.word	0x2001fd04

08001ea8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM5_IRQHandler+0x10>)
 8001eae:	f006 fda8 	bl	8008a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2001fc44 	.word	0x2001fc44

08001ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM6_DAC_IRQHandler+0x10>)
 8001ec2:	f006 fd9e 	bl	8008a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2001fbe8 	.word	0x2001fbe8

08001ed0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <TIM7_IRQHandler+0x18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <TIM7_IRQHandler+0x18>)
 8001edc:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <TIM7_IRQHandler+0x1c>)
 8001ee0:	f006 fd8f 	bl	8008a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2001fb34 	.word	0x2001fb34
 8001eec:	2001fcc4 	.word	0x2001fcc4

08001ef0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <LTDC_IRQHandler+0x10>)
 8001ef6:	f004 fdbd 	bl	8006a74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2001fa64 	.word	0x2001fa64

08001f04 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA2D_IRQHandler+0x10>)
 8001f0a:	f002 fe6a 	bl	8004be2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2001f99c 	.word	0x2001f99c

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f32:	f00c f999 	bl	800e268 <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f5a:	e7fe      	b.n	8001f5a <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
	}

return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fc73 	bl	800189c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
	}
	return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_isatty>:

int _isatty(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f00c f8fe 	bl	800e268 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20030000 	.word	0x20030000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000258 	.word	0x20000258
 80020a0:	2001fe68 	.word	0x2001fe68

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <SystemInit+0x28>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <SystemInit+0x28>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SystemInit+0x28>)
 80020ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020be:	609a      	str	r2, [r3, #8]
#endif
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <vInitTask>:
QueueHandle_t Queue2;
QueueHandle_t Queue3;
QueueHandle_t Queue4;
QueueHandle_t Queue5;

void vInitTask(void *pvParameters){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
	//Création des sémaphores
	Sem1 = xSemaphoreCreateMutex();
 80020d8:	2001      	movs	r0, #1
 80020da:	f008 fa34 	bl	800a546 <xQueueCreateMutex>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a5b      	ldr	r2, [pc, #364]	; (8002250 <vInitTask+0x180>)
 80020e2:	6013      	str	r3, [r2, #0]
	if (Sem1 == NULL) {
 80020e4:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <vInitTask+0x180>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <vInitTask+0x28>
		printf("Erreur création sémaphore 1 !\r\n");
 80020ec:	4859      	ldr	r0, [pc, #356]	; (8002254 <vInitTask+0x184>)
 80020ee:	f00c fdff 	bl	800ecf0 <puts>
		exit(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f00c f8be 	bl	800e274 <exit>
	}
	vQueueAddToRegistry(Sem1, "Sem1");
 80020f8:	4b55      	ldr	r3, [pc, #340]	; (8002250 <vInitTask+0x180>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4956      	ldr	r1, [pc, #344]	; (8002258 <vInitTask+0x188>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f008 fee4 	bl	800aecc <vQueueAddToRegistry>

	Sem2 = xSemaphoreCreateMutex();
 8002104:	2001      	movs	r0, #1
 8002106:	f008 fa1e 	bl	800a546 <xQueueCreateMutex>
 800210a:	4603      	mov	r3, r0
 800210c:	4a53      	ldr	r2, [pc, #332]	; (800225c <vInitTask+0x18c>)
 800210e:	6013      	str	r3, [r2, #0]
	if (Sem2 == NULL) {
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <vInitTask+0x18c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <vInitTask+0x54>
		printf("Erreur création sémaphore 2 !\r\n");
 8002118:	4851      	ldr	r0, [pc, #324]	; (8002260 <vInitTask+0x190>)
 800211a:	f00c fde9 	bl	800ecf0 <puts>
		exit(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f00c f8a8 	bl	800e274 <exit>
	}
	vQueueAddToRegistry(Sem2, "Sem2");
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <vInitTask+0x18c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	494e      	ldr	r1, [pc, #312]	; (8002264 <vInitTask+0x194>)
 800212a:	4618      	mov	r0, r3
 800212c:	f008 fece 	bl	800aecc <vQueueAddToRegistry>


	//Messages Queues
	//Entre les tâches 1a et 2a
	Queue1 = xQueueCreate(1, sizeof(double[6]));
 8002130:	2200      	movs	r2, #0
 8002132:	2130      	movs	r1, #48	; 0x30
 8002134:	2001      	movs	r0, #1
 8002136:	f008 f98d 	bl	800a454 <xQueueGenericCreate>
 800213a:	4603      	mov	r3, r0
 800213c:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <vInitTask+0x198>)
 800213e:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(Queue1, "Queue1");
 8002140:	4b49      	ldr	r3, [pc, #292]	; (8002268 <vInitTask+0x198>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4949      	ldr	r1, [pc, #292]	; (800226c <vInitTask+0x19c>)
 8002146:	4618      	mov	r0, r3
 8002148:	f008 fec0 	bl	800aecc <vQueueAddToRegistry>
	Queue2 = xQueueCreate(1, sizeof(double[6]));
 800214c:	2200      	movs	r2, #0
 800214e:	2130      	movs	r1, #48	; 0x30
 8002150:	2001      	movs	r0, #1
 8002152:	f008 f97f 	bl	800a454 <xQueueGenericCreate>
 8002156:	4603      	mov	r3, r0
 8002158:	4a45      	ldr	r2, [pc, #276]	; (8002270 <vInitTask+0x1a0>)
 800215a:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(Queue2, "Queue2");
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <vInitTask+0x1a0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4944      	ldr	r1, [pc, #272]	; (8002274 <vInitTask+0x1a4>)
 8002162:	4618      	mov	r0, r3
 8002164:	f008 feb2 	bl	800aecc <vQueueAddToRegistry>
	Queue3 = xQueueCreate(1, sizeof(double[6]));
 8002168:	2200      	movs	r2, #0
 800216a:	2130      	movs	r1, #48	; 0x30
 800216c:	2001      	movs	r0, #1
 800216e:	f008 f971 	bl	800a454 <xQueueGenericCreate>
 8002172:	4603      	mov	r3, r0
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <vInitTask+0x1a8>)
 8002176:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(Queue3, "Queue3");
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <vInitTask+0x1a8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	493f      	ldr	r1, [pc, #252]	; (800227c <vInitTask+0x1ac>)
 800217e:	4618      	mov	r0, r3
 8002180:	f008 fea4 	bl	800aecc <vQueueAddToRegistry>
	Queue4 = xQueueCreate(1, sizeof(double[6]));
 8002184:	2200      	movs	r2, #0
 8002186:	2130      	movs	r1, #48	; 0x30
 8002188:	2001      	movs	r0, #1
 800218a:	f008 f963 	bl	800a454 <xQueueGenericCreate>
 800218e:	4603      	mov	r3, r0
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <vInitTask+0x1b0>)
 8002192:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(Queue4, "Queue4");
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <vInitTask+0x1b0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	493a      	ldr	r1, [pc, #232]	; (8002284 <vInitTask+0x1b4>)
 800219a:	4618      	mov	r0, r3
 800219c:	f008 fe96 	bl	800aecc <vQueueAddToRegistry>
	Queue5 = xQueueCreate(1, sizeof(double[6]));
 80021a0:	2200      	movs	r2, #0
 80021a2:	2130      	movs	r1, #48	; 0x30
 80021a4:	2001      	movs	r0, #1
 80021a6:	f008 f955 	bl	800a454 <xQueueGenericCreate>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a36      	ldr	r2, [pc, #216]	; (8002288 <vInitTask+0x1b8>)
 80021ae:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(Queue5, "Queue5");
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <vInitTask+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <vInitTask+0x1bc>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f008 fe88 	bl	800aecc <vQueueAddToRegistry>

	// Création des tâches
	xTaskCreate(vTask1a, "task 1a", 1000, NULL, 2, NULL);
 80021bc:	2300      	movs	r3, #0
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ca:	4931      	ldr	r1, [pc, #196]	; (8002290 <vInitTask+0x1c0>)
 80021cc:	4831      	ldr	r0, [pc, #196]	; (8002294 <vInitTask+0x1c4>)
 80021ce:	f008 fedb 	bl	800af88 <xTaskCreate>
	xTaskCreate(vTask1b, "task 1b", 1000, NULL, 2, NULL);
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2302      	movs	r3, #2
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e0:	492d      	ldr	r1, [pc, #180]	; (8002298 <vInitTask+0x1c8>)
 80021e2:	482e      	ldr	r0, [pc, #184]	; (800229c <vInitTask+0x1cc>)
 80021e4:	f008 fed0 	bl	800af88 <xTaskCreate>
	xTaskCreate(vTask2a, "task 2a", 1000, NULL, 3, NULL);
 80021e8:	2300      	movs	r3, #0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2303      	movs	r3, #3
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f6:	492a      	ldr	r1, [pc, #168]	; (80022a0 <vInitTask+0x1d0>)
 80021f8:	482a      	ldr	r0, [pc, #168]	; (80022a4 <vInitTask+0x1d4>)
 80021fa:	f008 fec5 	bl	800af88 <xTaskCreate>
	xTaskCreate(vTask2b, "task 2b", 1000, NULL, 3, NULL);
 80021fe:	2300      	movs	r3, #0
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2303      	movs	r3, #3
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800220c:	4926      	ldr	r1, [pc, #152]	; (80022a8 <vInitTask+0x1d8>)
 800220e:	4827      	ldr	r0, [pc, #156]	; (80022ac <vInitTask+0x1dc>)
 8002210:	f008 feba 	bl	800af88 <xTaskCreate>
	xTaskCreate(vTask3, "task 3", 1000, NULL, 1, NULL);
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2301      	movs	r3, #1
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002222:	4923      	ldr	r1, [pc, #140]	; (80022b0 <vInitTask+0x1e0>)
 8002224:	4823      	ldr	r0, [pc, #140]	; (80022b4 <vInitTask+0x1e4>)
 8002226:	f008 feaf 	bl	800af88 <xTaskCreate>
	xTaskCreate(vTask4, "task 4", 1000, NULL, 1, NULL);
 800222a:	2300      	movs	r3, #0
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2301      	movs	r3, #1
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2300      	movs	r3, #0
 8002234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002238:	491f      	ldr	r1, [pc, #124]	; (80022b8 <vInitTask+0x1e8>)
 800223a:	4820      	ldr	r0, [pc, #128]	; (80022bc <vInitTask+0x1ec>)
 800223c:	f008 fea4 	bl	800af88 <xTaskCreate>
	vTaskDelete(NULL);
 8002240:	2000      	movs	r0, #0
 8002242:	f008 ffe5 	bl	800b210 <vTaskDelete>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2001fc2c 	.word	0x2001fc2c
 8002254:	080122c8 	.word	0x080122c8
 8002258:	080122ec 	.word	0x080122ec
 800225c:	2001fc34 	.word	0x2001fc34
 8002260:	080122f4 	.word	0x080122f4
 8002264:	08012318 	.word	0x08012318
 8002268:	2001fc40 	.word	0x2001fc40
 800226c:	08012320 	.word	0x08012320
 8002270:	2001fc30 	.word	0x2001fc30
 8002274:	08012328 	.word	0x08012328
 8002278:	2001fc3c 	.word	0x2001fc3c
 800227c:	08012330 	.word	0x08012330
 8002280:	2001fc38 	.word	0x2001fc38
 8002284:	08012338 	.word	0x08012338
 8002288:	2001fc28 	.word	0x2001fc28
 800228c:	08012340 	.word	0x08012340
 8002290:	08012348 	.word	0x08012348
 8002294:	080022c1 	.word	0x080022c1
 8002298:	08012350 	.word	0x08012350
 800229c:	0800234d 	.word	0x0800234d
 80022a0:	08012358 	.word	0x08012358
 80022a4:	08002445 	.word	0x08002445
 80022a8:	08012360 	.word	0x08012360
 80022ac:	08002491 	.word	0x08002491
 80022b0:	08012368 	.word	0x08012368
 80022b4:	080024c9 	.word	0x080024c9
 80022b8:	08012370 	.word	0x08012370
 80022bc:	0800255d 	.word	0x0800255d

080022c0 <vTask1a>:


void vTask1a(void *pvParameters){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b09a      	sub	sp, #104	; 0x68
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
		double acc_gyro[6];

		double gyro[3];

		//Le sémaphore prend le bus I2C
		xSemaphoreTake(Sem1, portMAX_DELAY);
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <vTask1a+0x80>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	4618      	mov	r0, r3
 80022d2:	f008 fbc7 	bl	800aa64 <xQueueSemaphoreTake>
		//Récupération des valeurs de l'accélération
		MeasureA(&hi2c3, acc);
 80022d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022da:	4619      	mov	r1, r3
 80022dc:	4819      	ldr	r0, [pc, #100]	; (8002344 <vTask1a+0x84>)
 80022de:	f00b f98b 	bl	800d5f8 <MeasureA>
		//Récupération des valeurs du gyromètre
		MeasureG(&hi2c3, gyro);
 80022e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e6:	4619      	mov	r1, r3
 80022e8:	4816      	ldr	r0, [pc, #88]	; (8002344 <vTask1a+0x84>)
 80022ea:	f00b fa15 	bl	800d718 <MeasureG>

		//Le sémaphore rend le bus I2C
		xSemaphoreGive(Sem1);
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <vTask1a+0x80>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	f008 f93e 	bl	800a578 <xQueueGenericSend>

		//Stockage des données
		acc_gyro[0] = acc[0];
 80022fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002300:	e9c7 2302 	strd	r2, r3, [r7, #8]
		acc_gyro[1] = acc[1];
 8002304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002308:	e9c7 2304 	strd	r2, r3, [r7, #16]
		acc_gyro[2] = acc[2];
 800230c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002310:	e9c7 2306 	strd	r2, r3, [r7, #24]
		acc_gyro[3] = acc[3];
 8002314:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002318:	e9c7 2308 	strd	r2, r3, [r7, #32]
		acc_gyro[4] = acc[4];
 800231c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002320:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		acc_gyro[5] = acc[5];
 8002324:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002328:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		xQueueSend(Queue1,&acc_gyro, portMAX_DELAY);
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <vTask1a+0x88>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	f107 0108 	add.w	r1, r7, #8
 8002334:	2300      	movs	r3, #0
 8002336:	f04f 32ff 	mov.w	r2, #4294967295
 800233a:	f008 f91d 	bl	800a578 <xQueueGenericSend>
	while(1) {
 800233e:	e7c3      	b.n	80022c8 <vTask1a+0x8>
 8002340:	2001fc2c 	.word	0x2001fc2c
 8002344:	2001fa10 	.word	0x2001fa10
 8002348:	2001fc40 	.word	0x2001fc40

0800234c <vTask1b>:
	}
}


void vTask1b(void *pvParameters){
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b0a4      	sub	sp, #144	; 0x90
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
		long signed int Tfine;
		double theta;
		double mag[3];
		double barometer;

		double magnet_bias[3] = {0,0,0};
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		double press_mag[4] = {0,0,0,0};
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f00b ffbd 	bl	800e300 <memset>
		double scale[3] = {1,1,1};
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <vTask1b+0xe4>)
 8002388:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800238c:	461d      	mov	r5, r3
 800238e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002396:	e884 0003 	stmia.w	r4, {r0, r1}

		//Le sémaphore prend le bus I2C
		xSemaphoreTake(Sem1, portMAX_DELAY);
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <vTask1b+0xe8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 31ff 	mov.w	r1, #4294967295
 80023a2:	4618      	mov	r0, r3
 80023a4:	f008 fb5e 	bl	800aa64 <xQueueSemaphoreTake>
		//Récupération des valeurs du magnétomètre
		MeasureM(&hi2c3,mag, magnet_bias, scale);
 80023a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80023b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80023b4:	4820      	ldr	r0, [pc, #128]	; (8002438 <vTask1b+0xec>)
 80023b6:	f00b fa67 	bl	800d888 <MeasureM>
		//Récupération des valeurs du barometre
		MeasureT_BMP280(&hi2c3, &theta, &Tfine );
 80023ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023c2:	4619      	mov	r1, r3
 80023c4:	481c      	ldr	r0, [pc, #112]	; (8002438 <vTask1b+0xec>)
 80023c6:	f00a fe01 	bl	800cfcc <MeasureT_BMP280>
		MeasureP(&hi2c3, &press, &Tfine);
 80023ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023d2:	4619      	mov	r1, r3
 80023d4:	4818      	ldr	r0, [pc, #96]	; (8002438 <vTask1b+0xec>)
 80023d6:	f00a fee7 	bl	800d1a8 <MeasureP>

		//Le sémaphore rend le bus I2C
		xSemaphoreGive(Sem1);
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <vTask1b+0xe8>)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	f008 f8c8 	bl	800a578 <xQueueGenericSend>

		//Stockage des données
		press_mag[0] = press;
 80023e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
		press_mag[1] = mag[0];
 80023f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		press_mag[2] = mag[1];
 80023f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		press_mag[3] = mag[2];
 8002400:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002404:	e9c7 2308 	strd	r2, r3, [r7, #32]

		xQueueSend(Queue2,&press_mag, portMAX_DELAY);
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <vTask1b+0xf0>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	f107 0108 	add.w	r1, r7, #8
 8002410:	2300      	movs	r3, #0
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	f008 f8af 	bl	800a578 <xQueueGenericSend>
		xQueueSend(Queue3,&barometer, portMAX_DELAY);
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <vTask1b+0xf4>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002422:	2300      	movs	r3, #0
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	f008 f8a6 	bl	800a578 <xQueueGenericSend>
	while(1) {
 800242c:	e792      	b.n	8002354 <vTask1b+0x8>
 800242e:	bf00      	nop
 8002430:	08012378 	.word	0x08012378
 8002434:	2001fc2c 	.word	0x2001fc2c
 8002438:	2001fa10 	.word	0x2001fa10
 800243c:	2001fc30 	.word	0x2001fc30
 8002440:	2001fc3c 	.word	0x2001fc3c

08002444 <vTask2a>:
	}
}


void vTask2a(void *pvParameters){
 8002444:	b580      	push	{r7, lr}
 8002446:	b09c      	sub	sp, #112	; 0x70
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	double acc_gyro[6];
	double press_mag[4];
	double angles[3];

	//On attend la réception des données
	xQueueReceive(Queue1,&acc_gyro, portMAX_DELAY);
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <vTask2a+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	4618      	mov	r0, r3
 800245a:	f008 fa23 	bl	800a8a4 <xQueueReceive>
	xQueueReceive(Queue2,&press_mag, portMAX_DELAY);
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <vTask2a+0x44>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f107 0108 	add.w	r1, r7, #8
 8002466:	f04f 32ff 	mov.w	r2, #4294967295
 800246a:	4618      	mov	r0, r3
 800246c:	f008 fa1a 	bl	800a8a4 <xQueueReceive>

	//Calcul de l'angle de roulis à partir des données récupérées dans vTask1a et vTask1b
	//Calcul de l'angle de tangage à partir des données récupérées dans vTask1a et vTask1b
	//Calcul de l'angle de lacet à partir des données récupérées dans vTask1a et vTask1b

	xQueueSend(Queue4,&angles, portMAX_DELAY);
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <vTask2a+0x48>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002478:	2300      	movs	r3, #0
 800247a:	f04f 32ff 	mov.w	r2, #4294967295
 800247e:	f008 f87b 	bl	800a578 <xQueueGenericSend>
	while(1) {
 8002482:	e7e3      	b.n	800244c <vTask2a+0x8>
 8002484:	2001fc40 	.word	0x2001fc40
 8002488:	2001fc30 	.word	0x2001fc30
 800248c:	2001fc38 	.word	0x2001fc38

08002490 <vTask2b>:
	}
}


void vTask2b(void *pvParameters){
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	while(1) {
	double barometer;
	double altitude;

	//On attend la réception des données
	xQueueReceive(Queue3,&barometer, portMAX_DELAY);
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <vTask2b+0x30>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f107 0110 	add.w	r1, r7, #16
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	4618      	mov	r0, r3
 80024a6:	f008 f9fd 	bl	800a8a4 <xQueueReceive>

	//Calcul à faire plus tard

	xQueueSend(Queue5, &altitude, portMAX_DELAY);
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <vTask2b+0x34>)
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	f107 0108 	add.w	r1, r7, #8
 80024b2:	2300      	movs	r3, #0
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	f008 f85e 	bl	800a578 <xQueueGenericSend>
	while(1) {
 80024bc:	e7ec      	b.n	8002498 <vTask2b+0x8>
 80024be:	bf00      	nop
 80024c0:	2001fc3c 	.word	0x2001fc3c
 80024c4:	2001fc28 	.word	0x2001fc28

080024c8 <vTask3>:

}



void vTask3(void *pvParameters){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	while(1) {
	double angles[3];
	double altitude;

	xQueueReceive(Queue4, &angles, portMAX_DELAY);
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <vTask3+0x88>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f107 0110 	add.w	r1, r7, #16
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	4618      	mov	r0, r3
 80024de:	f008 f9e1 	bl	800a8a4 <xQueueReceive>
	xQueueReceive(Queue5, &altitude, portMAX_DELAY);
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <vTask3+0x8c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f107 0108 	add.w	r1, r7, #8
 80024ea:	f04f 32ff 	mov.w	r2, #4294967295
 80024ee:	4618      	mov	r0, r3
 80024f0:	f008 f9d8 	bl	800a8a4 <xQueueReceive>

	xSemaphoreTake(Sem2, portMAX_DELAY);
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <vTask3+0x90>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	4618      	mov	r0, r3
 80024fe:	f008 fab1 	bl	800aa64 <xQueueSemaphoreTake>

	GUI(angles[0], angles[1], angles[2], altitude, 0);
 8002502:	ed97 7b04 	vldr	d7, [r7, #16]
 8002506:	ed97 6b06 	vldr	d6, [r7, #24]
 800250a:	ed97 5b08 	vldr	d5, [r7, #32]
 800250e:	ed97 3b02 	vldr	d3, [r7, #8]
 8002512:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 8002548 <vTask3+0x80>
 8002516:	eeb0 2a45 	vmov.f32	s4, s10
 800251a:	eef0 2a65 	vmov.f32	s5, s11
 800251e:	eeb0 1a46 	vmov.f32	s2, s12
 8002522:	eef0 1a66 	vmov.f32	s3, s13
 8002526:	eeb0 0a47 	vmov.f32	s0, s14
 800252a:	eef0 0a67 	vmov.f32	s1, s15
 800252e:	f00b fa6b 	bl	800da08 <GUI>

	xSemaphoreGive(Sem2);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <vTask3+0x90>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	f008 f81c 	bl	800a578 <xQueueGenericSend>
	while(1) {
 8002540:	e7c6      	b.n	80024d0 <vTask3+0x8>
 8002542:	bf00      	nop
 8002544:	f3af 8000 	nop.w
	...
 8002550:	2001fc38 	.word	0x2001fc38
 8002554:	2001fc28 	.word	0x2001fc28
 8002558:	2001fc34 	.word	0x2001fc34

0800255c <vTask4>:
	}

}

void vTask4(void *pvParameters){
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	while(1) {
	double angles[3];
	double altitude;
	int i;

	xQueueReceive(Queue4, &angles, portMAX_DELAY);
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <vTask4+0x7c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f107 0110 	add.w	r1, r7, #16
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	4618      	mov	r0, r3
 8002572:	f008 f997 	bl	800a8a4 <xQueueReceive>
	xQueueReceive(Queue5, &altitude, portMAX_DELAY);
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <vTask4+0x80>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f107 0108 	add.w	r1, r7, #8
 800257e:	f04f 32ff 	mov.w	r2, #4294967295
 8002582:	4618      	mov	r0, r3
 8002584:	f008 f98e 	bl	800a8a4 <xQueueReceive>

	xSemaphoreTake(Sem2, portMAX_DELAY);
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <vTask4+0x84>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	4618      	mov	r0, r3
 8002592:	f008 fa67 	bl	800aa64 <xQueueSemaphoreTake>

	for(i = 0; i < 3; i++){
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259a:	e00d      	b.n	80025b8 <vTask4+0x5c>
		printf("Angles: %f \r\n", angles[i]);
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025a4:	4413      	add	r3, r2
 80025a6:	3b20      	subs	r3, #32
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <vTask4+0x88>)
 80025ae:	f00c fb19 	bl	800ebe4 <iprintf>
	for(i = 0; i < 3; i++){
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	3301      	adds	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	ddee      	ble.n	800259c <vTask4+0x40>
	}

	printf("altitude %f \r\n : ", altitude);
 80025be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <vTask4+0x8c>)
 80025c4:	f00c fb0e 	bl	800ebe4 <iprintf>

	xSemaphoreGive(Sem2);
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <vTask4+0x84>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	2300      	movs	r3, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	f007 ffd1 	bl	800a578 <xQueueGenericSend>
	while(1) {
 80025d6:	e7c5      	b.n	8002564 <vTask4+0x8>
 80025d8:	2001fc38 	.word	0x2001fc38
 80025dc:	2001fc28 	.word	0x2001fc28
 80025e0:	2001fc34 	.word	0x2001fc34
 80025e4:	08012390 	.word	0x08012390
 80025e8:	080123a0 	.word	0x080123a0

080025ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	463b      	mov	r3, r7
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <MX_TIM1_Init+0x98>)
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <MX_TIM1_Init+0x9c>)
 800260c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <MX_TIM1_Init+0x98>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_TIM1_Init+0x98>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_TIM1_Init+0x98>)
 800261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_TIM1_Init+0x98>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <MX_TIM1_Init+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_TIM1_Init+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002634:	4813      	ldr	r0, [pc, #76]	; (8002684 <MX_TIM1_Init+0x98>)
 8002636:	f006 f995 	bl	8008964 <HAL_TIM_Base_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002640:	f7ff fae0 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <MX_TIM1_Init+0x98>)
 8002652:	f006 fade 	bl	8008c12 <HAL_TIM_ConfigClockSource>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800265c:	f7ff fad2 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002668:	463b      	mov	r3, r7
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_TIM1_Init+0x98>)
 800266e:	f006 fcf7 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002678:	f7ff fac4 	bl	8001c04 <Error_Handler>
  }

}
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2001fc84 	.word	0x2001fc84
 8002688:	40010000 	.word	0x40010000

0800268c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	f107 0308 	add.w	r3, r7, #8
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	463b      	mov	r3, r7
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <MX_TIM5_Init+0x94>)
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <MX_TIM5_Init+0x98>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <MX_TIM5_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <MX_TIM5_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <MX_TIM5_Init+0x94>)
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <MX_TIM5_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <MX_TIM5_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026ce:	4814      	ldr	r0, [pc, #80]	; (8002720 <MX_TIM5_Init+0x94>)
 80026d0:	f006 f948 	bl	8008964 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80026da:	f7ff fa93 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4619      	mov	r1, r3
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <MX_TIM5_Init+0x94>)
 80026ec:	f006 fa91 	bl	8008c12 <HAL_TIM_ConfigClockSource>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80026f6:	f7ff fa85 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	4806      	ldr	r0, [pc, #24]	; (8002720 <MX_TIM5_Init+0x94>)
 8002708:	f006 fcaa 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002712:	f7ff fa77 	bl	8001c04 <Error_Handler>
  }

}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2001fc44 	.word	0x2001fc44
 8002724:	40000c00 	.word	0x40000c00

08002728 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272e:	463b      	mov	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_TIM7_Init+0x64>)
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <MX_TIM7_Init+0x68>)
 800273a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_TIM7_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_TIM7_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <MX_TIM7_Init+0x64>)
 800274a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_TIM7_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002756:	480d      	ldr	r0, [pc, #52]	; (800278c <MX_TIM7_Init+0x64>)
 8002758:	f006 f904 	bl	8008964 <HAL_TIM_Base_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002762:	f7ff fa4f 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800276e:	463b      	mov	r3, r7
 8002770:	4619      	mov	r1, r3
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_TIM7_Init+0x64>)
 8002774:	f006 fc74 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800277e:	f7ff fa41 	bl	8001c04 <Error_Handler>
  }

}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2001fcc4 	.word	0x2001fcc4
 8002790:	40001400 	.word	0x40001400

08002794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_TIM_Base_MspInit+0xa8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80027c2:	e036      	b.n	8002832 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_TIM_Base_MspInit+0xb0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d116      	bne.n	80027fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2105      	movs	r1, #5
 80027ee:	2032      	movs	r0, #50	; 0x32
 80027f0:	f001 fe90 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027f4:	2032      	movs	r0, #50	; 0x32
 80027f6:	f001 fea9 	bl	800454c <HAL_NVIC_EnableIRQ>
}
 80027fa:	e01a      	b.n	8002832 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_TIM_Base_MspInit+0xb4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d115      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 8002810:	f043 0320 	orr.w	r3, r3, #32
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_TIM_Base_MspInit+0xac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	2037      	movs	r0, #55	; 0x37
 8002828:	f001 fe74 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800282c:	2037      	movs	r0, #55	; 0x37
 800282e:	f001 fe8d 	bl	800454c <HAL_NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	40023800 	.word	0x40023800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40001400 	.word	0x40001400

0800284c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <MX_USART1_UART_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002884:	f006 fc7c 	bl	8009180 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800288e:	f7ff f9b9 	bl	8001c04 <Error_Handler>
  }

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2001fd04 	.word	0x2001fd04
 800289c:	40011000 	.word	0x40011000

080028a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_UART_MspInit+0x94>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d134      	bne.n	800292c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_UART_MspInit+0x98>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800290c:	2307      	movs	r3, #7
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4809      	ldr	r0, [pc, #36]	; (800293c <HAL_UART_MspInit+0x9c>)
 8002918:	f002 fba2 	bl	8005060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2105      	movs	r1, #5
 8002920:	2025      	movs	r0, #37	; 0x25
 8002922:	f001 fdf7 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002926:	2025      	movs	r0, #37	; 0x25
 8002928:	f001 fe10 	bl	800454c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40011000 	.word	0x40011000
 8002938:	40023800 	.word	0x40023800
 800293c:	40020000 	.word	0x40020000

08002940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002978 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002946:	e003      	b.n	8002950 <LoopCopyDataInit>

08002948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800294a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800294c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800294e:	3104      	adds	r1, #4

08002950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002950:	480b      	ldr	r0, [pc, #44]	; (8002980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002958:	d3f6      	bcc.n	8002948 <CopyDataInit>
  ldr  r2, =_sbss
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800295c:	e002      	b.n	8002964 <LoopFillZerobss>

0800295e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800295e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002960:	f842 3b04 	str.w	r3, [r2], #4

08002964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002968:	d3f9      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800296a:	f7ff fb9b 	bl	80020a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296e:	f00b fc95 	bl	800e29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7fe ffa5 	bl	80018c0 <main>
  bx  lr    
 8002976:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002978:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800297c:	08015560 	.word	0x08015560
  ldr  r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002984:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8002988:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 800298c:	2001fe64 	.word	0x2001fe64

08002990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC_IRQHandler>

08002992 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002996:	f000 fa5d 	bl	8002e54 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800299a:	20ca      	movs	r0, #202	; 0xca
 800299c:	f000 f95d 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80029a0:	20c3      	movs	r0, #195	; 0xc3
 80029a2:	f000 f967 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80029a6:	2008      	movs	r0, #8
 80029a8:	f000 f964 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80029ac:	2050      	movs	r0, #80	; 0x50
 80029ae:	f000 f961 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80029b2:	20cf      	movs	r0, #207	; 0xcf
 80029b4:	f000 f951 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 f95b 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80029be:	20c1      	movs	r0, #193	; 0xc1
 80029c0:	f000 f958 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80029c4:	2030      	movs	r0, #48	; 0x30
 80029c6:	f000 f955 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80029ca:	20ed      	movs	r0, #237	; 0xed
 80029cc:	f000 f945 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80029d0:	2064      	movs	r0, #100	; 0x64
 80029d2:	f000 f94f 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f000 f94c 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80029dc:	2012      	movs	r0, #18
 80029de:	f000 f949 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80029e2:	2081      	movs	r0, #129	; 0x81
 80029e4:	f000 f946 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80029e8:	20e8      	movs	r0, #232	; 0xe8
 80029ea:	f000 f936 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80029ee:	2085      	movs	r0, #133	; 0x85
 80029f0:	f000 f940 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f000 f93d 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80029fa:	2078      	movs	r0, #120	; 0x78
 80029fc:	f000 f93a 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002a00:	20cb      	movs	r0, #203	; 0xcb
 8002a02:	f000 f92a 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002a06:	2039      	movs	r0, #57	; 0x39
 8002a08:	f000 f934 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002a0c:	202c      	movs	r0, #44	; 0x2c
 8002a0e:	f000 f931 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f92e 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002a18:	2034      	movs	r0, #52	; 0x34
 8002a1a:	f000 f92b 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f000 f928 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002a24:	20f7      	movs	r0, #247	; 0xf7
 8002a26:	f000 f918 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002a2a:	2020      	movs	r0, #32
 8002a2c:	f000 f922 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002a30:	20ea      	movs	r0, #234	; 0xea
 8002a32:	f000 f912 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 f91c 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f000 f919 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002a42:	20b1      	movs	r0, #177	; 0xb1
 8002a44:	f000 f909 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f913 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002a4e:	201b      	movs	r0, #27
 8002a50:	f000 f910 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002a54:	20b6      	movs	r0, #182	; 0xb6
 8002a56:	f000 f900 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002a5a:	200a      	movs	r0, #10
 8002a5c:	f000 f90a 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002a60:	20a2      	movs	r0, #162	; 0xa2
 8002a62:	f000 f907 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002a66:	20c0      	movs	r0, #192	; 0xc0
 8002a68:	f000 f8f7 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a6c:	2010      	movs	r0, #16
 8002a6e:	f000 f901 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002a72:	20c1      	movs	r0, #193	; 0xc1
 8002a74:	f000 f8f1 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a78:	2010      	movs	r0, #16
 8002a7a:	f000 f8fb 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002a7e:	20c5      	movs	r0, #197	; 0xc5
 8002a80:	f000 f8eb 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002a84:	2045      	movs	r0, #69	; 0x45
 8002a86:	f000 f8f5 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002a8a:	2015      	movs	r0, #21
 8002a8c:	f000 f8f2 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002a90:	20c7      	movs	r0, #199	; 0xc7
 8002a92:	f000 f8e2 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002a96:	2090      	movs	r0, #144	; 0x90
 8002a98:	f000 f8ec 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002a9c:	2036      	movs	r0, #54	; 0x36
 8002a9e:	f000 f8dc 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002aa2:	20c8      	movs	r0, #200	; 0xc8
 8002aa4:	f000 f8e6 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002aa8:	20f2      	movs	r0, #242	; 0xf2
 8002aaa:	f000 f8d6 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f000 f8e0 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002ab4:	20b0      	movs	r0, #176	; 0xb0
 8002ab6:	f000 f8d0 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002aba:	20c2      	movs	r0, #194	; 0xc2
 8002abc:	f000 f8da 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ac0:	20b6      	movs	r0, #182	; 0xb6
 8002ac2:	f000 f8ca 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002ac6:	200a      	movs	r0, #10
 8002ac8:	f000 f8d4 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002acc:	20a7      	movs	r0, #167	; 0xa7
 8002ace:	f000 f8d1 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002ad2:	2027      	movs	r0, #39	; 0x27
 8002ad4:	f000 f8ce 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002ad8:	2004      	movs	r0, #4
 8002ada:	f000 f8cb 	bl	8002c74 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002ade:	202a      	movs	r0, #42	; 0x2a
 8002ae0:	f000 f8bb 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f000 f8c5 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f8c2 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f000 f8bf 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002af6:	20ef      	movs	r0, #239	; 0xef
 8002af8:	f000 f8bc 	bl	8002c74 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002afc:	202b      	movs	r0, #43	; 0x2b
 8002afe:	f000 f8ac 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f000 f8b6 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f000 f8b3 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 f8b0 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002b14:	203f      	movs	r0, #63	; 0x3f
 8002b16:	f000 f8ad 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002b1a:	20f6      	movs	r0, #246	; 0xf6
 8002b1c:	f000 f89d 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b20:	2001      	movs	r0, #1
 8002b22:	f000 f8a7 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f8a4 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002b2c:	2006      	movs	r0, #6
 8002b2e:	f000 f8a1 	bl	8002c74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	f000 f891 	bl	8002c5a <ili9341_WriteReg>
  LCD_Delay(200);
 8002b38:	20c8      	movs	r0, #200	; 0xc8
 8002b3a:	f000 fa79 	bl	8003030 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002b3e:	2026      	movs	r0, #38	; 0x26
 8002b40:	f000 f88b 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 f895 	bl	8002c74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002b4a:	20e0      	movs	r0, #224	; 0xe0
 8002b4c:	f000 f885 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002b50:	200f      	movs	r0, #15
 8002b52:	f000 f88f 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002b56:	2029      	movs	r0, #41	; 0x29
 8002b58:	f000 f88c 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002b5c:	2024      	movs	r0, #36	; 0x24
 8002b5e:	f000 f889 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b62:	200c      	movs	r0, #12
 8002b64:	f000 f886 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002b68:	200e      	movs	r0, #14
 8002b6a:	f000 f883 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b6e:	2009      	movs	r0, #9
 8002b70:	f000 f880 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002b74:	204e      	movs	r0, #78	; 0x4e
 8002b76:	f000 f87d 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b7a:	2078      	movs	r0, #120	; 0x78
 8002b7c:	f000 f87a 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002b80:	203c      	movs	r0, #60	; 0x3c
 8002b82:	f000 f877 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b86:	2009      	movs	r0, #9
 8002b88:	f000 f874 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002b8c:	2013      	movs	r0, #19
 8002b8e:	f000 f871 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002b92:	2005      	movs	r0, #5
 8002b94:	f000 f86e 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002b98:	2017      	movs	r0, #23
 8002b9a:	f000 f86b 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b9e:	2011      	movs	r0, #17
 8002ba0:	f000 f868 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 f865 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002baa:	20e1      	movs	r0, #225	; 0xe1
 8002bac:	f000 f855 	bl	8002c5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f000 f85f 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002bb6:	2016      	movs	r0, #22
 8002bb8:	f000 f85c 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002bbc:	201b      	movs	r0, #27
 8002bbe:	f000 f859 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	f000 f856 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002bc8:	2011      	movs	r0, #17
 8002bca:	f000 f853 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002bce:	2007      	movs	r0, #7
 8002bd0:	f000 f850 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002bd4:	2031      	movs	r0, #49	; 0x31
 8002bd6:	f000 f84d 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002bda:	2033      	movs	r0, #51	; 0x33
 8002bdc:	f000 f84a 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002be0:	2042      	movs	r0, #66	; 0x42
 8002be2:	f000 f847 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f000 f844 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002bec:	200c      	movs	r0, #12
 8002bee:	f000 f841 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	f000 f83e 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002bf8:	2028      	movs	r0, #40	; 0x28
 8002bfa:	f000 f83b 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002bfe:	202f      	movs	r0, #47	; 0x2f
 8002c00:	f000 f838 	bl	8002c74 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002c04:	200f      	movs	r0, #15
 8002c06:	f000 f835 	bl	8002c74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002c0a:	2011      	movs	r0, #17
 8002c0c:	f000 f825 	bl	8002c5a <ili9341_WriteReg>
  LCD_Delay(200);
 8002c10:	20c8      	movs	r0, #200	; 0xc8
 8002c12:	f000 fa0d 	bl	8003030 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002c16:	2029      	movs	r0, #41	; 0x29
 8002c18:	f000 f81f 	bl	8002c5a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002c1c:	202c      	movs	r0, #44	; 0x2c
 8002c1e:	f000 f81c 	bl	8002c5a <ili9341_WriteReg>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002c2a:	f000 f913 	bl	8002e54 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002c2e:	2103      	movs	r1, #3
 8002c30:	20d3      	movs	r0, #211	; 0xd3
 8002c32:	f000 f82c 	bl	8002c8e <ili9341_ReadData>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29b      	uxth	r3, r3
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002c42:	2029      	movs	r0, #41	; 0x29
 8002c44:	f000 f809 	bl	8002c5a <ili9341_WriteReg>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002c50:	2028      	movs	r0, #40	; 0x28
 8002c52:	f000 f802 	bl	8002c5a <ili9341_WriteReg>
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f98e 	bl	8002f88 <LCD_IO_WriteReg>
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f95f 	bl	8002f44 <LCD_IO_WriteData>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	460a      	mov	r2, r1
 8002c98:	80fb      	strh	r3, [r7, #6]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002c9e:	797a      	ldrb	r2, [r7, #5]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f991 	bl	8002fcc <LCD_IO_ReadData>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002cb8:	23f0      	movs	r3, #240	; 0xf0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002cc8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002cdc:	4819      	ldr	r0, [pc, #100]	; (8002d44 <SPIx_Init+0x6c>)
 8002cde:	f005 fd21 	bl	8008724 <HAL_SPI_GetState>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d12b      	bne.n	8002d40 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <SPIx_Init+0x6c>)
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <SPIx_Init+0x70>)
 8002cec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <SPIx_Init+0x6c>)
 8002cf0:	2218      	movs	r2, #24
 8002cf2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <SPIx_Init+0x6c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <SPIx_Init+0x6c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <SPIx_Init+0x6c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <SPIx_Init+0x6c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <SPIx_Init+0x6c>)
 8002d0e:	2207      	movs	r2, #7
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <SPIx_Init+0x6c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <SPIx_Init+0x6c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <SPIx_Init+0x6c>)
 8002d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d24:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <SPIx_Init+0x6c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SPIx_Init+0x6c>)
 8002d2e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d32:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002d34:	4803      	ldr	r0, [pc, #12]	; (8002d44 <SPIx_Init+0x6c>)
 8002d36:	f000 f853 	bl	8002de0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002d3a:	4802      	ldr	r0, [pc, #8]	; (8002d44 <SPIx_Init+0x6c>)
 8002d3c:	f005 f887 	bl	8007e4e <HAL_SPI_Init>
  } 
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000025c 	.word	0x2000025c
 8002d48:	40015000 	.word	0x40015000

08002d4c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <SPIx_Read+0x38>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f107 0108 	add.w	r1, r7, #8
 8002d66:	4808      	ldr	r0, [pc, #32]	; (8002d88 <SPIx_Read+0x3c>)
 8002d68:	f005 fa31 	bl	80081ce <HAL_SPI_Receive>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002d76:	f000 f827 	bl	8002dc8 <SPIx_Error>
  }
  
  return readvalue;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000003c 	.word	0x2000003c
 8002d88:	2000025c 	.word	0x2000025c

08002d8c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <SPIx_Write+0x34>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1db9      	adds	r1, r7, #6
 8002da0:	2201      	movs	r2, #1
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <SPIx_Write+0x38>)
 8002da4:	f005 f8df 	bl	8007f66 <HAL_SPI_Transmit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002db2:	f000 f809 	bl	8002dc8 <SPIx_Error>
  }
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000003c 	.word	0x2000003c
 8002dc4:	2000025c 	.word	0x2000025c

08002dc8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <SPIx_Error+0x14>)
 8002dce:	f005 f8a2 	bl	8007f16 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002dd2:	f7ff ff81 	bl	8002cd8 <SPIx_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000025c 	.word	0x2000025c

08002de0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df6:	6453      	str	r3, [r2, #68]	; 0x44
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <SPIx_MspInit+0x6c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002e20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002e32:	2305      	movs	r3, #5
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <SPIx_MspInit+0x70>)
 8002e3e:	f002 f90f 	bl	8005060 <HAL_GPIO_Init>
}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40021400 	.word	0x40021400

08002e54 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <LCD_IO_Init+0xe0>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d164      	bne.n	8002f2c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002e62:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <LCD_IO_Init+0xe0>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6313      	str	r3, [r2, #48]	; 0x30
 8002e78:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002e92:	2302      	movs	r3, #2
 8002e94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4827      	ldr	r0, [pc, #156]	; (8002f3c <LCD_IO_Init+0xe8>)
 8002e9e:	f002 f8df 	bl	8005060 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4819      	ldr	r0, [pc, #100]	; (8002f3c <LCD_IO_Init+0xe8>)
 8002ed8:	f002 f8c2 	bl	8005060 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <LCD_IO_Init+0xe4>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f04:	2302      	movs	r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <LCD_IO_Init+0xec>)
 8002f10:	f002 f8a6 	bl	8005060 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002f14:	2200      	movs	r2, #0
 8002f16:	2104      	movs	r1, #4
 8002f18:	4809      	ldr	r0, [pc, #36]	; (8002f40 <LCD_IO_Init+0xec>)
 8002f1a:	f002 fb59 	bl	80055d0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2104      	movs	r1, #4
 8002f22:	4807      	ldr	r0, [pc, #28]	; (8002f40 <LCD_IO_Init+0xec>)
 8002f24:	f002 fb54 	bl	80055d0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002f28:	f7ff fed6 	bl	8002cd8 <SPIx_Init>
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200002b4 	.word	0x200002b4
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40020800 	.word	0x40020800

08002f44 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f54:	480a      	ldr	r0, [pc, #40]	; (8002f80 <LCD_IO_WriteData+0x3c>)
 8002f56:	f002 fb3b 	bl	80055d0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4809      	ldr	r0, [pc, #36]	; (8002f84 <LCD_IO_WriteData+0x40>)
 8002f60:	f002 fb36 	bl	80055d0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff10 	bl	8002d8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4804      	ldr	r0, [pc, #16]	; (8002f84 <LCD_IO_WriteData+0x40>)
 8002f72:	f002 fb2d 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40020800 	.word	0x40020800

08002f88 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002f92:	2200      	movs	r2, #0
 8002f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f98:	480a      	ldr	r0, [pc, #40]	; (8002fc4 <LCD_IO_WriteReg+0x3c>)
 8002f9a:	f002 fb19 	bl	80055d0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <LCD_IO_WriteReg+0x40>)
 8002fa4:	f002 fb14 	bl	80055d0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff feed 	bl	8002d8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <LCD_IO_WriteReg+0x40>)
 8002fb8:	f002 fb0a 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40020800 	.word	0x40020800

08002fcc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	80fb      	strh	r3, [r7, #6]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <LCD_IO_ReadData+0x5c>)
 8002fe6:	f002 faf3 	bl	80055d0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff0:	480e      	ldr	r0, [pc, #56]	; (800302c <LCD_IO_ReadData+0x60>)
 8002ff2:	f002 faed 	bl	80055d0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fec7 	bl	8002d8c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002ffe:	797b      	ldrb	r3, [r7, #5]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fea3 	bl	8002d4c <SPIx_Read>
 8003006:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003008:	2201      	movs	r2, #1
 800300a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300e:	4807      	ldr	r0, [pc, #28]	; (800302c <LCD_IO_ReadData+0x60>)
 8003010:	f002 fade 	bl	80055d0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003014:	2201      	movs	r2, #1
 8003016:	2104      	movs	r1, #4
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <LCD_IO_ReadData+0x5c>)
 800301a:	f002 fad9 	bl	80055d0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00

08003030 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f001 f98f 	bl	800435c <HAL_Delay>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <BSP_LCD_Init+0xbc>)
 800304e:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <BSP_LCD_Init+0xc0>)
 8003050:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003052:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003054:	2209      	movs	r2, #9
 8003056:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <BSP_LCD_Init+0xbc>)
 800305a:	2201      	movs	r2, #1
 800305c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003060:	221d      	movs	r2, #29
 8003062:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003066:	2203      	movs	r2, #3
 8003068:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <BSP_LCD_Init+0xbc>)
 800306c:	f240 120d 	movw	r2, #269	; 0x10d
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003074:	f240 1243 	movw	r2, #323	; 0x143
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <BSP_LCD_Init+0xbc>)
 800307c:	f240 1217 	movw	r2, #279	; 0x117
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003084:	f240 1247 	movw	r2, #327	; 0x147
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <BSP_LCD_Init+0xbc>)
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <BSP_LCD_Init+0xbc>)
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <BSP_LCD_Init+0xbc>)
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <BSP_LCD_Init+0xc4>)
 80030a4:	2208      	movs	r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <BSP_LCD_Init+0xc4>)
 80030aa:	22c0      	movs	r2, #192	; 0xc0
 80030ac:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <BSP_LCD_Init+0xc4>)
 80030b0:	2204      	movs	r2, #4
 80030b2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <BSP_LCD_Init+0xc4>)
 80030b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80030bc:	4813      	ldr	r0, [pc, #76]	; (800310c <BSP_LCD_Init+0xc4>)
 80030be:	f004 fc89 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <BSP_LCD_Init+0xbc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <BSP_LCD_Init+0xbc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <BSP_LCD_Init+0xbc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <BSP_LCD_Init+0xbc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80030da:	f000 fd45 	bl	8003b68 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80030de:	4809      	ldr	r0, [pc, #36]	; (8003104 <BSP_LCD_Init+0xbc>)
 80030e0:	f003 fbf8 	bl	80068d4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <BSP_LCD_Init+0xc8>)
 80030e6:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <BSP_LCD_Init+0xcc>)
 80030e8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <BSP_LCD_Init+0xc8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80030f2:	f000 ff27 	bl	8003f44 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80030f6:	4808      	ldr	r0, [pc, #32]	; (8003118 <BSP_LCD_Init+0xd0>)
 80030f8:	f000 f90c 	bl	8003314 <BSP_LCD_SetFont>

  return LCD_OK;
 80030fc:	2300      	movs	r3, #0
}  
 80030fe:	4618      	mov	r0, r3
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2001fd44 	.word	0x2001fd44
 8003108:	40016800 	.word	0x40016800
 800310c:	200002f8 	.word	0x200002f8
 8003110:	2001fdec 	.word	0x2001fdec
 8003114:	20000004 	.word	0x20000004
 8003118:	20000040 	.word	0x20000040

0800311c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <BSP_LCD_GetXSize+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	2001fdec 	.word	0x2001fdec

08003134 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <BSP_LCD_GetYSize+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4798      	blx	r3
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2001fdec 	.word	0x2001fdec

0800314c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800315c:	f7ff ffde 	bl	800311c <BSP_LCD_GetXSize>
 8003160:	4603      	mov	r3, r0
 8003162:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003168:	f7ff ffe4 	bl	8003134 <BSP_LCD_GetYSize>
 800316c:	4603      	mov	r3, r0
 800316e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003178:	23ff      	movs	r3, #255	; 0xff
 800317a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003198:	2307      	movs	r3, #7
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800319c:	f7ff ffbe 	bl	800311c <BSP_LCD_GetXSize>
 80031a0:	4603      	mov	r3, r0
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80031a4:	f7ff ffc6 	bl	8003134 <BSP_LCD_GetYSize>
 80031a8:	4603      	mov	r3, r0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	4619      	mov	r1, r3
 80031b4:	4814      	ldr	r0, [pc, #80]	; (8003208 <BSP_LCD_LayerDefaultInit+0xbc>)
 80031b6:	f003 fd1f 	bl	8006bf8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	4913      	ldr	r1, [pc, #76]	; (800320c <BSP_LCD_LayerDefaultInit+0xc0>)
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3304      	adds	r3, #4
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <BSP_LCD_LayerDefaultInit+0xc0>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3308      	adds	r3, #8
 80031e0:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <BSP_LCD_LayerDefaultInit+0xc4>)
 80031e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	4909      	ldr	r1, [pc, #36]	; (800320c <BSP_LCD_LayerDefaultInit+0xc0>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <BSP_LCD_LayerDefaultInit+0xbc>)
 80031fa:	f003 fd3b 	bl	8006c74 <HAL_LTDC_EnableDither>
}
 80031fe:	bf00      	nop
 8003200:	3740      	adds	r7, #64	; 0x40
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2001fd44 	.word	0x2001fd44
 800320c:	2000032c 	.word	0x2000032c
 8003210:	20000040 	.word	0x20000040

08003214 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <BSP_LCD_SelectLayer+0x1c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000328 	.word	0x20000328

08003234 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d112      	bne.n	800326c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	01db      	lsls	r3, r3, #7
 8003250:	4413      	add	r3, r2
 8003252:	3384      	adds	r3, #132	; 0x84
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4611      	mov	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	01d2      	lsls	r2, r2, #7
 8003260:	440a      	add	r2, r1
 8003262:	3284      	adds	r2, #132	; 0x84
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e011      	b.n	8003290 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	3384      	adds	r3, #132	; 0x84
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4611      	mov	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	01d2      	lsls	r2, r2, #7
 8003286:	440a      	add	r2, r1
 8003288:	3284      	adds	r2, #132	; 0x84
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <BSP_LCD_SetLayerVisible+0x78>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	2001fd44 	.word	0x2001fd44

080032b0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <BSP_LCD_SetTextColor+0x28>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <BSP_LCD_SetTextColor+0x2c>)
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	20000328 	.word	0x20000328
 80032dc:	2000032c 	.word	0x2000032c

080032e0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <BSP_LCD_SetBackColor+0x2c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4908      	ldr	r1, [pc, #32]	; (8003310 <BSP_LCD_SetBackColor+0x30>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3304      	adds	r3, #4
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000328 	.word	0x20000328
 8003310:	2000032c 	.word	0x2000032c

08003314 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <BSP_LCD_SetFont+0x2c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4908      	ldr	r1, [pc, #32]	; (8003344 <BSP_LCD_SetFont+0x30>)
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3308      	adds	r3, #8
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000328 	.word	0x20000328
 8003344:	2000032c 	.word	0x2000032c

08003348 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <BSP_LCD_GetFont+0x24>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <BSP_LCD_GetFont+0x28>)
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3308      	adds	r3, #8
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000328 	.word	0x20000328
 8003370:	2000032c 	.word	0x2000032c

08003374 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <BSP_LCD_Clear+0x48>)
 800337e:	681c      	ldr	r4, [r3, #0]
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <BSP_LCD_Clear+0x48>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <BSP_LCD_Clear+0x4c>)
 8003386:	2134      	movs	r1, #52	; 0x34
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461e      	mov	r6, r3
 8003394:	f7ff fec2 	bl	800311c <BSP_LCD_GetXSize>
 8003398:	4605      	mov	r5, r0
 800339a:	f7ff fecb 	bl	8003134 <BSP_LCD_GetYSize>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	462a      	mov	r2, r5
 80033ac:	4631      	mov	r1, r6
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 fd90 	bl	8003ed4 <FillBuffer>
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033bc:	20000328 	.word	0x20000328
 80033c0:	2001fd44 	.word	0x2001fd44

080033c4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
 80033ce:	460b      	mov	r3, r1
 80033d0:	80bb      	strh	r3, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <BSP_LCD_DisplayChar+0x80>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	491b      	ldr	r1, [pc, #108]	; (8003448 <BSP_LCD_DisplayChar+0x84>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3308      	adds	r3, #8
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <BSP_LCD_DisplayChar+0x80>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4c14      	ldr	r4, [pc, #80]	; (8003448 <BSP_LCD_DisplayChar+0x84>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4423      	add	r3, r4
 8003402:	3308      	adds	r3, #8
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003408:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <BSP_LCD_DisplayChar+0x80>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4c0d      	ldr	r4, [pc, #52]	; (8003448 <BSP_LCD_DisplayChar+0x84>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4423      	add	r3, r4
 800341c:	3308      	adds	r3, #8
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	889b      	ldrh	r3, [r3, #4]
 8003422:	3307      	adds	r3, #7
 8003424:	2b00      	cmp	r3, #0
 8003426:	da00      	bge.n	800342a <BSP_LCD_DisplayChar+0x66>
 8003428:	3307      	adds	r3, #7
 800342a:	10db      	asrs	r3, r3, #3
 800342c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003430:	18ca      	adds	r2, r1, r3
 8003432:	88b9      	ldrh	r1, [r7, #4]
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fc92 	bl	8003d60 <DrawChar>
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}
 8003444:	20000328 	.word	0x20000328
 8003448:	2000032c 	.word	0x2000032c

0800344c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60ba      	str	r2, [r7, #8]
 8003454:	461a      	mov	r2, r3
 8003456:	4603      	mov	r3, r0
 8003458:	81fb      	strh	r3, [r7, #14]
 800345a:	460b      	mov	r3, r1
 800345c:	81bb      	strh	r3, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003462:	2301      	movs	r3, #1
 8003464:	83fb      	strh	r3, [r7, #30]
 8003466:	2300      	movs	r3, #0
 8003468:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003476:	e002      	b.n	800347e <BSP_LCD_DisplayStringAt+0x32>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	3301      	adds	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	617a      	str	r2, [r7, #20]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f6      	bne.n	8003478 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800348a:	f7ff fe47 	bl	800311c <BSP_LCD_GetXSize>
 800348e:	4601      	mov	r1, r0
 8003490:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	484b      	ldr	r0, [pc, #300]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4403      	add	r3, r0
 80034a0:	3308      	adds	r3, #8
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	889b      	ldrh	r3, [r3, #4]
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d01c      	beq.n	80034ec <BSP_LCD_DisplayStringAt+0xa0>
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	dc33      	bgt.n	800351e <BSP_LCD_DisplayStringAt+0xd2>
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d002      	beq.n	80034c0 <BSP_LCD_DisplayStringAt+0x74>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d019      	beq.n	80034f2 <BSP_LCD_DisplayStringAt+0xa6>
 80034be:	e02e      	b.n	800351e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad1      	subs	r1, r2, r3
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	483e      	ldr	r0, [pc, #248]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	3308      	adds	r3, #8
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	889b      	ldrh	r3, [r3, #4]
 80034dc:	fb03 f301 	mul.w	r3, r3, r1
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	89fb      	ldrh	r3, [r7, #14]
 80034e6:	4413      	add	r3, r2
 80034e8:	83fb      	strh	r3, [r7, #30]
      break;
 80034ea:	e01b      	b.n	8003524 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	83fb      	strh	r3, [r7, #30]
      break;
 80034f0:	e018      	b.n	8003524 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b299      	uxth	r1, r3
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4831      	ldr	r0, [pc, #196]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4403      	add	r3, r0
 800350a:	3308      	adds	r3, #8
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	889b      	ldrh	r3, [r3, #4]
 8003510:	fb11 f303 	smulbb	r3, r1, r3
 8003514:	b29a      	uxth	r2, r3
 8003516:	89fb      	ldrh	r3, [r7, #14]
 8003518:	4413      	add	r3, r2
 800351a:	83fb      	strh	r3, [r7, #30]
      break;
 800351c:	e002      	b.n	8003524 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800351e:	89fb      	ldrh	r3, [r7, #14]
 8003520:	83fb      	strh	r3, [r7, #30]
      break;
 8003522:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003524:	e01a      	b.n	800355c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	89b9      	ldrh	r1, [r7, #12]
 800352c:	8bfb      	ldrh	r3, [r7, #30]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff48 	bl	80033c4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4922      	ldr	r1, [pc, #136]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	3308      	adds	r3, #8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	889a      	ldrh	r2, [r3, #4]
 800354a:	8bfb      	ldrh	r3, [r7, #30]
 800354c:	4413      	add	r3, r2
 800354e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3301      	adds	r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
    i++;
 8003556:	8bbb      	ldrh	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2dc      	uxtb	r4, r3
 800356a:	f7ff fdd7 	bl	800311c <BSP_LCD_GetXSize>
 800356e:	8bb9      	ldrh	r1, [r7, #28]
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4d13      	ldr	r5, [pc, #76]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	442b      	add	r3, r5
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	889b      	ldrh	r3, [r3, #4]
 8003586:	fb03 f301 	mul.w	r3, r3, r1
 800358a:	1ac3      	subs	r3, r0, r3
 800358c:	b299      	uxth	r1, r3
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <BSP_LCD_DisplayStringAt+0x174>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	480c      	ldr	r0, [pc, #48]	; (80035c4 <BSP_LCD_DisplayStringAt+0x178>)
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	3308      	adds	r3, #8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	889b      	ldrh	r3, [r3, #4]
 80035a4:	4299      	cmp	r1, r3
 80035a6:	bf2c      	ite	cs
 80035a8:	2301      	movcs	r3, #1
 80035aa:	2300      	movcc	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4023      	ands	r3, r4
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1b7      	bne.n	8003526 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	20000328 	.word	0x20000328
 80035c4:	2000032c 	.word	0x2000032c

080035c8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80035c8:	b5b0      	push	{r4, r5, r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
 80035d2:	460b      	mov	r3, r1
 80035d4:	80bb      	strh	r3, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <BSP_LCD_DrawHLine+0x70>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <BSP_LCD_DrawHLine+0x74>)
 80035e4:	2134      	movs	r1, #52	; 0x34
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	335c      	adds	r3, #92	; 0x5c
 80035ee:	681c      	ldr	r4, [r3, #0]
 80035f0:	f7ff fd94 	bl	800311c <BSP_LCD_GetXSize>
 80035f4:	4602      	mov	r2, r0
 80035f6:	88bb      	ldrh	r3, [r7, #4]
 80035f8:	fb03 f202 	mul.w	r2, r3, r2
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4423      	add	r3, r4
 8003604:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <BSP_LCD_DrawHLine+0x70>)
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	887c      	ldrh	r4, [r7, #2]
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <BSP_LCD_DrawHLine+0x70>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4d0b      	ldr	r5, [pc, #44]	; (8003640 <BSP_LCD_DrawHLine+0x78>)
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	442b      	add	r3, r5
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2301      	movs	r3, #1
 8003628:	4622      	mov	r2, r4
 800362a:	f000 fc53 	bl	8003ed4 <FillBuffer>
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bdb0      	pop	{r4, r5, r7, pc}
 8003636:	bf00      	nop
 8003638:	20000328 	.word	0x20000328
 800363c:	2001fd44 	.word	0x2001fd44
 8003640:	2000032c 	.word	0x2000032c

08003644 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af02      	add	r7, sp, #8
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
 800364e:	460b      	mov	r3, r1
 8003650:	80bb      	strh	r3, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <BSP_LCD_DrawVLine+0x78>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <BSP_LCD_DrawVLine+0x7c>)
 8003660:	2134      	movs	r1, #52	; 0x34
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	335c      	adds	r3, #92	; 0x5c
 800366a:	681c      	ldr	r4, [r3, #0]
 800366c:	f7ff fd56 	bl	800311c <BSP_LCD_GetXSize>
 8003670:	4602      	mov	r2, r0
 8003672:	88bb      	ldrh	r3, [r7, #4]
 8003674:	fb03 f202 	mul.w	r2, r3, r2
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4423      	add	r3, r4
 8003680:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <BSP_LCD_DrawVLine+0x78>)
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	68fd      	ldr	r5, [r7, #12]
 8003688:	887e      	ldrh	r6, [r7, #2]
 800368a:	f7ff fd47 	bl	800311c <BSP_LCD_GetXSize>
 800368e:	4603      	mov	r3, r0
 8003690:	1e59      	subs	r1, r3, #1
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <BSP_LCD_DrawVLine+0x78>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	480b      	ldr	r0, [pc, #44]	; (80036c4 <BSP_LCD_DrawVLine+0x80>)
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4403      	add	r3, r0
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	9100      	str	r1, [sp, #0]
 80036a8:	4633      	mov	r3, r6
 80036aa:	2201      	movs	r2, #1
 80036ac:	4629      	mov	r1, r5
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 fc10 	bl	8003ed4 <FillBuffer>
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036bc:	20000328 	.word	0x20000328
 80036c0:	2001fd44 	.word	0x2001fd44
 80036c4:	2000032c 	.word	0x2000032c

080036c8 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b08b      	sub	sp, #44	; 0x2c
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	80fb      	strh	r3, [r7, #6]
 80036da:	4603      	mov	r3, r0
 80036dc:	80bb      	strh	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]
 80036e2:	4613      	mov	r3, r2
 80036e4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80036e6:	2300      	movs	r3, #0
 80036e8:	823b      	strh	r3, [r7, #16]
 80036ea:	2300      	movs	r3, #0
 80036ec:	81fb      	strh	r3, [r7, #14]
 80036ee:	2300      	movs	r3, #0
 80036f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036f2:	2300      	movs	r3, #0
 80036f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036f6:	2300      	movs	r3, #0
 80036f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80036fa:	2300      	movs	r3, #0
 80036fc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80036fe:	2300      	movs	r3, #0
 8003700:	83fb      	strh	r3, [r7, #30]
 8003702:	2300      	movs	r3, #0
 8003704:	83bb      	strh	r3, [r7, #28]
 8003706:	2300      	movs	r3, #0
 8003708:	837b      	strh	r3, [r7, #26]
 800370a:	2300      	movs	r3, #0
 800370c:	833b      	strh	r3, [r7, #24]
 800370e:	2300      	movs	r3, #0
 8003710:	82fb      	strh	r3, [r7, #22]
 8003712:	2300      	movs	r3, #0
 8003714:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfb8      	it	lt
 8003724:	425b      	neglt	r3, r3
 8003726:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003728:	883a      	ldrh	r2, [r7, #0]
 800372a:	88bb      	ldrh	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfb8      	it	lt
 8003732:	425b      	neglt	r3, r3
 8003734:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800373a:	88bb      	ldrh	r3, [r7, #4]
 800373c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	429a      	cmp	r2, r3
 8003744:	d304      	bcc.n	8003750 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	843b      	strh	r3, [r7, #32]
 800374e:	e005      	b.n	800375c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003754:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800375a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 800375c:	883a      	ldrh	r2, [r7, #0]
 800375e:	88bb      	ldrh	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d304      	bcc.n	800376e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003764:	2301      	movs	r3, #1
 8003766:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003768:	2301      	movs	r3, #1
 800376a:	83bb      	strh	r3, [r7, #28]
 800376c:	e005      	b.n	800377a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800376e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003772:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003778:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800377a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800377e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003782:	429a      	cmp	r2, r3
 8003784:	db10      	blt.n	80037a8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003786:	2300      	movs	r3, #0
 8003788:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800378a:	2300      	movs	r3, #0
 800378c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800378e:	8a3b      	ldrh	r3, [r7, #16]
 8003790:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003792:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003796:	0fda      	lsrs	r2, r3, #31
 8003798:	4413      	add	r3, r2
 800379a:	105b      	asrs	r3, r3, #1
 800379c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80037a2:	8a3b      	ldrh	r3, [r7, #16]
 80037a4:	82bb      	strh	r3, [r7, #20]
 80037a6:	e00f      	b.n	80037c8 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80037a8:	2300      	movs	r3, #0
 80037aa:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80037ac:	2300      	movs	r3, #0
 80037ae:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80037b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037b8:	0fda      	lsrs	r2, r3, #31
 80037ba:	4413      	add	r3, r2
 80037bc:	105b      	asrs	r3, r3, #1
 80037be:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80037c0:	8a3b      	ldrh	r3, [r7, #16]
 80037c2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	827b      	strh	r3, [r7, #18]
 80037cc:	e037      	b.n	800383e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80037ce:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80037d0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <BSP_LCD_DrawLine+0x18c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4c20      	ldr	r4, [pc, #128]	; (8003858 <BSP_LCD_DrawLine+0x190>)
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4423      	add	r3, r4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f000 fa95 	bl	8003d14 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80037ea:	8b3a      	ldrh	r2, [r7, #24]
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80037f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80037f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	db0e      	blt.n	800381e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003800:	8b3a      	ldrh	r2, [r7, #24]
 8003802:	8b7b      	ldrh	r3, [r7, #26]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800380a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800380c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800380e:	4413      	add	r3, r2
 8003810:	b29b      	uxth	r3, r3
 8003812:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003814:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003816:	8bfb      	ldrh	r3, [r7, #30]
 8003818:	4413      	add	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800381e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003820:	8c3b      	ldrh	r3, [r7, #32]
 8003822:	4413      	add	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800382a:	8bbb      	ldrh	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003836:	b29b      	uxth	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	827b      	strh	r3, [r7, #18]
 800383e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003842:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003846:	429a      	cmp	r2, r3
 8003848:	ddc1      	ble.n	80037ce <BSP_LCD_DrawLine+0x106>
  }
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	372c      	adds	r7, #44	; 0x2c
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}
 8003854:	20000328 	.word	0x20000328
 8003858:	2000032c 	.word	0x2000032c

0800385c <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	80fb      	strh	r3, [r7, #6]
 800386e:	4603      	mov	r3, r0
 8003870:	80bb      	strh	r3, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	807b      	strh	r3, [r7, #2]
 8003876:	4613      	mov	r3, r2
 8003878:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	88b9      	ldrh	r1, [r7, #4]
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fea1 	bl	80035c8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003886:	88ba      	ldrh	r2, [r7, #4]
 8003888:	883b      	ldrh	r3, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	b299      	uxth	r1, r3
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fe98 	bl	80035c8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003898:	883a      	ldrh	r2, [r7, #0]
 800389a:	88b9      	ldrh	r1, [r7, #4]
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fed0 	bl	8003644 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	4413      	add	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	883a      	ldrh	r2, [r7, #0]
 80038ae:	88b9      	ldrh	r1, [r7, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fec7 	bl	8003644 <BSP_LCD_DrawVLine>
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
	...

080038c0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
 80038ca:	460b      	mov	r3, r1
 80038cc:	80bb      	strh	r3, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	f1c3 0303 	rsb	r3, r3, #3
 80038da:	617b      	str	r3, [r7, #20]
  curx = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80038e4:	e0c7      	b.n	8003a76 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	4413      	add	r3, r2
 80038ee:	b298      	uxth	r0, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	88ba      	ldrh	r2, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	b299      	uxth	r1, r3
 80038fa:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4c64      	ldr	r4, [pc, #400]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4423      	add	r3, r4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	f000 fa01 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	b29b      	uxth	r3, r3
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	b298      	uxth	r0, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	b29b      	uxth	r3, r3
 8003920:	88ba      	ldrh	r2, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	b299      	uxth	r1, r3
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4c59      	ldr	r4, [pc, #356]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4423      	add	r3, r4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	f000 f9eb 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	b29a      	uxth	r2, r3
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	4413      	add	r3, r2
 8003946:	b298      	uxth	r0, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b29b      	uxth	r3, r3
 800394c:	88ba      	ldrh	r2, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	b299      	uxth	r1, r3
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4c4e      	ldr	r4, [pc, #312]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4423      	add	r3, r4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	f000 f9d5 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	b29b      	uxth	r3, r3
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b298      	uxth	r0, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	b29b      	uxth	r3, r3
 8003978:	88ba      	ldrh	r2, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	b299      	uxth	r1, r3
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4c43      	ldr	r4, [pc, #268]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4423      	add	r3, r4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	f000 f9bf 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	b29a      	uxth	r2, r3
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	4413      	add	r3, r2
 800399e:	b298      	uxth	r0, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	88bb      	ldrh	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	b299      	uxth	r1, r3
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4c38      	ldr	r4, [pc, #224]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4423      	add	r3, r4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	f000 f9a9 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b298      	uxth	r0, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	88bb      	ldrh	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	b299      	uxth	r1, r3
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4c2d      	ldr	r4, [pc, #180]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4423      	add	r3, r4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f000 f993 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	4413      	add	r3, r2
 80039f6:	b298      	uxth	r0, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	b299      	uxth	r1, r3
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4c22      	ldr	r4, [pc, #136]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4423      	add	r3, r4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f000 f97d 	bl	8003d14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b298      	uxth	r0, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	88bb      	ldrh	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <BSP_LCD_DrawCircle+0x1cc>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4c17      	ldr	r4, [pc, #92]	; (8003a90 <BSP_LCD_DrawCircle+0x1d0>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4423      	add	r3, r4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f000 f967 	bl	8003d14 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da06      	bge.n	8003a5a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4413      	add	r3, r2
 8003a54:	3306      	adds	r3, #6
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e00a      	b.n	8003a70 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	009a      	lsls	r2, r3, #2
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	4413      	add	r3, r2
 8003a66:	330a      	adds	r3, #10
 8003a68:	617b      	str	r3, [r7, #20]
      cury--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3301      	adds	r3, #1
 8003a74:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f67f af33 	bls.w	80038e6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000328 	.word	0x20000328
 8003a90:	2000032c 	.word	0x2000032c

08003a94 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	80fb      	strh	r3, [r7, #6]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	80bb      	strh	r3, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <BSP_LCD_FillRect+0xa8>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4920      	ldr	r1, [pc, #128]	; (8003b40 <BSP_LCD_FillRect+0xac>)
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fbf0 	bl	80032b0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <BSP_LCD_FillRect+0xa8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <BSP_LCD_FillRect+0xb0>)
 8003ad6:	2134      	movs	r1, #52	; 0x34
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	335c      	adds	r3, #92	; 0x5c
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	f7ff fb1b 	bl	800311c <BSP_LCD_GetXSize>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	88bb      	ldrh	r3, [r7, #4]
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4423      	add	r3, r4
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <BSP_LCD_FillRect+0xa8>)
 8003afa:	681c      	ldr	r4, [r3, #0]
 8003afc:	68fd      	ldr	r5, [r7, #12]
 8003afe:	887e      	ldrh	r6, [r7, #2]
 8003b00:	f8b7 8000 	ldrh.w	r8, [r7]
 8003b04:	f7ff fb0a 	bl	800311c <BSP_LCD_GetXSize>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	1ad1      	subs	r1, r2, r3
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <BSP_LCD_FillRect+0xa8>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	480b      	ldr	r0, [pc, #44]	; (8003b40 <BSP_LCD_FillRect+0xac>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	9100      	str	r1, [sp, #0]
 8003b24:	4643      	mov	r3, r8
 8003b26:	4632      	mov	r2, r6
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f9d2 	bl	8003ed4 <FillBuffer>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000328 	.word	0x20000328
 8003b40:	2000032c 	.word	0x2000032c
 8003b44:	2001fd44 	.word	0x2001fd44

08003b48 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <BSP_LCD_DisplayOn+0x1c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003b56:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <BSP_LCD_DisplayOn+0x1c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4798      	blx	r3
  }
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	2001fdec 	.word	0x2001fdec

08003b68 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	4a60      	ldr	r2, [pc, #384]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7e:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a59      	ldr	r2, [pc, #356]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	4b4c      	ldr	r3, [pc, #304]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c04:	f043 0308 	orr.w	r3, r3, #8
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a36      	ldr	r2, [pc, #216]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <BSP_LCD_MspInit+0x190>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003c4e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003c60:	230e      	movs	r3, #14
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4824      	ldr	r0, [pc, #144]	; (8003cfc <BSP_LCD_MspInit+0x194>)
 8003c6c:	f001 f9f8 	bl	8005060 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003c70:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4820      	ldr	r0, [pc, #128]	; (8003d00 <BSP_LCD_MspInit+0x198>)
 8003c7e:	f001 f9ef 	bl	8005060 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003c82:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	481d      	ldr	r0, [pc, #116]	; (8003d04 <BSP_LCD_MspInit+0x19c>)
 8003c90:	f001 f9e6 	bl	8005060 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003c94:	2348      	movs	r3, #72	; 0x48
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	481a      	ldr	r0, [pc, #104]	; (8003d08 <BSP_LCD_MspInit+0x1a0>)
 8003ca0:	f001 f9de 	bl	8005060 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4816      	ldr	r0, [pc, #88]	; (8003d0c <BSP_LCD_MspInit+0x1a4>)
 8003cb2:	f001 f9d5 	bl	8005060 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003cb6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4813      	ldr	r0, [pc, #76]	; (8003d10 <BSP_LCD_MspInit+0x1a8>)
 8003cc4:	f001 f9cc 	bl	8005060 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003ccc:	2309      	movs	r3, #9
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	480a      	ldr	r0, [pc, #40]	; (8003d00 <BSP_LCD_MspInit+0x198>)
 8003cd8:	f001 f9c2 	bl	8005060 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003cdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4809      	ldr	r0, [pc, #36]	; (8003d10 <BSP_LCD_MspInit+0x1a8>)
 8003cea:	f001 f9b9 	bl	8005060 <HAL_GPIO_Init>
}
 8003cee:	bf00      	nop
 8003cf0:	3738      	adds	r7, #56	; 0x38
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021400 	.word	0x40021400
 8003d10:	40021800 	.word	0x40021800

08003d14 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	603a      	str	r2, [r7, #0]
 8003d1e:	80fb      	strh	r3, [r7, #6]
 8003d20:	460b      	mov	r3, r1
 8003d22:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <BSP_LCD_DrawPixel+0x44>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <BSP_LCD_DrawPixel+0x48>)
 8003d2a:	2134      	movs	r1, #52	; 0x34
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	335c      	adds	r3, #92	; 0x5c
 8003d34:	681c      	ldr	r4, [r3, #0]
 8003d36:	88bd      	ldrh	r5, [r7, #4]
 8003d38:	f7ff f9f0 	bl	800311c <BSP_LCD_GetXSize>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	fb03 f205 	mul.w	r2, r3, r5
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4423      	add	r3, r4
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdb0      	pop	{r4, r5, r7, pc}
 8003d58:	20000328 	.word	0x20000328
 8003d5c:	2001fd44 	.word	0x2001fd44

08003d60 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	603a      	str	r2, [r7, #0]
 8003d6a:	80fb      	strh	r3, [r7, #6]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <DrawChar+0x16c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4953      	ldr	r1, [pc, #332]	; (8003ed0 <DrawChar+0x170>)
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	88db      	ldrh	r3, [r3, #6]
 8003d92:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003d94:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <DrawChar+0x16c>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	494d      	ldr	r1, [pc, #308]	; (8003ed0 <DrawChar+0x170>)
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3308      	adds	r3, #8
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	889b      	ldrh	r3, [r3, #4]
 8003daa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003dac:	8a3b      	ldrh	r3, [r7, #16]
 8003dae:	3307      	adds	r3, #7
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da00      	bge.n	8003db6 <DrawChar+0x56>
 8003db4:	3307      	adds	r3, #7
 8003db6:	10db      	asrs	r3, r3, #3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	8a3b      	ldrh	r3, [r7, #16]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e076      	b.n	8003eba <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003dcc:	8a3b      	ldrh	r3, [r7, #16]
 8003dce:	3307      	adds	r3, #7
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da00      	bge.n	8003dd6 <DrawChar+0x76>
 8003dd4:	3307      	adds	r3, #7
 8003dd6:	10db      	asrs	r3, r3, #3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fb03 f302 	mul.w	r3, r3, r2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003de6:	8a3b      	ldrh	r3, [r7, #16]
 8003de8:	3307      	adds	r3, #7
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da00      	bge.n	8003df0 <DrawChar+0x90>
 8003dee:	3307      	adds	r3, #7
 8003df0:	10db      	asrs	r3, r3, #3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <DrawChar+0x9c>
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d004      	beq.n	8003e04 <DrawChar+0xa4>
 8003dfa:	e00c      	b.n	8003e16 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
      break;
 8003e02:	e016      	b.n	8003e32 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	3201      	adds	r2, #1
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
      break;
 8003e14:	e00d      	b.n	8003e32 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	041a      	lsls	r2, r3, #16
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	4313      	orrs	r3, r2
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	3202      	adds	r2, #2
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
      break;
 8003e30:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e036      	b.n	8003ea6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003e38:	8a3a      	ldrh	r2, [r7, #16]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	4413      	add	r3, r2
 8003e42:	3b01      	subs	r3, #1
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d012      	beq.n	8003e7a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	b298      	uxth	r0, r3
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <DrawChar+0x16c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <DrawChar+0x170>)
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	88bb      	ldrh	r3, [r7, #4]
 8003e72:	4619      	mov	r1, r3
 8003e74:	f7ff ff4e 	bl	8003d14 <BSP_LCD_DrawPixel>
 8003e78:	e012      	b.n	8003ea0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	4413      	add	r3, r2
 8003e82:	b298      	uxth	r0, r3
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <DrawChar+0x16c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <DrawChar+0x170>)
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	3304      	adds	r3, #4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	88bb      	ldrh	r3, [r7, #4]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7ff ff3a 	bl	8003d14 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	8a3b      	ldrh	r3, [r7, #16]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3c4      	bcc.n	8003e38 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003eae:	88bb      	ldrh	r3, [r7, #4]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	8a7b      	ldrh	r3, [r7, #18]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d384      	bcc.n	8003dcc <DrawChar+0x6c>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000328 	.word	0x20000328
 8003ed0:	2000032c 	.word	0x2000032c

08003ed4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <FillBuffer+0x68>)
 8003ee4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ee8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <FillBuffer+0x68>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ef0:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <FillBuffer+0x68>)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <FillBuffer+0x68>)
 8003ef8:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <FillBuffer+0x6c>)
 8003efa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003efc:	480f      	ldr	r0, [pc, #60]	; (8003f3c <FillBuffer+0x68>)
 8003efe:	f000 fd13 	bl	8004928 <HAL_DMA2D_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d115      	bne.n	8003f34 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	480c      	ldr	r0, [pc, #48]	; (8003f3c <FillBuffer+0x68>)
 8003f0c:	f000 ff7a 	bl	8004e04 <HAL_DMA2D_ConfigLayer>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10e      	bne.n	8003f34 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	4806      	ldr	r0, [pc, #24]	; (8003f3c <FillBuffer+0x68>)
 8003f22:	f000 fd4a 	bl	80049ba <HAL_DMA2D_Start>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003f2c:	210a      	movs	r1, #10
 8003f2e:	4803      	ldr	r0, [pc, #12]	; (8003f3c <FillBuffer+0x68>)
 8003f30:	f000 fd6e 	bl	8004a10 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200002b8 	.word	0x200002b8
 8003f40:	4002b000 	.word	0x4002b000

08003f44 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <BSP_SDRAM_Init+0xb0>)
 8003f4c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f50:	2202      	movs	r2, #2
 8003f52:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f56:	2207      	movs	r2, #7
 8003f58:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f62:	2207      	movs	r2, #7
 8003f64:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f68:	2202      	movs	r2, #2
 8003f6a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f6e:	2202      	movs	r2, #2
 8003f70:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003f74:	2202      	movs	r2, #2
 8003f76:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f86:	2204      	movs	r2, #4
 8003f88:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003f98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003f9c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003faa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fbe:	f000 f87f 	bl	80040c0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003fc2:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <BSP_SDRAM_Init+0xb4>)
 8003fc4:	480a      	ldr	r0, [pc, #40]	; (8003ff0 <BSP_SDRAM_Init+0xac>)
 8003fc6:	f003 fec3 	bl	8007d50 <HAL_SDRAM_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <BSP_SDRAM_Init+0xb8>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <BSP_SDRAM_Init+0xb8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003fde:	f240 506a 	movw	r0, #1386	; 0x56a
 8003fe2:	f000 f80d 	bl	8004000 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <BSP_SDRAM_Init+0xb8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000344 	.word	0x20000344
 8003ff4:	a0000140 	.word	0xa0000140
 8003ff8:	20000378 	.word	0x20000378
 8003ffc:	20000058 	.word	0x20000058

08004000 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004014:	2208      	movs	r2, #8
 8004016:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800401a:	2201      	movs	r2, #1
 800401c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004020:	2200      	movs	r2, #0
 8004022:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004028:	4923      	ldr	r1, [pc, #140]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800402a:	4824      	ldr	r0, [pc, #144]	; (80040bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800402c:	f003 fec4 	bl	8007db8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004030:	2001      	movs	r0, #1
 8004032:	f000 f993 	bl	800435c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004038:	2202      	movs	r2, #2
 800403a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800403e:	2208      	movs	r2, #8
 8004040:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004044:	2201      	movs	r2, #1
 8004046:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004052:	4919      	ldr	r1, [pc, #100]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004054:	4819      	ldr	r0, [pc, #100]	; (80040bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004056:	f003 feaf 	bl	8007db8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800405c:	2203      	movs	r2, #3
 800405e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004062:	2208      	movs	r2, #8
 8004064:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004068:	2204      	movs	r2, #4
 800406a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004076:	4910      	ldr	r1, [pc, #64]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004078:	4810      	ldr	r0, [pc, #64]	; (80040bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800407a:	f003 fe9d 	bl	8007db8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800407e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004082:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004086:	2204      	movs	r2, #4
 8004088:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800408c:	2208      	movs	r2, #8
 800408e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004092:	2201      	movs	r2, #1
 8004094:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800409a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800409c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a0:	4905      	ldr	r1, [pc, #20]	; (80040b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040a2:	4806      	ldr	r0, [pc, #24]	; (80040bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80040a4:	f003 fe88 	bl	8007db8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4804      	ldr	r0, [pc, #16]	; (80040bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80040ac:	f003 feaf 	bl	8007e0e <HAL_SDRAM_ProgramRefreshRate>
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000394 	.word	0x20000394
 80040bc:	20000344 	.word	0x20000344

080040c0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b090      	sub	sp, #64	; 0x40
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80ec 	beq.w	80042aa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d6:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	4a76      	ldr	r2, [pc, #472]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6393      	str	r3, [r2, #56]	; 0x38
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	4b70      	ldr	r3, [pc, #448]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a6f      	ldr	r2, [pc, #444]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80040f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a68      	ldr	r2, [pc, #416]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b5f      	ldr	r3, [pc, #380]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	6313      	str	r3, [r2, #48]	; 0x30
 8004152:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004168:	f043 0310 	orr.w	r3, r3, #16
 800416c:	6313      	str	r3, [r2, #48]	; 0x30
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	4a4c      	ldr	r2, [pc, #304]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6313      	str	r3, [r2, #48]	; 0x30
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	4a45      	ldr	r2, [pc, #276]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80041a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a4:	6313      	str	r3, [r2, #48]	; 0x30
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <BSP_SDRAM_MspInit+0x1f4>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80041b6:	2302      	movs	r3, #2
 80041b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80041be:	230c      	movs	r3, #12
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80041c2:	2360      	movs	r3, #96	; 0x60
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80041c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ca:	4619      	mov	r1, r3
 80041cc:	483a      	ldr	r0, [pc, #232]	; (80042b8 <BSP_SDRAM_MspInit+0x1f8>)
 80041ce:	f000 ff47 	bl	8005060 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80041d2:	2301      	movs	r3, #1
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80041d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041da:	4619      	mov	r1, r3
 80041dc:	4837      	ldr	r0, [pc, #220]	; (80042bc <BSP_SDRAM_MspInit+0x1fc>)
 80041de:	f000 ff3f 	bl	8005060 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80041e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80041e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ec:	4619      	mov	r1, r3
 80041ee:	4834      	ldr	r0, [pc, #208]	; (80042c0 <BSP_SDRAM_MspInit+0x200>)
 80041f0:	f000 ff36 	bl	8005060 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80041f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80041fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	4830      	ldr	r0, [pc, #192]	; (80042c4 <BSP_SDRAM_MspInit+0x204>)
 8004202:	f000 ff2d 	bl	8005060 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004206:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800420c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004210:	4619      	mov	r1, r3
 8004212:	482d      	ldr	r0, [pc, #180]	; (80042c8 <BSP_SDRAM_MspInit+0x208>)
 8004214:	f000 ff24 	bl	8005060 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004218:	f248 1333 	movw	r3, #33075	; 0x8133
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800421e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004222:	4619      	mov	r1, r3
 8004224:	4829      	ldr	r0, [pc, #164]	; (80042cc <BSP_SDRAM_MspInit+0x20c>)
 8004226:	f000 ff1b 	bl	8005060 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800422a:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004236:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004244:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800424c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004254:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004258:	2200      	movs	r2, #0
 800425a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 800425e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004262:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004266:	2200      	movs	r2, #0
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 800426c:	2203      	movs	r2, #3
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004272:	2200      	movs	r2, #0
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <BSP_SDRAM_MspInit+0x214>)
 8004280:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800428e:	4810      	ldr	r0, [pc, #64]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004290:	f000 fa18 	bl	80046c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004294:	480e      	ldr	r0, [pc, #56]	; (80042d0 <BSP_SDRAM_MspInit+0x210>)
 8004296:	f000 f967 	bl	8004568 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	210f      	movs	r1, #15
 800429e:	2038      	movs	r0, #56	; 0x38
 80042a0:	f000 f938 	bl	8004514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80042a4:	2038      	movs	r0, #56	; 0x38
 80042a6:	f000 f951 	bl	800454c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80042aa:	bf00      	nop
 80042ac:	3740      	adds	r7, #64	; 0x40
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40021400 	.word	0x40021400
 80042cc:	40021800 	.word	0x40021800
 80042d0:	200003a4 	.word	0x200003a4
 80042d4:	40026410 	.word	0x40026410

080042d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_Init+0x40>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <HAL_Init+0x40>)
 80042e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_Init+0x40>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_Init+0x40>)
 80042ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_Init+0x40>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a07      	ldr	r2, [pc, #28]	; (8004318 <HAL_Init+0x40>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004300:	2003      	movs	r0, #3
 8004302:	f000 f8fc 	bl	80044fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fd fd50 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800430c:	f7fd fd22 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023c00 	.word	0x40023c00

0800431c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_IncTick+0x20>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_IncTick+0x24>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4413      	add	r3, r2
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <HAL_IncTick+0x24>)
 800432e:	6013      	str	r3, [r2, #0]
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000060 	.word	0x20000060
 8004340:	2001fdf0 	.word	0x2001fdf0

08004344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return uwTick;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_GetTick+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2001fdf0 	.word	0x2001fdf0

0800435c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff ffee 	bl	8004344 <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d005      	beq.n	8004382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_Delay+0x44>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004382:	bf00      	nop
 8004384:	f7ff ffde 	bl	8004344 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f7      	bhi.n	8004384 <HAL_Delay+0x28>
  {
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000060 	.word	0x20000060

080043a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c0:	4013      	ands	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <__NVIC_GetPriorityGrouping+0x18>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 0307 	and.w	r3, r3, #7
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	db0b      	blt.n	8004432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	4907      	ldr	r1, [pc, #28]	; (8004440 <__NVIC_EnableIRQ+0x38>)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2001      	movs	r0, #1
 800442a:	fa00 f202 	lsl.w	r2, r0, r2
 800442e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e100 	.word	0xe000e100

08004444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db0a      	blt.n	800446e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	490c      	ldr	r1, [pc, #48]	; (8004490 <__NVIC_SetPriority+0x4c>)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	0112      	lsls	r2, r2, #4
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	440b      	add	r3, r1
 8004468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800446c:	e00a      	b.n	8004484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4908      	ldr	r1, [pc, #32]	; (8004494 <__NVIC_SetPriority+0x50>)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3b04      	subs	r3, #4
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	440b      	add	r3, r1
 8004482:	761a      	strb	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000e100 	.word	0xe000e100
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f1c3 0307 	rsb	r3, r3, #7
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	bf28      	it	cs
 80044b6:	2304      	movcs	r3, #4
 80044b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3304      	adds	r3, #4
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d902      	bls.n	80044c8 <NVIC_EncodePriority+0x30>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3b03      	subs	r3, #3
 80044c6:	e000      	b.n	80044ca <NVIC_EncodePriority+0x32>
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	401a      	ands	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e0:	f04f 31ff 	mov.w	r1, #4294967295
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	43d9      	mvns	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	4313      	orrs	r3, r2
         );
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ff4c 	bl	80043a4 <__NVIC_SetPriorityGrouping>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004526:	f7ff ff61 	bl	80043ec <__NVIC_GetPriorityGrouping>
 800452a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f7ff ffb1 	bl	8004498 <NVIC_EncodePriority>
 8004536:	4602      	mov	r2, r0
 8004538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff80 	bl	8004444 <__NVIC_SetPriority>
}
 8004544:	bf00      	nop
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff54 	bl	8004408 <__NVIC_EnableIRQ>
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004574:	f7ff fee6 	bl	8004344 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e099      	b.n	80046b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a4:	e00f      	b.n	80045c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a6:	f7ff fecd 	bl	8004344 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d908      	bls.n	80045c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2203      	movs	r2, #3
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e078      	b.n	80046b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e8      	bne.n	80045a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <HAL_DMA_Init+0x158>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b04      	cmp	r3, #4
 800461e:	d107      	bne.n	8004630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4313      	orrs	r3, r2
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b04      	cmp	r3, #4
 8004658:	d117      	bne.n	800468a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8df 	bl	8004830 <DMA_CheckFifoParam>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2240      	movs	r2, #64	; 0x40
 800467c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004686:	2301      	movs	r3, #1
 8004688:	e016      	b.n	80046b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f896 	bl	80047c4 <DMA_CalcBaseAndBitshift>
 8004698:	4603      	mov	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	223f      	movs	r2, #63	; 0x3f
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	f010803f 	.word	0xf010803f

080046c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e050      	b.n	8004778 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
 80046e4:	e048      	b.n	8004778 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2221      	movs	r2, #33	; 0x21
 8004724:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f84c 	bl	80047c4 <DMA_CalcBaseAndBitshift>
 800472c:	4603      	mov	r3, r0
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	223f      	movs	r2, #63	; 0x3f
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d004      	beq.n	800479e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00c      	b.n	80047b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2205      	movs	r2, #5
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	3b10      	subs	r3, #16
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <DMA_CalcBaseAndBitshift+0x64>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <DMA_CalcBaseAndBitshift+0x68>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d909      	bls.n	8004806 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	659a      	str	r2, [r3, #88]	; 0x58
 8004804:	e007      	b.n	8004816 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	aaaaaaab 	.word	0xaaaaaaab
 800482c:	08014f8c 	.word	0x08014f8c

08004830 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11f      	bne.n	800488a <DMA_CheckFifoParam+0x5a>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d856      	bhi.n	80048fe <DMA_CheckFifoParam+0xce>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <DMA_CheckFifoParam+0x28>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	08004869 	.word	0x08004869
 800485c:	0800487b 	.word	0x0800487b
 8004860:	08004869 	.word	0x08004869
 8004864:	080048ff 	.word	0x080048ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d046      	beq.n	8004902 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004878:	e043      	b.n	8004902 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004882:	d140      	bne.n	8004906 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004888:	e03d      	b.n	8004906 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004892:	d121      	bne.n	80048d8 <DMA_CheckFifoParam+0xa8>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d837      	bhi.n	800490a <DMA_CheckFifoParam+0xda>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <DMA_CheckFifoParam+0x70>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048b7 	.word	0x080048b7
 80048a8:	080048b1 	.word	0x080048b1
 80048ac:	080048c9 	.word	0x080048c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e030      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d025      	beq.n	800490e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c6:	e022      	b.n	800490e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d0:	d11f      	bne.n	8004912 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048d6:	e01c      	b.n	8004912 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d903      	bls.n	80048e6 <DMA_CheckFifoParam+0xb6>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d003      	beq.n	80048ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048e4:	e018      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ea:	e015      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e00b      	b.n	8004916 <DMA_CheckFifoParam+0xe6>
      break;
 80048fe:	bf00      	nop
 8004900:	e00a      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;
 8004902:	bf00      	nop
 8004904:	e008      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;
 8004906:	bf00      	nop
 8004908:	e006      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;
 800490a:	bf00      	nop
 800490c:	e004      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;   
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
      break;
 8004916:	bf00      	nop
    }
  } 
  
  return status; 
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e03b      	b.n	80049b2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fb08 	bl	8000f64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	f023 0107 	bic.w	r1, r3, #7
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004992:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68d1      	ldr	r1, [r2, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	430b      	orrs	r3, r1
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af02      	add	r7, sp, #8
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA2D_Start+0x1c>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e018      	b.n	8004a08 <HAL_DMA2D_Start+0x4e>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fa99 	bl	8004f28 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d056      	beq.n	8004ada <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004a2c:	f7ff fc8a 	bl	8004344 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a32:	e04b      	b.n	8004acc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d023      	beq.n	8004a8e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	f043 0202 	orr.w	r2, r3, #2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2221      	movs	r2, #33	; 0x21
 8004a78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0a5      	b.n	8004bda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d01a      	beq.n	8004acc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004a96:	f7ff fc55 	bl	8004344 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <HAL_DMA2D_PollForTransfer+0x9c>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10f      	bne.n	8004acc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e086      	b.n	8004bda <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ac      	beq.n	8004a34 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d061      	beq.n	8004bc0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afc:	f7ff fc22 	bl	8004344 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b02:	e056      	b.n	8004bb2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d02e      	beq.n	8004b74 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	f043 0202 	orr.w	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	f043 0201 	orr.w	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2229      	movs	r2, #41	; 0x29
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2204      	movs	r2, #4
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e032      	b.n	8004bda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d01a      	beq.n	8004bb2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b7c:	f7ff fbe2 	bl	8004344 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <HAL_DMA2D_PollForTransfer+0x182>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e013      	b.n	8004bda <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0a1      	beq.n	8004b04 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2212      	movs	r2, #18
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d026      	beq.n	8004c52 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d021      	beq.n	8004c52 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d026      	beq.n	8004caa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d021      	beq.n	8004caa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d026      	beq.n	8004d02 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	f043 0204 	orr.w	r2, r3, #4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f853 	bl	8004dda <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d024      	beq.n	8004d88 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01f      	beq.n	8004d88 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01f      	beq.n	8004dd2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01a      	beq.n	8004dd2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004daa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2210      	movs	r2, #16
 8004db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f80e 	bl	8004dee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_DMA2D_ConfigLayer+0x20>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e079      	b.n	8004f18 <HAL_DMA2D_ConfigLayer+0x114>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	3318      	adds	r3, #24
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004e4e:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <HAL_DMA2D_ConfigLayer+0x120>)
 8004e50:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b0a      	cmp	r3, #10
 8004e58:	d003      	beq.n	8004e62 <HAL_DMA2D_ConfigLayer+0x5e>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d107      	bne.n	8004e72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e005      	b.n	8004e7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d120      	bne.n	8004ec6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	ea02 0103 	and.w	r1, r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b0a      	cmp	r3, #10
 8004eac:	d003      	beq.n	8004eb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b09      	cmp	r3, #9
 8004eb4:	d127      	bne.n	8004f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec4:	e01f      	b.n	8004f06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	ea02 0103 	and.w	r1, r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b0a      	cmp	r3, #10
 8004eee:	d003      	beq.n	8004ef8 <HAL_DMA2D_ConfigLayer+0xf4>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	d106      	bne.n	8004f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f04:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	ff03000f 	.word	0xff03000f

08004f28 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b08b      	sub	sp, #44	; 0x2c
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	041a      	lsls	r2, r3, #16
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f60:	d174      	bne.n	800504c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f70:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f78:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	e053      	b.n	8005042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d106      	bne.n	8004fb0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e048      	b.n	8005042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d111      	bne.n	8004fdc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	0cdb      	lsrs	r3, r3, #19
 8004fbc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	0a9b      	lsrs	r3, r3, #10
 8004fc2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	08db      	lsrs	r3, r3, #3
 8004fc8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	02db      	lsls	r3, r3, #11
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	e032      	b.n	8005042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d117      	bne.n	8005014 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	0fdb      	lsrs	r3, r3, #31
 8004fe8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	0cdb      	lsrs	r3, r3, #19
 8004fee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	0adb      	lsrs	r3, r3, #11
 8004ff4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	029b      	lsls	r3, r3, #10
 8005004:	431a      	orrs	r2, r3
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	03db      	lsls	r3, r3, #15
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	e016      	b.n	8005042 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	0d1b      	lsrs	r3, r3, #20
 800501e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	0b1b      	lsrs	r3, r3, #12
 8005024:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	011a      	lsls	r2, r3, #4
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	431a      	orrs	r2, r3
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	031b      	lsls	r3, r3, #12
 800503a:	4313      	orrs	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800504a:	e003      	b.n	8005054 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	60da      	str	r2, [r3, #12]
}
 8005054:	bf00      	nop
 8005056:	372c      	adds	r7, #44	; 0x2c
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e177      	b.n	800536c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800507c:	2201      	movs	r2, #1
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4013      	ands	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	429a      	cmp	r2, r3
 8005096:	f040 8166 	bne.w	8005366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d00b      	beq.n	80050ba <HAL_GPIO_Init+0x5a>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d007      	beq.n	80050ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ae:	2b11      	cmp	r3, #17
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b12      	cmp	r3, #18
 80050b8:	d130      	bne.n	800511c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	2203      	movs	r2, #3
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0201 	and.w	r2, r3, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0xfc>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b12      	cmp	r3, #18
 800515a:	d123      	bne.n	80051a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	08da      	lsrs	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3208      	adds	r2, #8
 8005164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	220f      	movs	r2, #15
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	08da      	lsrs	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3208      	adds	r2, #8
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 0203 	and.w	r2, r3, #3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80c0 	beq.w	8005366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	4b66      	ldr	r3, [pc, #408]	; (8005384 <HAL_GPIO_Init+0x324>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	4a65      	ldr	r2, [pc, #404]	; (8005384 <HAL_GPIO_Init+0x324>)
 80051f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f4:	6453      	str	r3, [r2, #68]	; 0x44
 80051f6:	4b63      	ldr	r3, [pc, #396]	; (8005384 <HAL_GPIO_Init+0x324>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005202:	4a61      	ldr	r2, [pc, #388]	; (8005388 <HAL_GPIO_Init+0x328>)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	3302      	adds	r3, #2
 800520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	220f      	movs	r2, #15
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a58      	ldr	r2, [pc, #352]	; (800538c <HAL_GPIO_Init+0x32c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d037      	beq.n	800529e <HAL_GPIO_Init+0x23e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a57      	ldr	r2, [pc, #348]	; (8005390 <HAL_GPIO_Init+0x330>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d031      	beq.n	800529a <HAL_GPIO_Init+0x23a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a56      	ldr	r2, [pc, #344]	; (8005394 <HAL_GPIO_Init+0x334>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02b      	beq.n	8005296 <HAL_GPIO_Init+0x236>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a55      	ldr	r2, [pc, #340]	; (8005398 <HAL_GPIO_Init+0x338>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d025      	beq.n	8005292 <HAL_GPIO_Init+0x232>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a54      	ldr	r2, [pc, #336]	; (800539c <HAL_GPIO_Init+0x33c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01f      	beq.n	800528e <HAL_GPIO_Init+0x22e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a53      	ldr	r2, [pc, #332]	; (80053a0 <HAL_GPIO_Init+0x340>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d019      	beq.n	800528a <HAL_GPIO_Init+0x22a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a52      	ldr	r2, [pc, #328]	; (80053a4 <HAL_GPIO_Init+0x344>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_GPIO_Init+0x226>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a51      	ldr	r2, [pc, #324]	; (80053a8 <HAL_GPIO_Init+0x348>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00d      	beq.n	8005282 <HAL_GPIO_Init+0x222>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a50      	ldr	r2, [pc, #320]	; (80053ac <HAL_GPIO_Init+0x34c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <HAL_GPIO_Init+0x21e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4f      	ldr	r2, [pc, #316]	; (80053b0 <HAL_GPIO_Init+0x350>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_GPIO_Init+0x21a>
 8005276:	2309      	movs	r3, #9
 8005278:	e012      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800527a:	230a      	movs	r3, #10
 800527c:	e010      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800527e:	2308      	movs	r3, #8
 8005280:	e00e      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 8005282:	2307      	movs	r3, #7
 8005284:	e00c      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 8005286:	2306      	movs	r3, #6
 8005288:	e00a      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800528a:	2305      	movs	r3, #5
 800528c:	e008      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800528e:	2304      	movs	r3, #4
 8005290:	e006      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 8005292:	2303      	movs	r3, #3
 8005294:	e004      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 8005296:	2302      	movs	r3, #2
 8005298:	e002      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_GPIO_Init+0x240>
 800529e:	2300      	movs	r3, #0
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	f002 0203 	and.w	r2, r2, #3
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	4093      	lsls	r3, r2
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b0:	4935      	ldr	r1, [pc, #212]	; (8005388 <HAL_GPIO_Init+0x328>)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	3302      	adds	r3, #2
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052be:	4b3d      	ldr	r3, [pc, #244]	; (80053b4 <HAL_GPIO_Init+0x354>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4013      	ands	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052e2:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <HAL_GPIO_Init+0x354>)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052e8:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <HAL_GPIO_Init+0x354>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4013      	ands	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800530c:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <HAL_GPIO_Init+0x354>)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_GPIO_Init+0x354>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005336:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <HAL_GPIO_Init+0x354>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <HAL_GPIO_Init+0x354>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005360:	4a14      	ldr	r2, [pc, #80]	; (80053b4 <HAL_GPIO_Init+0x354>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	f67f ae84 	bls.w	800507c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	3724      	adds	r7, #36	; 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	40013800 	.word	0x40013800
 800538c:	40020000 	.word	0x40020000
 8005390:	40020400 	.word	0x40020400
 8005394:	40020800 	.word	0x40020800
 8005398:	40020c00 	.word	0x40020c00
 800539c:	40021000 	.word	0x40021000
 80053a0:	40021400 	.word	0x40021400
 80053a4:	40021800 	.word	0x40021800
 80053a8:	40021c00 	.word	0x40021c00
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40022400 	.word	0x40022400
 80053b4:	40013c00 	.word	0x40013c00

080053b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e0d9      	b.n	8005588 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d4:	2201      	movs	r2, #1
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	f040 80c9 	bne.w	8005582 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80053f0:	4a6b      	ldr	r2, [pc, #428]	; (80055a0 <HAL_GPIO_DeInit+0x1e8>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	3302      	adds	r3, #2
 80053f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	220f      	movs	r2, #15
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a63      	ldr	r2, [pc, #396]	; (80055a4 <HAL_GPIO_DeInit+0x1ec>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d037      	beq.n	800548a <HAL_GPIO_DeInit+0xd2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a62      	ldr	r2, [pc, #392]	; (80055a8 <HAL_GPIO_DeInit+0x1f0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d031      	beq.n	8005486 <HAL_GPIO_DeInit+0xce>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a61      	ldr	r2, [pc, #388]	; (80055ac <HAL_GPIO_DeInit+0x1f4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02b      	beq.n	8005482 <HAL_GPIO_DeInit+0xca>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a60      	ldr	r2, [pc, #384]	; (80055b0 <HAL_GPIO_DeInit+0x1f8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d025      	beq.n	800547e <HAL_GPIO_DeInit+0xc6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a5f      	ldr	r2, [pc, #380]	; (80055b4 <HAL_GPIO_DeInit+0x1fc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <HAL_GPIO_DeInit+0xc2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <HAL_GPIO_DeInit+0x200>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d019      	beq.n	8005476 <HAL_GPIO_DeInit+0xbe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_GPIO_DeInit+0x204>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_GPIO_DeInit+0xba>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_GPIO_DeInit+0x208>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00d      	beq.n	800546e <HAL_GPIO_DeInit+0xb6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a5b      	ldr	r2, [pc, #364]	; (80055c4 <HAL_GPIO_DeInit+0x20c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <HAL_GPIO_DeInit+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a5a      	ldr	r2, [pc, #360]	; (80055c8 <HAL_GPIO_DeInit+0x210>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d101      	bne.n	8005466 <HAL_GPIO_DeInit+0xae>
 8005462:	2309      	movs	r3, #9
 8005464:	e012      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 8005466:	230a      	movs	r3, #10
 8005468:	e010      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 800546a:	2308      	movs	r3, #8
 800546c:	e00e      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 800546e:	2307      	movs	r3, #7
 8005470:	e00c      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 8005472:	2306      	movs	r3, #6
 8005474:	e00a      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 8005476:	2305      	movs	r3, #5
 8005478:	e008      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 800547a:	2304      	movs	r3, #4
 800547c:	e006      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 800547e:	2303      	movs	r3, #3
 8005480:	e004      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 8005482:	2302      	movs	r3, #2
 8005484:	e002      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_GPIO_DeInit+0xd4>
 800548a:	2300      	movs	r3, #0
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	f002 0203 	and.w	r2, r2, #3
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	4093      	lsls	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d132      	bne.n	8005502 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	4949      	ldr	r1, [pc, #292]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80054aa:	4b48      	ldr	r3, [pc, #288]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	4946      	ldr	r1, [pc, #280]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054b8:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	43db      	mvns	r3, r3
 80054c0:	4942      	ldr	r1, [pc, #264]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	43db      	mvns	r3, r3
 80054ce:	493f      	ldr	r1, [pc, #252]	; (80055cc <HAL_GPIO_DeInit+0x214>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	220f      	movs	r2, #15
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80054e4:	4a2e      	ldr	r2, [pc, #184]	; (80055a0 <HAL_GPIO_DeInit+0x1e8>)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	3302      	adds	r3, #2
 80054ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	43da      	mvns	r2, r3
 80054f4:	482a      	ldr	r0, [pc, #168]	; (80055a0 <HAL_GPIO_DeInit+0x1e8>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	400a      	ands	r2, r1
 80054fc:	3302      	adds	r3, #2
 80054fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	2103      	movs	r1, #3
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	401a      	ands	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	08da      	lsrs	r2, r3, #3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3208      	adds	r2, #8
 8005520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	220f      	movs	r2, #15
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	08d2      	lsrs	r2, r2, #3
 8005538:	4019      	ands	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3208      	adds	r2, #8
 800553e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	2103      	movs	r1, #3
 800554c:	fa01 f303 	lsl.w	r3, r1, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	2101      	movs	r1, #1
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	2103      	movs	r1, #3
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	401a      	ands	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3301      	adds	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	f67f af22 	bls.w	80053d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40020000 	.word	0x40020000
 80055a8:	40020400 	.word	0x40020400
 80055ac:	40020800 	.word	0x40020800
 80055b0:	40020c00 	.word	0x40020c00
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40021400 	.word	0x40021400
 80055bc:	40021800 	.word	0x40021800
 80055c0:	40021c00 	.word	0x40021c00
 80055c4:	40022000 	.word	0x40022000
 80055c8:	40022400 	.word	0x40022400
 80055cc:	40013c00 	.word	0x40013c00

080055d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
 80055dc:	4613      	mov	r3, r2
 80055de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055e0:	787b      	ldrb	r3, [r7, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055ec:	e003      	b.n	80055f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055ee:	887b      	ldrh	r3, [r7, #2]
 80055f0:	041a      	lsls	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	619a      	str	r2, [r3, #24]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e12b      	b.n	800586e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb ff1c 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005668:	f002 f95a 	bl	8007920 <HAL_RCC_GetPCLK1Freq>
 800566c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4a81      	ldr	r2, [pc, #516]	; (8005878 <HAL_I2C_Init+0x274>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d807      	bhi.n	8005688 <HAL_I2C_Init+0x84>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a80      	ldr	r2, [pc, #512]	; (800587c <HAL_I2C_Init+0x278>)
 800567c:	4293      	cmp	r3, r2
 800567e:	bf94      	ite	ls
 8005680:	2301      	movls	r3, #1
 8005682:	2300      	movhi	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e006      	b.n	8005696 <HAL_I2C_Init+0x92>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a7d      	ldr	r2, [pc, #500]	; (8005880 <HAL_I2C_Init+0x27c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	bf94      	ite	ls
 8005690:	2301      	movls	r3, #1
 8005692:	2300      	movhi	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0e7      	b.n	800586e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a78      	ldr	r2, [pc, #480]	; (8005884 <HAL_I2C_Init+0x280>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	0c9b      	lsrs	r3, r3, #18
 80056a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a6a      	ldr	r2, [pc, #424]	; (8005878 <HAL_I2C_Init+0x274>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d802      	bhi.n	80056d8 <HAL_I2C_Init+0xd4>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3301      	adds	r3, #1
 80056d6:	e009      	b.n	80056ec <HAL_I2C_Init+0xe8>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	4a69      	ldr	r2, [pc, #420]	; (8005888 <HAL_I2C_Init+0x284>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	099b      	lsrs	r3, r3, #6
 80056ea:	3301      	adds	r3, #1
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	495c      	ldr	r1, [pc, #368]	; (8005878 <HAL_I2C_Init+0x274>)
 8005708:	428b      	cmp	r3, r1
 800570a:	d819      	bhi.n	8005740 <HAL_I2C_Init+0x13c>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1e59      	subs	r1, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fbb1 f3f3 	udiv	r3, r1, r3
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005720:	400b      	ands	r3, r1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_I2C_Init+0x138>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1e59      	subs	r1, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fbb1 f3f3 	udiv	r3, r1, r3
 8005734:	3301      	adds	r3, #1
 8005736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573a:	e051      	b.n	80057e0 <HAL_I2C_Init+0x1dc>
 800573c:	2304      	movs	r3, #4
 800573e:	e04f      	b.n	80057e0 <HAL_I2C_Init+0x1dc>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <HAL_I2C_Init+0x168>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1e58      	subs	r0, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	440b      	add	r3, r1
 8005756:	fbb0 f3f3 	udiv	r3, r0, r3
 800575a:	3301      	adds	r3, #1
 800575c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e012      	b.n	8005792 <HAL_I2C_Init+0x18e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1e58      	subs	r0, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	0099      	lsls	r1, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005782:	3301      	adds	r3, #1
 8005784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_Init+0x196>
 8005796:	2301      	movs	r3, #1
 8005798:	e022      	b.n	80057e0 <HAL_I2C_Init+0x1dc>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10e      	bne.n	80057c0 <HAL_I2C_Init+0x1bc>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1e58      	subs	r0, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	440b      	add	r3, r1
 80057b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057be:	e00f      	b.n	80057e0 <HAL_I2C_Init+0x1dc>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1e58      	subs	r0, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6859      	ldr	r1, [r3, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	0099      	lsls	r1, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	6809      	ldr	r1, [r1, #0]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800580e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6911      	ldr	r1, [r2, #16]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68d2      	ldr	r2, [r2, #12]
 800581a:	4311      	orrs	r1, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	430b      	orrs	r3, r1
 8005822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	000186a0 	.word	0x000186a0
 800587c:	001e847f 	.word	0x001e847f
 8005880:	003d08ff 	.word	0x003d08ff
 8005884:	431bde83 	.word	0x431bde83
 8005888:	10624dd3 	.word	0x10624dd3

0800588c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4603      	mov	r3, r0
 800589c:	817b      	strh	r3, [r7, #10]
 800589e:	460b      	mov	r3, r1
 80058a0:	813b      	strh	r3, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058a6:	f7fe fd4d 	bl	8004344 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	f040 80d9 	bne.w	8005a6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2319      	movs	r3, #25
 80058c0:	2201      	movs	r2, #1
 80058c2:	496d      	ldr	r1, [pc, #436]	; (8005a78 <HAL_I2C_Mem_Write+0x1ec>)
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fdad 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0cc      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_I2C_Mem_Write+0x56>
 80058de:	2302      	movs	r3, #2
 80058e0:	e0c5      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d007      	beq.n	8005908 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	; 0x21
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a4d      	ldr	r2, [pc, #308]	; (8005a7c <HAL_I2C_Mem_Write+0x1f0>)
 8005948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800594a:	88f8      	ldrh	r0, [r7, #6]
 800594c:	893a      	ldrh	r2, [r7, #8]
 800594e:	8979      	ldrh	r1, [r7, #10]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4603      	mov	r3, r0
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fbe4 	bl	8006128 <I2C_RequestMemoryWrite>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d052      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e081      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fe2e 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b04      	cmp	r3, #4
 8005980:	d107      	bne.n	8005992 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e06b      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d11b      	bne.n	8005a0c <HAL_I2C_Mem_Write+0x180>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d017      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1aa      	bne.n	800596a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fe1a 	bl	8006652 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00d      	beq.n	8005a40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d107      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e016      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	00100002 	.word	0x00100002
 8005a7c:	ffff0000 	.word	0xffff0000

08005a80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08c      	sub	sp, #48	; 0x30
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	460b      	mov	r3, r1
 8005a94:	813b      	strh	r3, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a9a:	f7fe fc53 	bl	8004344 <HAL_GetTick>
 8005a9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	f040 8208 	bne.w	8005ebe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	2319      	movs	r3, #25
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	497b      	ldr	r1, [pc, #492]	; (8005ca4 <HAL_I2C_Mem_Read+0x224>)
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fcb3 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e1fb      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_Mem_Read+0x56>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e1f4      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d007      	beq.n	8005afc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2222      	movs	r2, #34	; 0x22
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ca8 <HAL_I2C_Mem_Read+0x228>)
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3e:	88f8      	ldrh	r0, [r7, #6]
 8005b40:	893a      	ldrh	r2, [r7, #8]
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fb80 	bl	8006254 <I2C_RequestMemoryRead>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e1b0      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d113      	bne.n	8005b8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e184      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d11b      	bne.n	8005bce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e164      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d11b      	bne.n	8005c0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	e144      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c24:	e138      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	f200 80f1 	bhi.w	8005e12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d123      	bne.n	8005c80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fd49 	bl	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e139      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7e:	e10b      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d14e      	bne.n	8005d26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4906      	ldr	r1, [pc, #24]	; (8005cac <HAL_I2C_Mem_Read+0x22c>)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fbc6 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e10e      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
 8005ca2:	bf00      	nop
 8005ca4:	00100002 	.word	0x00100002
 8005ca8:	ffff0000 	.word	0xffff0000
 8005cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d24:	e0b8      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4966      	ldr	r1, [pc, #408]	; (8005ec8 <HAL_I2C_Mem_Read+0x448>)
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fb77 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0bf      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	2200      	movs	r2, #0
 8005d8a:	494f      	ldr	r1, [pc, #316]	; (8005ec8 <HAL_I2C_Mem_Read+0x448>)
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fb49 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e091      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e10:	e042      	b.n	8005e98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fc5c 	bl	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e04c      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d118      	bne.n	8005e98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f47f aec2 	bne.w	8005c26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
  }
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	00010004 	.word	0x00010004

08005ecc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005edc:	f7fe fa32 	bl	8004344 <HAL_GetTick>
 8005ee0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	f040 8111 	bne.w	8006116 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2319      	movs	r3, #25
 8005efa:	2201      	movs	r2, #1
 8005efc:	4988      	ldr	r1, [pc, #544]	; (8006120 <HAL_I2C_IsDeviceReady+0x254>)
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa90 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e104      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_I2C_IsDeviceReady+0x50>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0fd      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d007      	beq.n	8005f42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2224      	movs	r2, #36	; 0x24
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a70      	ldr	r2, [pc, #448]	; (8006124 <HAL_I2C_IsDeviceReady+0x258>)
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fa4e 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9c:	d103      	bne.n	8005fa6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e0b6      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005faa:	897b      	ldrh	r3, [r7, #10]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005fba:	f7fe f9c3 	bl	8004344 <HAL_GetTick>
 8005fbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fee:	e025      	b.n	800603c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ff0:	f7fe f9a8 	bl	8004344 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <HAL_I2C_IsDeviceReady+0x13a>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	22a0      	movs	r2, #160	; 0xa0
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b02      	cmp	r3, #2
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2ba0      	cmp	r3, #160	; 0xa0
 8006046:	d005      	beq.n	8006054 <HAL_I2C_IsDeviceReady+0x188>
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <HAL_I2C_IsDeviceReady+0x188>
 800604e:	7dbb      	ldrb	r3, [r7, #22]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0cd      	beq.n	8005ff0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b02      	cmp	r3, #2
 8006068:	d129      	bne.n	80060be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006078:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	2319      	movs	r3, #25
 8006096:	2201      	movs	r2, #1
 8006098:	4921      	ldr	r1, [pc, #132]	; (8006120 <HAL_I2C_IsDeviceReady+0x254>)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f9c2 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e036      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e02c      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2319      	movs	r3, #25
 80060de:	2201      	movs	r2, #1
 80060e0:	490f      	ldr	r1, [pc, #60]	; (8006120 <HAL_I2C_IsDeviceReady+0x254>)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f99e 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e012      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	3301      	adds	r3, #1
 80060f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	f4ff af32 	bcc.w	8005f66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	00100002 	.word	0x00100002
 8006124:	ffff0000 	.word	0xffff0000

08006128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	4608      	mov	r0, r1
 8006132:	4611      	mov	r1, r2
 8006134:	461a      	mov	r2, r3
 8006136:	4603      	mov	r3, r0
 8006138:	817b      	strh	r3, [r7, #10]
 800613a:	460b      	mov	r3, r1
 800613c:	813b      	strh	r3, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	2200      	movs	r2, #0
 800615a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f960 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	d103      	bne.n	8006182 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e05f      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006186:	897b      	ldrh	r3, [r7, #10]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	492d      	ldr	r1, [pc, #180]	; (8006250 <I2C_RequestMemoryWrite+0x128>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f998 	bl	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e04c      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	6a39      	ldr	r1, [r7, #32]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fa02 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d107      	bne.n	80061ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e02b      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d105      	bne.n	8006200 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061f4:	893b      	ldrh	r3, [r7, #8]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	611a      	str	r2, [r3, #16]
 80061fe:	e021      	b.n	8006244 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006200:	893b      	ldrh	r3, [r7, #8]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b29b      	uxth	r3, r3
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006210:	6a39      	ldr	r1, [r7, #32]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f9dc 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00d      	beq.n	800623a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	2b04      	cmp	r3, #4
 8006224:	d107      	bne.n	8006236 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e005      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800623a:	893b      	ldrh	r3, [r7, #8]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	00010002 	.word	0x00010002

08006254 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	817b      	strh	r3, [r7, #10]
 8006266:	460b      	mov	r3, r1
 8006268:	813b      	strh	r3, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800627c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800628c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	2200      	movs	r2, #0
 8006296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8c2 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b4:	d103      	bne.n	80062be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0aa      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c2:	897b      	ldrh	r3, [r7, #10]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	4952      	ldr	r1, [pc, #328]	; (8006420 <I2C_RequestMemoryRead+0x1cc>)
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f8fa 	bl	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e097      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	6a39      	ldr	r1, [r7, #32]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f964 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b04      	cmp	r3, #4
 8006314:	d107      	bne.n	8006326 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e076      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d105      	bne.n	800633c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	611a      	str	r2, [r3, #16]
 800633a:	e021      	b.n	8006380 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	b29b      	uxth	r3, r3
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f93e 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00d      	beq.n	8006376 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b04      	cmp	r3, #4
 8006360:	d107      	bne.n	8006372 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e050      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6a39      	ldr	r1, [r7, #32]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f923 	bl	80065d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00d      	beq.n	80063ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b04      	cmp	r3, #4
 8006396:	d107      	bne.n	80063a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e035      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f82b 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e2:	d103      	bne.n	80063ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e013      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063f0:	897b      	ldrh	r3, [r7, #10]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	4906      	ldr	r1, [pc, #24]	; (8006420 <I2C_RequestMemoryRead+0x1cc>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f863 	bl	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	00010002 	.word	0x00010002

08006424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006434:	e025      	b.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d021      	beq.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fd ff81 	bl	8004344 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d116      	bne.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e023      	b.n	80064ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10d      	bne.n	80064a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	43da      	mvns	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	e00c      	b.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	43da      	mvns	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d0b6      	beq.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064e0:	e051      	b.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d123      	bne.n	800653a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006500:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800650a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e046      	b.n	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d021      	beq.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fd feff 	bl	8004344 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d116      	bne.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e020      	b.n	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10c      	bne.n	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	43da      	mvns	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4013      	ands	r3, r2
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e00b      	b.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	43da      	mvns	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d18d      	bne.n	80064e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065dc:	e02d      	b.n	800663a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f8ce 	bl	8006780 <I2C_IsAcknowledgeFailed>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e02d      	b.n	800664a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d021      	beq.n	800663a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f6:	f7fd fea5 	bl	8004344 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	d302      	bcc.n	800660c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d116      	bne.n	800663a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f043 0220 	orr.w	r2, r3, #32
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e007      	b.n	800664a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d1ca      	bne.n	80065de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800665e:	e02d      	b.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f88d 	bl	8006780 <I2C_IsAcknowledgeFailed>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e02d      	b.n	80066cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d021      	beq.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006678:	f7fd fe64 	bl	8004344 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d116      	bne.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e007      	b.n	80066cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d1ca      	bne.n	8006660 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e0:	e042      	b.n	8006768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d119      	bne.n	8006724 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0210 	mvn.w	r2, #16
 80066f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e029      	b.n	8006778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006724:	f7fd fe0e 	bl	8004344 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d302      	bcc.n	800673a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d116      	bne.n	8006768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e007      	b.n	8006778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d1b5      	bne.n	80066e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006796:	d11b      	bne.n	80067d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d129      	bne.n	8006848 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	; 0x24
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0210 	bic.w	r2, r2, #16
 800681a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b20      	cmp	r3, #32
 800686e:	d12a      	bne.n	80068c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2224      	movs	r2, #36	; 0x24
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	f023 030f 	bic.w	r3, r3, #15
 8006896:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	b29a      	uxth	r2, r3
 800689c:	89fb      	ldrh	r3, [r7, #14]
 800689e:	4313      	orrs	r3, r2
 80068a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	89fa      	ldrh	r2, [r7, #14]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0bf      	b.n	8006a66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa fe9e 	bl	800163c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006916:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800692c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6899      	ldr	r1, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <HAL_LTDC_Init+0x19c>)
 8006948:	400b      	ands	r3, r1
 800694a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6899      	ldr	r1, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <HAL_LTDC_Init+0x19c>)
 8006976:	400b      	ands	r3, r1
 8006978:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68d9      	ldr	r1, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6919      	ldr	r1, [r3, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <HAL_LTDC_Init+0x19c>)
 80069a4:	400b      	ands	r3, r1
 80069a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6919      	ldr	r1, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6959      	ldr	r1, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <HAL_LTDC_Init+0x19c>)
 80069d2:	400b      	ands	r3, r1
 80069d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6959      	ldr	r1, [r3, #20]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0206 	orr.w	r2, r2, #6
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	f000f800 	.word	0xf000f800

08006a74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d023      	beq.n	8006ade <HAL_LTDC_IRQHandler+0x6a>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01e      	beq.n	8006ade <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0204 	bic.w	r2, r2, #4
 8006aae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2204      	movs	r2, #4
 8006acc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f86f 	bl	8006bbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d023      	beq.n	8006b30 <HAL_LTDC_IRQHandler+0xbc>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01e      	beq.n	8006b30 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0202 	bic.w	r2, r2, #2
 8006b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2202      	movs	r2, #2
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b10:	f043 0202 	orr.w	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f846 	bl	8006bbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01b      	beq.n	8006b72 <HAL_LTDC_IRQHandler+0xfe>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d016      	beq.n	8006b72 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f82f 	bl	8006bd0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_LTDC_IRQHandler+0x140>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0208 	bic.w	r2, r2, #8
 8006b94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f818 	bl	8006be4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_LTDC_ConfigLayer+0x1a>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e02c      	b.n	8006c6c <HAL_LTDC_ConfigLayer+0x74>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2134      	movs	r1, #52	; 0x34
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4614      	mov	r4, r2
 8006c36:	461d      	mov	r5, r3
 8006c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f83b 	bl	8006cc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2201      	movs	r2, #1
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bdb0      	pop	{r4, r5, r7, pc}

08006c74 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_LTDC_EnableDither+0x16>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e016      	b.n	8006cb8 <HAL_LTDC_EnableDither+0x44>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <HAL_LTDC_EnableDither+0x50>)
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <HAL_LTDC_EnableDither+0x50>)
 8006ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40016800 	.word	0x40016800

08006cc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b089      	sub	sp, #36	; 0x24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce4:	4413      	add	r3, r2
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	01db      	lsls	r3, r3, #7
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3384      	adds	r3, #132	; 0x84
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	01d2      	lsls	r2, r2, #7
 8006d04:	440a      	add	r2, r1
 8006d06:	3284      	adds	r2, #132	; 0x84
 8006d08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1e:	4413      	add	r3, r2
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	01db      	lsls	r3, r3, #7
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3384      	adds	r3, #132	; 0x84
 8006d30:	4619      	mov	r1, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d46:	4413      	add	r3, r2
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	01db      	lsls	r3, r3, #7
 8006d56:	4413      	add	r3, r2
 8006d58:	3384      	adds	r3, #132	; 0x84
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	4611      	mov	r1, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	01d2      	lsls	r2, r2, #7
 8006d66:	440a      	add	r2, r1
 8006d68:	3284      	adds	r2, #132	; 0x84
 8006d6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d7e:	4413      	add	r3, r2
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	01db      	lsls	r3, r3, #7
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3384      	adds	r3, #132	; 0x84
 8006d90:	4619      	mov	r1, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	01db      	lsls	r3, r3, #7
 8006da2:	4413      	add	r3, r2
 8006da4:	3384      	adds	r3, #132	; 0x84
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	4611      	mov	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	01d2      	lsls	r2, r2, #7
 8006db2:	440a      	add	r2, r1
 8006db4:	3284      	adds	r2, #132	; 0x84
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	01db      	lsls	r3, r3, #7
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3384      	adds	r3, #132	; 0x84
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	01db      	lsls	r3, r3, #7
 8006df8:	4413      	add	r3, r2
 8006dfa:	3384      	adds	r3, #132	; 0x84
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	4413      	add	r3, r2
 8006e0a:	3384      	adds	r3, #132	; 0x84
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e18:	461a      	mov	r2, r3
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	01db      	lsls	r3, r3, #7
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3384      	adds	r3, #132	; 0x84
 8006e30:	4619      	mov	r1, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	01db      	lsls	r3, r3, #7
 8006e42:	4413      	add	r3, r2
 8006e44:	3384      	adds	r3, #132	; 0x84
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	01d2      	lsls	r2, r2, #7
 8006e52:	440a      	add	r2, r1
 8006e54:	3284      	adds	r2, #132	; 0x84
 8006e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	01db      	lsls	r3, r3, #7
 8006e66:	4413      	add	r3, r2
 8006e68:	3384      	adds	r3, #132	; 0x84
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	01db      	lsls	r3, r3, #7
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3384      	adds	r3, #132	; 0x84
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	4611      	mov	r1, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	01d2      	lsls	r2, r2, #7
 8006e8c:	440a      	add	r2, r1
 8006e8e:	3284      	adds	r2, #132	; 0x84
 8006e90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e94:	f023 0307 	bic.w	r3, r3, #7
 8006e98:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	69da      	ldr	r2, [r3, #28]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6809      	ldr	r1, [r1, #0]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	01c9      	lsls	r1, r1, #7
 8006eac:	4401      	add	r1, r0
 8006eae:	3184      	adds	r1, #132	; 0x84
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3384      	adds	r3, #132	; 0x84
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	01db      	lsls	r3, r3, #7
 8006ece:	4413      	add	r3, r2
 8006ed0:	3384      	adds	r3, #132	; 0x84
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	01db      	lsls	r3, r3, #7
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3384      	adds	r3, #132	; 0x84
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	e01b      	b.n	8006f34 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006f04:	2303      	movs	r3, #3
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e014      	b.n	8006f34 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d00b      	beq.n	8006f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d007      	beq.n	8006f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d003      	beq.n	8006f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	d102      	bne.n	8006f30 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	e001      	b.n	8006f34 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006f30:	2301      	movs	r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	01db      	lsls	r3, r3, #7
 8006f3e:	4413      	add	r3, r2
 8006f40:	3384      	adds	r3, #132	; 0x84
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	01d2      	lsls	r2, r2, #7
 8006f4e:	440a      	add	r2, r1
 8006f50:	3284      	adds	r2, #132	; 0x84
 8006f52:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006f56:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	041a      	lsls	r2, r3, #16
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6859      	ldr	r1, [r3, #4]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	1acb      	subs	r3, r1, r3
 8006f6e:	69f9      	ldr	r1, [r7, #28]
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	3303      	adds	r3, #3
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	6809      	ldr	r1, [r1, #0]
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	01c9      	lsls	r1, r1, #7
 8006f80:	4401      	add	r1, r0
 8006f82:	3184      	adds	r1, #132	; 0x84
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	01db      	lsls	r3, r3, #7
 8006f92:	4413      	add	r3, r2
 8006f94:	3384      	adds	r3, #132	; 0x84
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	01d2      	lsls	r2, r2, #7
 8006fa2:	440a      	add	r2, r1
 8006fa4:	3284      	adds	r2, #132	; 0x84
 8006fa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	01db      	lsls	r3, r3, #7
 8006fba:	4413      	add	r3, r2
 8006fbc:	3384      	adds	r3, #132	; 0x84
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	01db      	lsls	r3, r3, #7
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3384      	adds	r3, #132	; 0x84
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	01d2      	lsls	r2, r2, #7
 8006fe0:	440a      	add	r2, r1
 8006fe2:	3284      	adds	r2, #132	; 0x84
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6013      	str	r3, [r2, #0]
}
 8006fea:	bf00      	nop
 8006fec:	3724      	adds	r7, #36	; 0x24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007002:	2300      	movs	r3, #0
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4b20      	ldr	r3, [pc, #128]	; (8007088 <HAL_PWREx_EnableOverDrive+0x90>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	4a1f      	ldr	r2, [pc, #124]	; (8007088 <HAL_PWREx_EnableOverDrive+0x90>)
 800700c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007010:	6413      	str	r3, [r2, #64]	; 0x40
 8007012:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <HAL_PWREx_EnableOverDrive+0x90>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <HAL_PWREx_EnableOverDrive+0x94>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007024:	f7fd f98e 	bl	8004344 <HAL_GetTick>
 8007028:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800702a:	e009      	b.n	8007040 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800702c:	f7fd f98a 	bl	8004344 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800703a:	d901      	bls.n	8007040 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e01f      	b.n	8007080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007040:	4b13      	ldr	r3, [pc, #76]	; (8007090 <HAL_PWREx_EnableOverDrive+0x98>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d1ee      	bne.n	800702c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800704e:	4b11      	ldr	r3, [pc, #68]	; (8007094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007054:	f7fd f976 	bl	8004344 <HAL_GetTick>
 8007058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800705a:	e009      	b.n	8007070 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800705c:	f7fd f972 	bl	8004344 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800706a:	d901      	bls.n	8007070 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e007      	b.n	8007080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <HAL_PWREx_EnableOverDrive+0x98>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707c:	d1ee      	bne.n	800705c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40023800 	.word	0x40023800
 800708c:	420e0040 	.word	0x420e0040
 8007090:	40007000 	.word	0x40007000
 8007094:	420e0044 	.word	0x420e0044

08007098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e25b      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d075      	beq.n	80071a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070b6:	4ba3      	ldr	r3, [pc, #652]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d00c      	beq.n	80070dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070c2:	4ba0      	ldr	r3, [pc, #640]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d112      	bne.n	80070f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ce:	4b9d      	ldr	r3, [pc, #628]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070da:	d10b      	bne.n	80070f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	4b99      	ldr	r3, [pc, #612]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d05b      	beq.n	80071a0 <HAL_RCC_OscConfig+0x108>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d157      	bne.n	80071a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e236      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fc:	d106      	bne.n	800710c <HAL_RCC_OscConfig+0x74>
 80070fe:	4b91      	ldr	r3, [pc, #580]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a90      	ldr	r2, [pc, #576]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e01d      	b.n	8007148 <HAL_RCC_OscConfig+0xb0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007114:	d10c      	bne.n	8007130 <HAL_RCC_OscConfig+0x98>
 8007116:	4b8b      	ldr	r3, [pc, #556]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a8a      	ldr	r2, [pc, #552]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800711c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	4b88      	ldr	r3, [pc, #544]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a87      	ldr	r2, [pc, #540]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e00b      	b.n	8007148 <HAL_RCC_OscConfig+0xb0>
 8007130:	4b84      	ldr	r3, [pc, #528]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a83      	ldr	r2, [pc, #524]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4b81      	ldr	r3, [pc, #516]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a80      	ldr	r2, [pc, #512]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d013      	beq.n	8007178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007150:	f7fd f8f8 	bl	8004344 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007158:	f7fd f8f4 	bl	8004344 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b64      	cmp	r3, #100	; 0x64
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1fb      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	4b76      	ldr	r3, [pc, #472]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0xc0>
 8007176:	e014      	b.n	80071a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fd f8e4 	bl	8004344 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007180:	f7fd f8e0 	bl	8004344 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e1e7      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	4b6c      	ldr	r3, [pc, #432]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0xe8>
 800719e:	e000      	b.n	80071a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d063      	beq.n	8007276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ae:	4b65      	ldr	r3, [pc, #404]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ba:	4b62      	ldr	r3, [pc, #392]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d11c      	bne.n	8007200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c6:	4b5f      	ldr	r3, [pc, #380]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d116      	bne.n	8007200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d2:	4b5c      	ldr	r3, [pc, #368]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCC_OscConfig+0x152>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e1bb      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ea:	4b56      	ldr	r3, [pc, #344]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4952      	ldr	r1, [pc, #328]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	e03a      	b.n	8007276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007208:	4b4f      	ldr	r3, [pc, #316]	; (8007348 <HAL_RCC_OscConfig+0x2b0>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fd f899 	bl	8004344 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007216:	f7fd f895 	bl	8004344 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e19c      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007228:	4b46      	ldr	r3, [pc, #280]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007234:	4b43      	ldr	r3, [pc, #268]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4940      	ldr	r1, [pc, #256]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007244:	4313      	orrs	r3, r2
 8007246:	600b      	str	r3, [r1, #0]
 8007248:	e015      	b.n	8007276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724a:	4b3f      	ldr	r3, [pc, #252]	; (8007348 <HAL_RCC_OscConfig+0x2b0>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fd f878 	bl	8004344 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007258:	f7fd f874 	bl	8004344 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e17b      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	4b36      	ldr	r3, [pc, #216]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d030      	beq.n	80072e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728a:	4b30      	ldr	r3, [pc, #192]	; (800734c <HAL_RCC_OscConfig+0x2b4>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007290:	f7fd f858 	bl	8004344 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007298:	f7fd f854 	bl	8004344 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e15b      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072aa:	4b26      	ldr	r3, [pc, #152]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x200>
 80072b6:	e015      	b.n	80072e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072b8:	4b24      	ldr	r3, [pc, #144]	; (800734c <HAL_RCC_OscConfig+0x2b4>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072be:	f7fd f841 	bl	8004344 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c6:	f7fd f83d 	bl	8004344 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e144      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80072da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80a0 	beq.w	8007432 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007310:	6413      	str	r3, [r2, #64]	; 0x40
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <HAL_RCC_OscConfig+0x2ac>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_RCC_OscConfig+0x2b8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732a:	2b00      	cmp	r3, #0
 800732c:	d121      	bne.n	8007372 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <HAL_RCC_OscConfig+0x2b8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a07      	ldr	r2, [pc, #28]	; (8007350 <HAL_RCC_OscConfig+0x2b8>)
 8007334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800733a:	f7fd f803 	bl	8004344 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007340:	e011      	b.n	8007366 <HAL_RCC_OscConfig+0x2ce>
 8007342:	bf00      	nop
 8007344:	40023800 	.word	0x40023800
 8007348:	42470000 	.word	0x42470000
 800734c:	42470e80 	.word	0x42470e80
 8007350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007354:	f7fc fff6 	bl	8004344 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e0fd      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007366:	4b81      	ldr	r3, [pc, #516]	; (800756c <HAL_RCC_OscConfig+0x4d4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d106      	bne.n	8007388 <HAL_RCC_OscConfig+0x2f0>
 800737a:	4b7d      	ldr	r3, [pc, #500]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	4a7c      	ldr	r2, [pc, #496]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	6713      	str	r3, [r2, #112]	; 0x70
 8007386:	e01c      	b.n	80073c2 <HAL_RCC_OscConfig+0x32a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b05      	cmp	r3, #5
 800738e:	d10c      	bne.n	80073aa <HAL_RCC_OscConfig+0x312>
 8007390:	4b77      	ldr	r3, [pc, #476]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007394:	4a76      	ldr	r2, [pc, #472]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007396:	f043 0304 	orr.w	r3, r3, #4
 800739a:	6713      	str	r3, [r2, #112]	; 0x70
 800739c:	4b74      	ldr	r3, [pc, #464]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	4a73      	ldr	r2, [pc, #460]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
 80073a8:	e00b      	b.n	80073c2 <HAL_RCC_OscConfig+0x32a>
 80073aa:	4b71      	ldr	r3, [pc, #452]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	4a70      	ldr	r2, [pc, #448]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	6713      	str	r3, [r2, #112]	; 0x70
 80073b6:	4b6e      	ldr	r3, [pc, #440]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	4a6d      	ldr	r2, [pc, #436]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d015      	beq.n	80073f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ca:	f7fc ffbb 	bl	8004344 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fc ffb7 	bl	8004344 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0bc      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e8:	4b61      	ldr	r3, [pc, #388]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0ee      	beq.n	80073d2 <HAL_RCC_OscConfig+0x33a>
 80073f4:	e014      	b.n	8007420 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f6:	f7fc ffa5 	bl	8004344 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fc ffa1 	bl	8004344 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	; 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e0a6      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007414:	4b56      	ldr	r3, [pc, #344]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ee      	bne.n	80073fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d105      	bne.n	8007432 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007426:	4b52      	ldr	r3, [pc, #328]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a51      	ldr	r2, [pc, #324]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8092 	beq.w	8007560 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800743c:	4b4c      	ldr	r3, [pc, #304]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 030c 	and.w	r3, r3, #12
 8007444:	2b08      	cmp	r3, #8
 8007446:	d05c      	beq.n	8007502 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d141      	bne.n	80074d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007450:	4b48      	ldr	r3, [pc, #288]	; (8007574 <HAL_RCC_OscConfig+0x4dc>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007456:	f7fc ff75 	bl	8004344 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800745e:	f7fc ff71 	bl	8004344 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e078      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007470:	4b3f      	ldr	r3, [pc, #252]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f0      	bne.n	800745e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	019b      	lsls	r3, r3, #6
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	3b01      	subs	r3, #1
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	4933      	ldr	r1, [pc, #204]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a6:	4b33      	ldr	r3, [pc, #204]	; (8007574 <HAL_RCC_OscConfig+0x4dc>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fc ff4a 	bl	8004344 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fc ff46 	bl	8004344 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e04d      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c6:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x41c>
 80074d2:	e045      	b.n	8007560 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d4:	4b27      	ldr	r3, [pc, #156]	; (8007574 <HAL_RCC_OscConfig+0x4dc>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074da:	f7fc ff33 	bl	8004344 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e2:	f7fc ff2f 	bl	8004344 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e036      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f4:	4b1e      	ldr	r3, [pc, #120]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f0      	bne.n	80074e2 <HAL_RCC_OscConfig+0x44a>
 8007500:	e02e      	b.n	8007560 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e029      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800750e:	4b18      	ldr	r3, [pc, #96]	; (8007570 <HAL_RCC_OscConfig+0x4d8>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	429a      	cmp	r2, r3
 8007520:	d11c      	bne.n	800755c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d115      	bne.n	800755c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007536:	4013      	ands	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800753c:	4293      	cmp	r3, r2
 800753e:	d10d      	bne.n	800755c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d106      	bne.n	800755c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d001      	beq.n	8007560 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40007000 	.word	0x40007000
 8007570:	40023800 	.word	0x40023800
 8007574:	42470060 	.word	0x42470060

08007578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0cc      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800758c:	4b68      	ldr	r3, [pc, #416]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d90c      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b65      	ldr	r3, [pc, #404]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a2:	4b63      	ldr	r3, [pc, #396]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0b8      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075cc:	4b59      	ldr	r3, [pc, #356]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4a58      	ldr	r2, [pc, #352]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075e4:	4b53      	ldr	r3, [pc, #332]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a52      	ldr	r2, [pc, #328]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f0:	4b50      	ldr	r3, [pc, #320]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	494d      	ldr	r1, [pc, #308]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d044      	beq.n	8007698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	4b47      	ldr	r3, [pc, #284]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d119      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e07f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d003      	beq.n	8007636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007632:	2b03      	cmp	r3, #3
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	4b3f      	ldr	r3, [pc, #252]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e06f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007646:	4b3b      	ldr	r3, [pc, #236]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e067      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007656:	4b37      	ldr	r3, [pc, #220]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4934      	ldr	r1, [pc, #208]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007668:	f7fc fe6c 	bl	8004344 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	e00a      	b.n	8007686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007670:	f7fc fe68 	bl	8004344 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	; 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e04f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 020c 	and.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	429a      	cmp	r2, r3
 8007696:	d1eb      	bne.n	8007670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007698:	4b25      	ldr	r3, [pc, #148]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d20c      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b22      	ldr	r3, [pc, #136]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ae:	4b20      	ldr	r3, [pc, #128]	; (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e032      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076cc:	4b19      	ldr	r3, [pc, #100]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4916      	ldr	r1, [pc, #88]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ea:	4b12      	ldr	r3, [pc, #72]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	490e      	ldr	r1, [pc, #56]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076fe:	f000 f821 	bl	8007744 <HAL_RCC_GetSysClockFreq>
 8007702:	4602      	mov	r2, r0
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	490a      	ldr	r1, [pc, #40]	; (8007738 <HAL_RCC_ClockConfig+0x1c0>)
 8007710:	5ccb      	ldrb	r3, [r1, r3]
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	4a09      	ldr	r2, [pc, #36]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa fb44 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023c00 	.word	0x40023c00
 8007734:	40023800 	.word	0x40023800
 8007738:	08012468 	.word	0x08012468
 800773c:	20000000 	.word	0x20000000
 8007740:	2000005c 	.word	0x2000005c

08007744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007744:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	2300      	movs	r3, #0
 8007756:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800775c:	4b67      	ldr	r3, [pc, #412]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 030c 	and.w	r3, r3, #12
 8007764:	2b08      	cmp	r3, #8
 8007766:	d00d      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x40>
 8007768:	2b08      	cmp	r3, #8
 800776a:	f200 80bd 	bhi.w	80078e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x34>
 8007772:	2b04      	cmp	r3, #4
 8007774:	d003      	beq.n	800777e <HAL_RCC_GetSysClockFreq+0x3a>
 8007776:	e0b7      	b.n	80078e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007778:	4b61      	ldr	r3, [pc, #388]	; (8007900 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800777a:	60bb      	str	r3, [r7, #8]
       break;
 800777c:	e0b7      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800777e:	4b61      	ldr	r3, [pc, #388]	; (8007904 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007780:	60bb      	str	r3, [r7, #8]
      break;
 8007782:	e0b4      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007784:	4b5d      	ldr	r3, [pc, #372]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800778c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800778e:	4b5b      	ldr	r3, [pc, #364]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04d      	beq.n	8007836 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b58      	ldr	r3, [pc, #352]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	461a      	mov	r2, r3
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077aa:	f04f 0100 	mov.w	r1, #0
 80077ae:	ea02 0800 	and.w	r8, r2, r0
 80077b2:	ea03 0901 	and.w	r9, r3, r1
 80077b6:	4640      	mov	r0, r8
 80077b8:	4649      	mov	r1, r9
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	014b      	lsls	r3, r1, #5
 80077c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077c8:	0142      	lsls	r2, r0, #5
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	ebb0 0008 	subs.w	r0, r0, r8
 80077d2:	eb61 0109 	sbc.w	r1, r1, r9
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	018b      	lsls	r3, r1, #6
 80077e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077e4:	0182      	lsls	r2, r0, #6
 80077e6:	1a12      	subs	r2, r2, r0
 80077e8:	eb63 0301 	sbc.w	r3, r3, r1
 80077ec:	f04f 0000 	mov.w	r0, #0
 80077f0:	f04f 0100 	mov.w	r1, #0
 80077f4:	00d9      	lsls	r1, r3, #3
 80077f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077fa:	00d0      	lsls	r0, r2, #3
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	eb12 0208 	adds.w	r2, r2, r8
 8007804:	eb43 0309 	adc.w	r3, r3, r9
 8007808:	f04f 0000 	mov.w	r0, #0
 800780c:	f04f 0100 	mov.w	r1, #0
 8007810:	0259      	lsls	r1, r3, #9
 8007812:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007816:	0250      	lsls	r0, r2, #9
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4610      	mov	r0, r2
 800781e:	4619      	mov	r1, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	461a      	mov	r2, r3
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	f7f9 f9ee 	bl	8000c08 <__aeabi_uldivmod>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4613      	mov	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e04a      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007836:	4b31      	ldr	r3, [pc, #196]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	099b      	lsrs	r3, r3, #6
 800783c:	461a      	mov	r2, r3
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007846:	f04f 0100 	mov.w	r1, #0
 800784a:	ea02 0400 	and.w	r4, r2, r0
 800784e:	ea03 0501 	and.w	r5, r3, r1
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	014b      	lsls	r3, r1, #5
 8007860:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007864:	0142      	lsls	r2, r0, #5
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	1b00      	subs	r0, r0, r4
 800786c:	eb61 0105 	sbc.w	r1, r1, r5
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	018b      	lsls	r3, r1, #6
 800787a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800787e:	0182      	lsls	r2, r0, #6
 8007880:	1a12      	subs	r2, r2, r0
 8007882:	eb63 0301 	sbc.w	r3, r3, r1
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	00d9      	lsls	r1, r3, #3
 8007890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007894:	00d0      	lsls	r0, r2, #3
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	1912      	adds	r2, r2, r4
 800789c:	eb45 0303 	adc.w	r3, r5, r3
 80078a0:	f04f 0000 	mov.w	r0, #0
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	0299      	lsls	r1, r3, #10
 80078aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80078ae:	0290      	lsls	r0, r2, #10
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	f7f9 f9a2 	bl	8000c08 <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4613      	mov	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	3301      	adds	r3, #1
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	60bb      	str	r3, [r7, #8]
      break;
 80078e6:	e002      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80078ea:	60bb      	str	r3, [r7, #8]
      break;
 80078ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078ee:	68bb      	ldr	r3, [r7, #8]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80078fa:	bf00      	nop
 80078fc:	40023800 	.word	0x40023800
 8007900:	00f42400 	.word	0x00f42400
 8007904:	007a1200 	.word	0x007a1200

08007908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800790c:	4b03      	ldr	r3, [pc, #12]	; (800791c <HAL_RCC_GetHCLKFreq+0x14>)
 800790e:	681b      	ldr	r3, [r3, #0]
}
 8007910:	4618      	mov	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000000 	.word	0x20000000

08007920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007924:	f7ff fff0 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 8007928:	4602      	mov	r2, r0
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	0a9b      	lsrs	r3, r3, #10
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	4903      	ldr	r1, [pc, #12]	; (8007944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007936:	5ccb      	ldrb	r3, [r1, r3]
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40023800 	.word	0x40023800
 8007944:	08012478 	.word	0x08012478

08007948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800794c:	f7ff ffdc 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	0b5b      	lsrs	r3, r3, #13
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	4903      	ldr	r1, [pc, #12]	; (800796c <HAL_RCC_GetPCLK2Freq+0x24>)
 800795e:	5ccb      	ldrb	r3, [r1, r3]
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40023800 	.word	0x40023800
 800796c:	08012478 	.word	0x08012478

08007970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	220f      	movs	r2, #15
 800797e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <HAL_RCC_GetClockConfig+0x5c>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0203 	and.w	r2, r3, #3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <HAL_RCC_GetClockConfig+0x5c>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <HAL_RCC_GetClockConfig+0x5c>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_RCC_GetClockConfig+0x5c>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	08db      	lsrs	r3, r3, #3
 80079aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079b2:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <HAL_RCC_GetClockConfig+0x60>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 020f 	and.w	r2, r3, #15
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	601a      	str	r2, [r3, #0]
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40023c00 	.word	0x40023c00

080079d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d075      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a08:	4bad      	ldr	r3, [pc, #692]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a0e:	f7fc fc99 	bl	8004344 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a16:	f7fc fc95 	bl	8004344 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e18b      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a28:	4ba6      	ldr	r3, [pc, #664]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	019a      	lsls	r2, r3, #6
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	071b      	lsls	r3, r3, #28
 8007a4c:	499d      	ldr	r1, [pc, #628]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01f      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a60:	4b98      	ldr	r3, [pc, #608]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a66:	0f1b      	lsrs	r3, r3, #28
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	019a      	lsls	r2, r3, #6
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	061b      	lsls	r3, r3, #24
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	071b      	lsls	r3, r3, #28
 8007a80:	4990      	ldr	r1, [pc, #576]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a88:	4b8e      	ldr	r3, [pc, #568]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8e:	f023 021f 	bic.w	r2, r3, #31
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	498a      	ldr	r1, [pc, #552]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00d      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	019a      	lsls	r2, r3, #6
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	061b      	lsls	r3, r3, #24
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	071b      	lsls	r3, r3, #28
 8007ac0:	4980      	ldr	r1, [pc, #512]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ac8:	4b7d      	ldr	r3, [pc, #500]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ace:	f7fc fc39 	bl	8004344 <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ad6:	f7fc fc35 	bl	8004344 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e12b      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ae8:	4b76      	ldr	r3, [pc, #472]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d079      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b0c:	4b6e      	ldr	r3, [pc, #440]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b12:	f7fc fc17 	bl	8004344 <HAL_GetTick>
 8007b16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b18:	e008      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b1a:	f7fc fc13 	bl	8004344 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e109      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b2c:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b38:	d0ef      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b46:	4b5f      	ldr	r3, [pc, #380]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4c:	0f1b      	lsrs	r3, r3, #28
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	019a      	lsls	r2, r3, #6
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	061b      	lsls	r3, r3, #24
 8007b60:	431a      	orrs	r2, r3
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	071b      	lsls	r3, r3, #28
 8007b66:	4957      	ldr	r1, [pc, #348]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b6e:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	4950      	ldr	r1, [pc, #320]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01e      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b94:	4b4b      	ldr	r3, [pc, #300]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9a:	0e1b      	lsrs	r3, r3, #24
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	019a      	lsls	r2, r3, #6
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	061b      	lsls	r3, r3, #24
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	071b      	lsls	r3, r3, #28
 8007bb4:	4943      	ldr	r1, [pc, #268]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bbc:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	493e      	ldr	r1, [pc, #248]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bd2:	4b3d      	ldr	r3, [pc, #244]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bd8:	f7fc fbb4 	bl	8004344 <HAL_GetTick>
 8007bdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007be0:	f7fc fbb0 	bl	8004344 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e0a6      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bf2:	4b34      	ldr	r3, [pc, #208]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfe:	d1ef      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 808d 	beq.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	4b2c      	ldr	r3, [pc, #176]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	4a2b      	ldr	r2, [pc, #172]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c1e:	4b29      	ldr	r3, [pc, #164]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c2a:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a27      	ldr	r2, [pc, #156]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c36:	f7fc fb85 	bl	8004344 <HAL_GetTick>
 8007c3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c3e:	f7fc fb81 	bl	8004344 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e077      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c50:	4b1e      	ldr	r3, [pc, #120]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0f0      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c5c:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d039      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d032      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c84:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8a:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c90:	4a0c      	ldr	r2, [pc, #48]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d11e      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ca2:	f7fc fb4f 	bl	8004344 <HAL_GetTick>
 8007ca6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ca8:	e014      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007caa:	f7fc fb4b 	bl	8004344 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d90b      	bls.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e03f      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007cc0:	42470068 	.word	0x42470068
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	42470070 	.word	0x42470070
 8007ccc:	40007000 	.word	0x40007000
 8007cd0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0e4      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cec:	d10d      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007cee:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d02:	4911      	ldr	r1, [pc, #68]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	608b      	str	r3, [r1, #8]
 8007d08:	e005      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d14:	6093      	str	r3, [r2, #8]
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d22:	4909      	ldr	r1, [pc, #36]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d3a:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007d3c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	424711e0 	.word	0x424711e0

08007d50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e025      	b.n	8007db0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7f9 f9fd 	bl	8001178 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f002 f901 	bl	8009f98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	f002 f96c 	bl	800a07e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d101      	bne.n	8007dd4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e018      	b.n	8007e06 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f002 f9c9 	bl	800a17c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d104      	bne.n	8007dfc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2205      	movs	r2, #5
 8007df6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007dfa:	e003      	b.n	8007e04 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d101      	bne.n	8007e28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007e24:	2302      	movs	r3, #2
 8007e26:	e00e      	b.n	8007e46 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 f9dc 	bl	800a1f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e056      	b.n	8007f0e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7f9 ff04 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	ea42 0103 	orr.w	r1, r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	f003 0104 	and.w	r1, r3, #4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e01a      	b.n	8007f5e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f9 fee9 	bl	8001d18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b088      	sub	sp, #32
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_SPI_Transmit+0x22>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e11e      	b.n	80081c6 <HAL_SPI_Transmit+0x260>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f90:	f7fc f9d8 	bl	8004344 <HAL_GetTick>
 8007f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d002      	beq.n	8007fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007faa:	e103      	b.n	80081b4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <HAL_SPI_Transmit+0x52>
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fbc:	e0fa      	b.n	80081b4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	88fa      	ldrh	r2, [r7, #6]
 8007fd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008004:	d107      	bne.n	8008016 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d007      	beq.n	8008034 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800803c:	d14b      	bne.n	80080d6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_SPI_Transmit+0xe6>
 8008046:	8afb      	ldrh	r3, [r7, #22]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d13e      	bne.n	80080ca <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	881a      	ldrh	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	1c9a      	adds	r2, r3, #2
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008070:	e02b      	b.n	80080ca <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b02      	cmp	r3, #2
 800807e:	d112      	bne.n	80080a6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	881a      	ldrh	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80080a4:	e011      	b.n	80080ca <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a6:	f7fc f94d 	bl	8004344 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d803      	bhi.n	80080be <HAL_SPI_Transmit+0x158>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d102      	bne.n	80080c4 <HAL_SPI_Transmit+0x15e>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080c8:	e074      	b.n	80081b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1ce      	bne.n	8008072 <HAL_SPI_Transmit+0x10c>
 80080d4:	e04c      	b.n	8008170 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_SPI_Transmit+0x17e>
 80080de:	8afb      	ldrh	r3, [r7, #22]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d140      	bne.n	8008166 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800810a:	e02c      	b.n	8008166 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d113      	bne.n	8008142 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	330c      	adds	r3, #12
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008140:	e011      	b.n	8008166 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008142:	f7fc f8ff 	bl	8004344 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d803      	bhi.n	800815a <HAL_SPI_Transmit+0x1f4>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d102      	bne.n	8008160 <HAL_SPI_Transmit+0x1fa>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008164:	e026      	b.n	80081b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1cd      	bne.n	800810c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fbb3 	bl	80088e0 <SPI_EndRxTxTransaction>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	613b      	str	r3, [r7, #16]
 80081a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	77fb      	strb	r3, [r7, #31]
 80081b0:	e000      	b.n	80081b4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80081b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b088      	sub	sp, #32
 80081d2:	af02      	add	r7, sp, #8
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ea:	d112      	bne.n	8008212 <HAL_SPI_Receive+0x44>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10e      	bne.n	8008212 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2204      	movs	r2, #4
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	4613      	mov	r3, r2
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f8e9 	bl	80083e0 <HAL_SPI_TransmitReceive>
 800820e:	4603      	mov	r3, r0
 8008210:	e0e2      	b.n	80083d8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_SPI_Receive+0x52>
 800821c:	2302      	movs	r3, #2
 800821e:	e0db      	b.n	80083d8 <HAL_SPI_Receive+0x20a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008228:	f7fc f88c 	bl	8004344 <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800823a:	2302      	movs	r3, #2
 800823c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800823e:	e0c2      	b.n	80083c6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <HAL_SPI_Receive+0x7e>
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008250:	e0b9      	b.n	80083c6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2204      	movs	r2, #4
 8008256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	88fa      	ldrh	r2, [r7, #6]
 800826a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	88fa      	ldrh	r2, [r7, #6]
 8008270:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d107      	bne.n	80082aa <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d007      	beq.n	80082c8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d162      	bne.n	8008396 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082d0:	e02e      	b.n	8008330 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d115      	bne.n	800830c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f103 020c 	add.w	r2, r3, #12
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	7812      	ldrb	r2, [r2, #0]
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800830a:	e011      	b.n	8008330 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800830c:	f7fc f81a 	bl	8004344 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d803      	bhi.n	8008324 <HAL_SPI_Receive+0x156>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d102      	bne.n	800832a <HAL_SPI_Receive+0x15c>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800832e:	e04a      	b.n	80083c6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1cb      	bne.n	80082d2 <HAL_SPI_Receive+0x104>
 800833a:	e031      	b.n	80083a0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d113      	bne.n	8008372 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	b292      	uxth	r2, r2
 8008356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	1c9a      	adds	r2, r3, #2
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008370:	e011      	b.n	8008396 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008372:	f7fb ffe7 	bl	8004344 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d803      	bhi.n	800838a <HAL_SPI_Receive+0x1bc>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Receive+0x1c2>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008394:	e017      	b.n	80083c6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1cd      	bne.n	800833c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fa35 	bl	8008814 <SPI_EndRxTransaction>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]
 80083c2:	e000      	b.n	80083c6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80083c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083ee:	2301      	movs	r3, #1
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_SPI_TransmitReceive+0x26>
 8008402:	2302      	movs	r3, #2
 8008404:	e18a      	b.n	800871c <HAL_SPI_TransmitReceive+0x33c>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800840e:	f7fb ff99 	bl	8004344 <HAL_GetTick>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008424:	887b      	ldrh	r3, [r7, #2]
 8008426:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800842c:	2b01      	cmp	r3, #1
 800842e:	d00f      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x70>
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008436:	d107      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x68>
 8008440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008444:	2b04      	cmp	r3, #4
 8008446:	d003      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008448:	2302      	movs	r3, #2
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800844e:	e15b      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d005      	beq.n	8008462 <HAL_SPI_TransmitReceive+0x82>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_SPI_TransmitReceive+0x82>
 800845c:	887b      	ldrh	r3, [r7, #2]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d103      	bne.n	800846a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008468:	e14e      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b04      	cmp	r3, #4
 8008474:	d003      	beq.n	800847e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2205      	movs	r2, #5
 800847a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	887a      	ldrh	r2, [r7, #2]
 800848e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	887a      	ldrh	r2, [r7, #2]
 8008494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	887a      	ldrh	r2, [r7, #2]
 80084a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	887a      	ldrh	r2, [r7, #2]
 80084a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d007      	beq.n	80084d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084da:	d178      	bne.n	80085ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <HAL_SPI_TransmitReceive+0x10a>
 80084e4:	8b7b      	ldrh	r3, [r7, #26]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d166      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800850e:	e053      	b.n	80085b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b02      	cmp	r3, #2
 800851c:	d11b      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x176>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008522:	b29b      	uxth	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d016      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x176>
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	2b01      	cmp	r3, #1
 800852c:	d113      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	881a      	ldrh	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	1c9a      	adds	r2, r3, #2
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008548:	b29b      	uxth	r3, r3
 800854a:	3b01      	subs	r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b01      	cmp	r3, #1
 8008562:	d119      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x1b8>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d014      	beq.n	8008598 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	b292      	uxth	r2, r2
 800857a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	1c9a      	adds	r2, r3, #2
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008594:	2301      	movs	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008598:	f7fb fed4 	bl	8004344 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d807      	bhi.n	80085b8 <HAL_SPI_TransmitReceive+0x1d8>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d003      	beq.n	80085b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085b6:	e0a7      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1a6      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x130>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1a1      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x130>
 80085cc:	e07c      	b.n	80086c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_SPI_TransmitReceive+0x1fc>
 80085d6:	8b7b      	ldrh	r3, [r7, #26]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d16b      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008602:	e057      	b.n	80086b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b02      	cmp	r3, #2
 8008610:	d11c      	bne.n	800864c <HAL_SPI_TransmitReceive+0x26c>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d017      	beq.n	800864c <HAL_SPI_TransmitReceive+0x26c>
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d114      	bne.n	800864c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b01      	cmp	r3, #1
 8008658:	d119      	bne.n	800868e <HAL_SPI_TransmitReceive+0x2ae>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d014      	beq.n	800868e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800868a:	2301      	movs	r3, #1
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800868e:	f7fb fe59 	bl	8004344 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869a:	429a      	cmp	r2, r3
 800869c:	d803      	bhi.n	80086a6 <HAL_SPI_TransmitReceive+0x2c6>
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d102      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x2cc>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086b2:	e029      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1a2      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x224>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d19d      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f907 	bl	80088e0 <SPI_EndRxTxTransaction>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d006      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086e4:	e010      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	e000      	b.n	8008708 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008706:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800871c:	4618      	mov	r0, r3
 800871e:	3730      	adds	r7, #48	; 0x30
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008732:	b2db      	uxtb	r3, r3
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008750:	e04c      	b.n	80087ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d048      	beq.n	80087ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800875a:	f7fb fdf3 	bl	8004344 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d902      	bls.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x30>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d13d      	bne.n	80087ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800877e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008788:	d111      	bne.n	80087ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008792:	d004      	beq.n	800879e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879c:	d107      	bne.n	80087ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b6:	d10f      	bne.n	80087d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e00f      	b.n	800880c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4013      	ands	r3, r2
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	429a      	cmp	r2, r3
 8008808:	d1a3      	bne.n	8008752 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008828:	d111      	bne.n	800884e <SPI_EndRxTransaction+0x3a>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008832:	d004      	beq.n	800883e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883c:	d107      	bne.n	800884e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008856:	d12a      	bne.n	80088ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008860:	d012      	beq.n	8008888 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2200      	movs	r2, #0
 800886a:	2180      	movs	r1, #128	; 0x80
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ff67 	bl	8008740 <SPI_WaitFlagStateUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d02d      	beq.n	80088d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	f043 0220 	orr.w	r2, r3, #32
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e026      	b.n	80088d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2200      	movs	r2, #0
 8008890:	2101      	movs	r1, #1
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff ff54 	bl	8008740 <SPI_WaitFlagStateUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01a      	beq.n	80088d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a2:	f043 0220 	orr.w	r2, r3, #32
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e013      	b.n	80088d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	2101      	movs	r1, #1
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff ff41 	bl	8008740 <SPI_WaitFlagStateUntilTimeout>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c8:	f043 0220 	orr.w	r2, r3, #32
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e000      	b.n	80088d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088ec:	4b1b      	ldr	r3, [pc, #108]	; (800895c <SPI_EndRxTxTransaction+0x7c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <SPI_EndRxTxTransaction+0x80>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	0d5b      	lsrs	r3, r3, #21
 80088f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088fc:	fb02 f303 	mul.w	r3, r2, r3
 8008900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800890a:	d112      	bne.n	8008932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff ff12 	bl	8008740 <SPI_WaitFlagStateUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d016      	beq.n	8008950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	f043 0220 	orr.w	r2, r3, #32
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e00f      	b.n	8008952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	3b01      	subs	r3, #1
 800893c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008948:	2b80      	cmp	r3, #128	; 0x80
 800894a:	d0f2      	beq.n	8008932 <SPI_EndRxTxTransaction+0x52>
 800894c:	e000      	b.n	8008950 <SPI_EndRxTxTransaction+0x70>
        break;
 800894e:	bf00      	nop
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20000000 	.word	0x20000000
 8008960:	165e9f81 	.word	0x165e9f81

08008964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e01d      	b.n	80089b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7f9 ff02 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	4619      	mov	r1, r3
 80089a2:	4610      	mov	r0, r2
 80089a4:	f000 fa22 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b06      	cmp	r3, #6
 80089e2:	d007      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0201 	orr.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d122      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d11b      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f06f 0202 	mvn.w	r2, #2
 8008a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f9b2 	bl	8008dae <HAL_TIM_IC_CaptureCallback>
 8008a4a:	e005      	b.n	8008a58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9a4 	bl	8008d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f9b5 	bl	8008dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d122      	bne.n	8008ab2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d11b      	bne.n	8008ab2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f06f 0204 	mvn.w	r2, #4
 8008a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f988 	bl	8008dae <HAL_TIM_IC_CaptureCallback>
 8008a9e:	e005      	b.n	8008aac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f97a 	bl	8008d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f98b 	bl	8008dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f003 0308 	and.w	r3, r3, #8
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d122      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b08      	cmp	r3, #8
 8008acc:	d11b      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f06f 0208 	mvn.w	r2, #8
 8008ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2204      	movs	r2, #4
 8008adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f95e 	bl	8008dae <HAL_TIM_IC_CaptureCallback>
 8008af2:	e005      	b.n	8008b00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f950 	bl	8008d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f961 	bl	8008dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d122      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	2b10      	cmp	r3, #16
 8008b20:	d11b      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f06f 0210 	mvn.w	r2, #16
 8008b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2208      	movs	r2, #8
 8008b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f934 	bl	8008dae <HAL_TIM_IC_CaptureCallback>
 8008b46:	e005      	b.n	8008b54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f926 	bl	8008d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f937 	bl	8008dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10e      	bne.n	8008b86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d107      	bne.n	8008b86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f06f 0201 	mvn.w	r2, #1
 8008b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7f9 f82d 	bl	8001be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	2b80      	cmp	r3, #128	; 0x80
 8008b92:	d10e      	bne.n	8008bb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	d107      	bne.n	8008bb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fadd 	bl	800916c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d10e      	bne.n	8008bde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bca:	2b40      	cmp	r3, #64	; 0x40
 8008bcc:	d107      	bne.n	8008bde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8fc 	bl	8008dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d10e      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d107      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f06f 0220 	mvn.w	r2, #32
 8008c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 faa7 	bl	8009158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <HAL_TIM_ConfigClockSource+0x18>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e0b3      	b.n	8008d92 <HAL_TIM_ConfigClockSource+0x180>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c62:	d03e      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0xd0>
 8008c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c68:	f200 8087 	bhi.w	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c70:	f000 8085 	beq.w	8008d7e <HAL_TIM_ConfigClockSource+0x16c>
 8008c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c78:	d87f      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c7a:	2b70      	cmp	r3, #112	; 0x70
 8008c7c:	d01a      	beq.n	8008cb4 <HAL_TIM_ConfigClockSource+0xa2>
 8008c7e:	2b70      	cmp	r3, #112	; 0x70
 8008c80:	d87b      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c82:	2b60      	cmp	r3, #96	; 0x60
 8008c84:	d050      	beq.n	8008d28 <HAL_TIM_ConfigClockSource+0x116>
 8008c86:	2b60      	cmp	r3, #96	; 0x60
 8008c88:	d877      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c8a:	2b50      	cmp	r3, #80	; 0x50
 8008c8c:	d03c      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0xf6>
 8008c8e:	2b50      	cmp	r3, #80	; 0x50
 8008c90:	d873      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c92:	2b40      	cmp	r3, #64	; 0x40
 8008c94:	d058      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x136>
 8008c96:	2b40      	cmp	r3, #64	; 0x40
 8008c98:	d86f      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008c9a:	2b30      	cmp	r3, #48	; 0x30
 8008c9c:	d064      	beq.n	8008d68 <HAL_TIM_ConfigClockSource+0x156>
 8008c9e:	2b30      	cmp	r3, #48	; 0x30
 8008ca0:	d86b      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d060      	beq.n	8008d68 <HAL_TIM_ConfigClockSource+0x156>
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d867      	bhi.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d05c      	beq.n	8008d68 <HAL_TIM_ConfigClockSource+0x156>
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d05a      	beq.n	8008d68 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008cb2:	e062      	b.n	8008d7a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	6899      	ldr	r1, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f000 f9ac 	bl	8009020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	609a      	str	r2, [r3, #8]
      break;
 8008ce0:	e04e      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6899      	ldr	r1, [r3, #8]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f000 f995 	bl	8009020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d04:	609a      	str	r2, [r3, #8]
      break;
 8008d06:	e03b      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	6859      	ldr	r1, [r3, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	461a      	mov	r2, r3
 8008d16:	f000 f909 	bl	8008f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2150      	movs	r1, #80	; 0x50
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f962 	bl	8008fea <TIM_ITRx_SetConfig>
      break;
 8008d26:	e02b      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	6859      	ldr	r1, [r3, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	461a      	mov	r2, r3
 8008d36:	f000 f928 	bl	8008f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2160      	movs	r1, #96	; 0x60
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f952 	bl	8008fea <TIM_ITRx_SetConfig>
      break;
 8008d46:	e01b      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	6859      	ldr	r1, [r3, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f000 f8e9 	bl	8008f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2140      	movs	r1, #64	; 0x40
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f942 	bl	8008fea <TIM_ITRx_SetConfig>
      break;
 8008d66:	e00b      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f000 f939 	bl	8008fea <TIM_ITRx_SetConfig>
      break;
 8008d78:	e002      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
	...

08008dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <TIM_Base_SetConfig+0x114>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d013      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0a:	d00f      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a3d      	ldr	r2, [pc, #244]	; (8008f04 <TIM_Base_SetConfig+0x118>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3c      	ldr	r2, [pc, #240]	; (8008f08 <TIM_Base_SetConfig+0x11c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3b      	ldr	r2, [pc, #236]	; (8008f0c <TIM_Base_SetConfig+0x120>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a3a      	ldr	r2, [pc, #232]	; (8008f10 <TIM_Base_SetConfig+0x124>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d108      	bne.n	8008e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a2f      	ldr	r2, [pc, #188]	; (8008f00 <TIM_Base_SetConfig+0x114>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d02b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4c:	d027      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a2c      	ldr	r2, [pc, #176]	; (8008f04 <TIM_Base_SetConfig+0x118>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d023      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2b      	ldr	r2, [pc, #172]	; (8008f08 <TIM_Base_SetConfig+0x11c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01f      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a2a      	ldr	r2, [pc, #168]	; (8008f0c <TIM_Base_SetConfig+0x120>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a29      	ldr	r2, [pc, #164]	; (8008f10 <TIM_Base_SetConfig+0x124>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d017      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a28      	ldr	r2, [pc, #160]	; (8008f14 <TIM_Base_SetConfig+0x128>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <TIM_Base_SetConfig+0x12c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00f      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a26      	ldr	r2, [pc, #152]	; (8008f1c <TIM_Base_SetConfig+0x130>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a25      	ldr	r2, [pc, #148]	; (8008f20 <TIM_Base_SetConfig+0x134>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d007      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a24      	ldr	r2, [pc, #144]	; (8008f24 <TIM_Base_SetConfig+0x138>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a23      	ldr	r2, [pc, #140]	; (8008f28 <TIM_Base_SetConfig+0x13c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d108      	bne.n	8008eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <TIM_Base_SetConfig+0x114>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_Base_SetConfig+0xf8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a0c      	ldr	r2, [pc, #48]	; (8008f10 <TIM_Base_SetConfig+0x124>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d103      	bne.n	8008eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691a      	ldr	r2, [r3, #16]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	40000c00 	.word	0x40000c00
 8008f10:	40010400 	.word	0x40010400
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800
 8008f20:	40001800 	.word	0x40001800
 8008f24:	40001c00 	.word	0x40001c00
 8008f28:	40002000 	.word	0x40002000

08008f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f023 0201 	bic.w	r2, r3, #1
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 030a 	bic.w	r3, r3, #10
 8008f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	621a      	str	r2, [r3, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0210 	bic.w	r2, r3, #16
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	031b      	lsls	r3, r3, #12
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	621a      	str	r2, [r3, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	f043 0307 	orr.w	r3, r3, #7
 800900c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	609a      	str	r2, [r3, #8]
}
 8009014:	bf00      	nop
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800903a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	021a      	lsls	r2, r3, #8
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	431a      	orrs	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4313      	orrs	r3, r2
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	4313      	orrs	r3, r2
 800904c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	609a      	str	r2, [r3, #8]
}
 8009054:	bf00      	nop
 8009056:	371c      	adds	r7, #28
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009074:	2302      	movs	r3, #2
 8009076:	e05a      	b.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a21      	ldr	r2, [pc, #132]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d022      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d01d      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1d      	ldr	r2, [pc, #116]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d018      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1a      	ldr	r2, [pc, #104]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00e      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a18      	ldr	r2, [pc, #96]	; (800914c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a17      	ldr	r2, [pc, #92]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d004      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a15      	ldr	r2, [pc, #84]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d10c      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4313      	orrs	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40010000 	.word	0x40010000
 8009140:	40000400 	.word	0x40000400
 8009144:	40000800 	.word	0x40000800
 8009148:	40000c00 	.word	0x40000c00
 800914c:	40010400 	.word	0x40010400
 8009150:	40014000 	.word	0x40014000
 8009154:	40001800 	.word	0x40001800

08009158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e03f      	b.n	8009212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f9 fb7a 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	; 0x24
 80091b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fb4b 	bl	8009860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b088      	sub	sp, #32
 800921e:	af02      	add	r7, sp, #8
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b20      	cmp	r3, #32
 8009238:	f040 8083 	bne.w	8009342 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_UART_Transmit+0x2e>
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e07b      	b.n	8009344 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UART_Transmit+0x40>
 8009256:	2302      	movs	r3, #2
 8009258:	e074      	b.n	8009344 <HAL_UART_Transmit+0x12a>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2221      	movs	r2, #33	; 0x21
 800926c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009270:	f7fb f868 	bl	8004344 <HAL_GetTick>
 8009274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	88fa      	ldrh	r2, [r7, #6]
 800927a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800928a:	e042      	b.n	8009312 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a2:	d122      	bne.n	80092ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2180      	movs	r1, #128	; 0x80
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f96a 	bl	8009588 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e042      	b.n	8009344 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3302      	adds	r3, #2
 80092de:	60bb      	str	r3, [r7, #8]
 80092e0:	e017      	b.n	8009312 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
 80092e8:	e013      	b.n	8009312 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	; 0x80
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f947 	bl	8009588 <UART_WaitOnFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e01f      	b.n	8009344 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	60ba      	str	r2, [r7, #8]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1b7      	bne.n	800928c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2200      	movs	r2, #0
 8009324:	2140      	movs	r1, #64	; 0x40
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f92e 	bl	8009588 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e006      	b.n	8009344 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e000      	b.n	8009344 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
  }
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800936c:	2300      	movs	r3, #0
 800936e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d008      	beq.n	800939e <HAL_UART_IRQHandler+0x52>
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f9e0 	bl	800975c <UART_Receive_IT>
      return;
 800939c:	e0d0      	b.n	8009540 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80b0 	beq.w	8009506 <HAL_UART_IRQHandler+0x1ba>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d105      	bne.n	80093bc <HAL_UART_IRQHandler+0x70>
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 80a5 	beq.w	8009506 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <HAL_UART_IRQHandler+0x90>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d4:	f043 0201 	orr.w	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <HAL_UART_IRQHandler+0xb0>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f4:	f043 0202 	orr.w	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <HAL_UART_IRQHandler+0xd0>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009414:	f043 0204 	orr.w	r2, r3, #4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <HAL_UART_IRQHandler+0xfa>
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <HAL_UART_IRQHandler+0xee>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d005      	beq.n	8009446 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943e:	f043 0208 	orr.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d077      	beq.n	800953e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <HAL_UART_IRQHandler+0x11c>
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f97a 	bl	800975c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	bf0c      	ite	eq
 8009476:	2301      	moveq	r3, #1
 8009478:	2300      	movne	r3, #0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <HAL_UART_IRQHandler+0x144>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d031      	beq.n	80094f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f8c3 	bl	800961c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d123      	bne.n	80094ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d013      	beq.n	80094e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c0:	4a21      	ldr	r2, [pc, #132]	; (8009548 <HAL_UART_IRQHandler+0x1fc>)
 80094c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fb f959 	bl	8004780 <HAL_DMA_Abort_IT>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d016      	beq.n	8009502 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094de:	4610      	mov	r0, r2
 80094e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e2:	e00e      	b.n	8009502 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f845 	bl	8009574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ea:	e00a      	b.n	8009502 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f841 	bl	8009574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f2:	e006      	b.n	8009502 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f83d 	bl	8009574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009500:	e01d      	b.n	800953e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009502:	bf00      	nop
    return;
 8009504:	e01b      	b.n	800953e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_UART_IRQHandler+0x1d6>
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f8b0 	bl	8009680 <UART_Transmit_IT>
    return;
 8009520:	e00e      	b.n	8009540 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <HAL_UART_IRQHandler+0x1f4>
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f8f8 	bl	800972c <UART_EndTransmit_IT>
    return;
 800953c:	e000      	b.n	8009540 <HAL_UART_IRQHandler+0x1f4>
    return;
 800953e:	bf00      	nop
  }
}
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	08009659 	.word	0x08009659

0800954c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	4613      	mov	r3, r2
 8009596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009598:	e02c      	b.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d028      	beq.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095a8:	f7fa fecc 	bl	8004344 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d21d      	bcs.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0201 	bic.w	r2, r2, #1
 80095d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e00f      	b.n	8009614 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4013      	ands	r3, r2
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	429a      	cmp	r2, r3
 8009602:	bf0c      	ite	eq
 8009604:	2301      	moveq	r3, #1
 8009606:	2300      	movne	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	429a      	cmp	r2, r3
 8009610:	d0c3      	beq.n	800959a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009632:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695a      	ldr	r2, [r3, #20]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff ff7e 	bl	8009574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b21      	cmp	r3, #33	; 0x21
 8009692:	d144      	bne.n	800971e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	d11a      	bne.n	80096d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d105      	bne.n	80096c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	1c9a      	adds	r2, r3, #2
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	621a      	str	r2, [r3, #32]
 80096c6:	e00e      	b.n	80096e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	621a      	str	r2, [r3, #32]
 80096d2:	e008      	b.n	80096e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	1c59      	adds	r1, r3, #1
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6211      	str	r1, [r2, #32]
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	4619      	mov	r1, r3
 80096f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10f      	bne.n	800971a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009708:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009718:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e000      	b.n	8009720 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800971e:	2302      	movs	r3, #2
  }
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009742:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff fefd 	bl	800954c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b22      	cmp	r3, #34	; 0x22
 800976e:	d171      	bne.n	8009854 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009778:	d123      	bne.n	80097c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10e      	bne.n	80097a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	b29b      	uxth	r3, r3
 8009790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	1c9a      	adds	r2, r3, #2
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	629a      	str	r2, [r3, #40]	; 0x28
 80097a4:	e029      	b.n	80097fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	629a      	str	r2, [r3, #40]	; 0x28
 80097c0:	e01b      	b.n	80097fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6858      	ldr	r0, [r3, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	1c59      	adds	r1, r3, #1
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6291      	str	r1, [r2, #40]	; 0x28
 80097da:	b2c2      	uxtb	r2, r0
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	e00c      	b.n	80097fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	1c58      	adds	r0, r3, #1
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	6288      	str	r0, [r1, #40]	; 0x28
 80097f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fe:	b29b      	uxth	r3, r3
 8009800:	3b01      	subs	r3, #1
 8009802:	b29b      	uxth	r3, r3
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4619      	mov	r1, r3
 8009808:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800980a:	2b00      	cmp	r3, #0
 800980c:	d120      	bne.n	8009850 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0220 	bic.w	r2, r2, #32
 800981c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800982c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695a      	ldr	r2, [r3, #20]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0201 	bic.w	r2, r2, #1
 800983c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff fe8a 	bl	8009560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	e002      	b.n	8009856 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009854:	2302      	movs	r3, #2
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	b0bd      	sub	sp, #244	; 0xf4
 8009866:	af00      	add	r7, sp, #0
 8009868:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987c:	68d9      	ldr	r1, [r3, #12]
 800987e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	ea40 0301 	orr.w	r3, r0, r1
 8009888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	431a      	orrs	r2, r3
 8009898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	431a      	orrs	r2, r3
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80098ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098b8:	f021 010c 	bic.w	r1, r1, #12
 80098bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80098c6:	430b      	orrs	r3, r1
 80098c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	6999      	ldr	r1, [r3, #24]
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	ea40 0301 	orr.w	r3, r0, r1
 80098e6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f2:	f040 81a5 	bne.w	8009c40 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	4bcd      	ldr	r3, [pc, #820]	; (8009c34 <UART_SetConfig+0x3d4>)
 80098fe:	429a      	cmp	r2, r3
 8009900:	d006      	beq.n	8009910 <UART_SetConfig+0xb0>
 8009902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	4bcb      	ldr	r3, [pc, #812]	; (8009c38 <UART_SetConfig+0x3d8>)
 800990a:	429a      	cmp	r2, r3
 800990c:	f040 80cb 	bne.w	8009aa6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009910:	f7fe f81a 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
 8009914:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800991c:	461c      	mov	r4, r3
 800991e:	f04f 0500 	mov.w	r5, #0
 8009922:	4622      	mov	r2, r4
 8009924:	462b      	mov	r3, r5
 8009926:	1891      	adds	r1, r2, r2
 8009928:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800992c:	415b      	adcs	r3, r3
 800992e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009932:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009936:	1912      	adds	r2, r2, r4
 8009938:	eb45 0303 	adc.w	r3, r5, r3
 800993c:	f04f 0000 	mov.w	r0, #0
 8009940:	f04f 0100 	mov.w	r1, #0
 8009944:	00d9      	lsls	r1, r3, #3
 8009946:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800994a:	00d0      	lsls	r0, r2, #3
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	1911      	adds	r1, r2, r4
 8009952:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009956:	416b      	adcs	r3, r5
 8009958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	461a      	mov	r2, r3
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	1891      	adds	r1, r2, r2
 800996a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800996e:	415b      	adcs	r3, r3
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009974:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009978:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800997c:	f7f7 f944 	bl	8000c08 <__aeabi_uldivmod>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4bad      	ldr	r3, [pc, #692]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009986:	fba3 2302 	umull	r2, r3, r3, r2
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	011e      	lsls	r6, r3, #4
 800998e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009992:	461c      	mov	r4, r3
 8009994:	f04f 0500 	mov.w	r5, #0
 8009998:	4622      	mov	r2, r4
 800999a:	462b      	mov	r3, r5
 800999c:	1891      	adds	r1, r2, r2
 800999e:	67b9      	str	r1, [r7, #120]	; 0x78
 80099a0:	415b      	adcs	r3, r3
 80099a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099a4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80099a8:	1912      	adds	r2, r2, r4
 80099aa:	eb45 0303 	adc.w	r3, r5, r3
 80099ae:	f04f 0000 	mov.w	r0, #0
 80099b2:	f04f 0100 	mov.w	r1, #0
 80099b6:	00d9      	lsls	r1, r3, #3
 80099b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099bc:	00d0      	lsls	r0, r2, #3
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	1911      	adds	r1, r2, r4
 80099c4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80099c8:	416b      	adcs	r3, r5
 80099ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	461a      	mov	r2, r3
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	1891      	adds	r1, r2, r2
 80099dc:	6739      	str	r1, [r7, #112]	; 0x70
 80099de:	415b      	adcs	r3, r3
 80099e0:	677b      	str	r3, [r7, #116]	; 0x74
 80099e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80099e6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80099ea:	f7f7 f90d 	bl	8000c08 <__aeabi_uldivmod>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4b92      	ldr	r3, [pc, #584]	; (8009c3c <UART_SetConfig+0x3dc>)
 80099f4:	fba3 1302 	umull	r1, r3, r3, r2
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	2164      	movs	r1, #100	; 0x64
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	3332      	adds	r3, #50	; 0x32
 8009a06:	4a8d      	ldr	r2, [pc, #564]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009a08:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a14:	441e      	add	r6, r3
 8009a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f04f 0100 	mov.w	r1, #0
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	1894      	adds	r4, r2, r2
 8009a26:	66bc      	str	r4, [r7, #104]	; 0x68
 8009a28:	415b      	adcs	r3, r3
 8009a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009a30:	1812      	adds	r2, r2, r0
 8009a32:	eb41 0303 	adc.w	r3, r1, r3
 8009a36:	f04f 0400 	mov.w	r4, #0
 8009a3a:	f04f 0500 	mov.w	r5, #0
 8009a3e:	00dd      	lsls	r5, r3, #3
 8009a40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a44:	00d4      	lsls	r4, r2, #3
 8009a46:	4622      	mov	r2, r4
 8009a48:	462b      	mov	r3, r5
 8009a4a:	1814      	adds	r4, r2, r0
 8009a4c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009a50:	414b      	adcs	r3, r1
 8009a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f04f 0300 	mov.w	r3, #0
 8009a62:	1891      	adds	r1, r2, r2
 8009a64:	6639      	str	r1, [r7, #96]	; 0x60
 8009a66:	415b      	adcs	r3, r3
 8009a68:	667b      	str	r3, [r7, #100]	; 0x64
 8009a6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a72:	f7f7 f8c9 	bl	8000c08 <__aeabi_uldivmod>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4b70      	ldr	r3, [pc, #448]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a80:	095b      	lsrs	r3, r3, #5
 8009a82:	2164      	movs	r1, #100	; 0x64
 8009a84:	fb01 f303 	mul.w	r3, r1, r3
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	3332      	adds	r3, #50	; 0x32
 8009a8e:	4a6b      	ldr	r2, [pc, #428]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009a90:	fba2 2303 	umull	r2, r3, r2, r3
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	f003 0207 	and.w	r2, r3, #7
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4432      	add	r2, r6
 8009aa2:	609a      	str	r2, [r3, #8]
 8009aa4:	e26d      	b.n	8009f82 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aa6:	f7fd ff3b 	bl	8007920 <HAL_RCC_GetPCLK1Freq>
 8009aaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009aae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ab2:	461c      	mov	r4, r3
 8009ab4:	f04f 0500 	mov.w	r5, #0
 8009ab8:	4622      	mov	r2, r4
 8009aba:	462b      	mov	r3, r5
 8009abc:	1891      	adds	r1, r2, r2
 8009abe:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ac0:	415b      	adcs	r3, r3
 8009ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ac8:	1912      	adds	r2, r2, r4
 8009aca:	eb45 0303 	adc.w	r3, r5, r3
 8009ace:	f04f 0000 	mov.w	r0, #0
 8009ad2:	f04f 0100 	mov.w	r1, #0
 8009ad6:	00d9      	lsls	r1, r3, #3
 8009ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009adc:	00d0      	lsls	r0, r2, #3
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	1911      	adds	r1, r2, r4
 8009ae4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009ae8:	416b      	adcs	r3, r5
 8009aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	461a      	mov	r2, r3
 8009af6:	f04f 0300 	mov.w	r3, #0
 8009afa:	1891      	adds	r1, r2, r2
 8009afc:	6539      	str	r1, [r7, #80]	; 0x50
 8009afe:	415b      	adcs	r3, r3
 8009b00:	657b      	str	r3, [r7, #84]	; 0x54
 8009b02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009b0a:	f7f7 f87d 	bl	8000c08 <__aeabi_uldivmod>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4b4a      	ldr	r3, [pc, #296]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009b14:	fba3 2302 	umull	r2, r3, r3, r2
 8009b18:	095b      	lsrs	r3, r3, #5
 8009b1a:	011e      	lsls	r6, r3, #4
 8009b1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b20:	461c      	mov	r4, r3
 8009b22:	f04f 0500 	mov.w	r5, #0
 8009b26:	4622      	mov	r2, r4
 8009b28:	462b      	mov	r3, r5
 8009b2a:	1891      	adds	r1, r2, r2
 8009b2c:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b2e:	415b      	adcs	r3, r3
 8009b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b36:	1912      	adds	r2, r2, r4
 8009b38:	eb45 0303 	adc.w	r3, r5, r3
 8009b3c:	f04f 0000 	mov.w	r0, #0
 8009b40:	f04f 0100 	mov.w	r1, #0
 8009b44:	00d9      	lsls	r1, r3, #3
 8009b46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b4a:	00d0      	lsls	r0, r2, #3
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	1911      	adds	r1, r2, r4
 8009b52:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009b56:	416b      	adcs	r3, r5
 8009b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	1891      	adds	r1, r2, r2
 8009b6a:	6439      	str	r1, [r7, #64]	; 0x40
 8009b6c:	415b      	adcs	r3, r3
 8009b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009b78:	f7f7 f846 	bl	8000c08 <__aeabi_uldivmod>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4b2e      	ldr	r3, [pc, #184]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009b82:	fba3 1302 	umull	r1, r3, r3, r2
 8009b86:	095b      	lsrs	r3, r3, #5
 8009b88:	2164      	movs	r1, #100	; 0x64
 8009b8a:	fb01 f303 	mul.w	r3, r1, r3
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	3332      	adds	r3, #50	; 0x32
 8009b94:	4a29      	ldr	r2, [pc, #164]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009b96:	fba2 2303 	umull	r2, r3, r2, r3
 8009b9a:	095b      	lsrs	r3, r3, #5
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ba2:	441e      	add	r6, r3
 8009ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f04f 0100 	mov.w	r1, #0
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	1894      	adds	r4, r2, r2
 8009bb4:	63bc      	str	r4, [r7, #56]	; 0x38
 8009bb6:	415b      	adcs	r3, r3
 8009bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bbe:	1812      	adds	r2, r2, r0
 8009bc0:	eb41 0303 	adc.w	r3, r1, r3
 8009bc4:	f04f 0400 	mov.w	r4, #0
 8009bc8:	f04f 0500 	mov.w	r5, #0
 8009bcc:	00dd      	lsls	r5, r3, #3
 8009bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bd2:	00d4      	lsls	r4, r2, #3
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	1814      	adds	r4, r2, r0
 8009bda:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009bde:	414b      	adcs	r3, r1
 8009be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	1891      	adds	r1, r2, r2
 8009bf2:	6339      	str	r1, [r7, #48]	; 0x30
 8009bf4:	415b      	adcs	r3, r3
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bfc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c00:	f7f7 f802 	bl	8000c08 <__aeabi_uldivmod>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	2164      	movs	r1, #100	; 0x64
 8009c12:	fb01 f303 	mul.w	r3, r1, r3
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	3332      	adds	r3, #50	; 0x32
 8009c1c:	4a07      	ldr	r2, [pc, #28]	; (8009c3c <UART_SetConfig+0x3dc>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	095b      	lsrs	r3, r3, #5
 8009c24:	f003 0207 	and.w	r2, r3, #7
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4432      	add	r2, r6
 8009c30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009c32:	e1a6      	b.n	8009f82 <UART_SetConfig+0x722>
 8009c34:	40011000 	.word	0x40011000
 8009c38:	40011400 	.word	0x40011400
 8009c3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4bd1      	ldr	r3, [pc, #836]	; (8009f8c <UART_SetConfig+0x72c>)
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d006      	beq.n	8009c5a <UART_SetConfig+0x3fa>
 8009c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4bcf      	ldr	r3, [pc, #828]	; (8009f90 <UART_SetConfig+0x730>)
 8009c54:	429a      	cmp	r2, r3
 8009c56:	f040 80ca 	bne.w	8009dee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c5a:	f7fd fe75 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
 8009c5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c66:	461c      	mov	r4, r3
 8009c68:	f04f 0500 	mov.w	r5, #0
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	1891      	adds	r1, r2, r2
 8009c72:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c74:	415b      	adcs	r3, r3
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c7c:	1912      	adds	r2, r2, r4
 8009c7e:	eb45 0303 	adc.w	r3, r5, r3
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f04f 0100 	mov.w	r1, #0
 8009c8a:	00d9      	lsls	r1, r3, #3
 8009c8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c90:	00d0      	lsls	r0, r2, #3
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	eb12 0a04 	adds.w	sl, r2, r4
 8009c9a:	eb43 0b05 	adc.w	fp, r3, r5
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	008b      	lsls	r3, r1, #2
 8009cb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cb8:	0082      	lsls	r2, r0, #2
 8009cba:	4650      	mov	r0, sl
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	f7f6 ffa3 	bl	8000c08 <__aeabi_uldivmod>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4bb3      	ldr	r3, [pc, #716]	; (8009f94 <UART_SetConfig+0x734>)
 8009cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	011e      	lsls	r6, r3, #4
 8009cd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f04f 0100 	mov.w	r1, #0
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	1894      	adds	r4, r2, r2
 8009ce0:	623c      	str	r4, [r7, #32]
 8009ce2:	415b      	adcs	r3, r3
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cea:	1812      	adds	r2, r2, r0
 8009cec:	eb41 0303 	adc.w	r3, r1, r3
 8009cf0:	f04f 0400 	mov.w	r4, #0
 8009cf4:	f04f 0500 	mov.w	r5, #0
 8009cf8:	00dd      	lsls	r5, r3, #3
 8009cfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009cfe:	00d4      	lsls	r4, r2, #3
 8009d00:	4622      	mov	r2, r4
 8009d02:	462b      	mov	r3, r5
 8009d04:	1814      	adds	r4, r2, r0
 8009d06:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009d0a:	414b      	adcs	r3, r1
 8009d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f04f 0100 	mov.w	r1, #0
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	008b      	lsls	r3, r1, #2
 8009d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d2a:	0082      	lsls	r2, r0, #2
 8009d2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009d30:	f7f6 ff6a 	bl	8000c08 <__aeabi_uldivmod>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4b96      	ldr	r3, [pc, #600]	; (8009f94 <UART_SetConfig+0x734>)
 8009d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	2164      	movs	r1, #100	; 0x64
 8009d42:	fb01 f303 	mul.w	r3, r1, r3
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	3332      	adds	r3, #50	; 0x32
 8009d4c:	4a91      	ldr	r2, [pc, #580]	; (8009f94 <UART_SetConfig+0x734>)
 8009d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d58:	441e      	add	r6, r3
 8009d5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f04f 0100 	mov.w	r1, #0
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	1894      	adds	r4, r2, r2
 8009d6a:	61bc      	str	r4, [r7, #24]
 8009d6c:	415b      	adcs	r3, r3
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d74:	1812      	adds	r2, r2, r0
 8009d76:	eb41 0303 	adc.w	r3, r1, r3
 8009d7a:	f04f 0400 	mov.w	r4, #0
 8009d7e:	f04f 0500 	mov.w	r5, #0
 8009d82:	00dd      	lsls	r5, r3, #3
 8009d84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d88:	00d4      	lsls	r4, r2, #3
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	1814      	adds	r4, r2, r0
 8009d90:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009d94:	414b      	adcs	r3, r1
 8009d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f04f 0100 	mov.w	r1, #0
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	f04f 0300 	mov.w	r3, #0
 8009dae:	008b      	lsls	r3, r1, #2
 8009db0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009db4:	0082      	lsls	r2, r0, #2
 8009db6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009dba:	f7f6 ff25 	bl	8000c08 <__aeabi_uldivmod>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4b74      	ldr	r3, [pc, #464]	; (8009f94 <UART_SetConfig+0x734>)
 8009dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8009dc8:	095b      	lsrs	r3, r3, #5
 8009dca:	2164      	movs	r1, #100	; 0x64
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	3332      	adds	r3, #50	; 0x32
 8009dd6:	4a6f      	ldr	r2, [pc, #444]	; (8009f94 <UART_SetConfig+0x734>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	095b      	lsrs	r3, r3, #5
 8009dde:	f003 020f 	and.w	r2, r3, #15
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4432      	add	r2, r6
 8009dea:	609a      	str	r2, [r3, #8]
 8009dec:	e0c9      	b.n	8009f82 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dee:	f7fd fd97 	bl	8007920 <HAL_RCC_GetPCLK1Freq>
 8009df2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009df6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009dfa:	461c      	mov	r4, r3
 8009dfc:	f04f 0500 	mov.w	r5, #0
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	1891      	adds	r1, r2, r2
 8009e06:	6139      	str	r1, [r7, #16]
 8009e08:	415b      	adcs	r3, r3
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e10:	1912      	adds	r2, r2, r4
 8009e12:	eb45 0303 	adc.w	r3, r5, r3
 8009e16:	f04f 0000 	mov.w	r0, #0
 8009e1a:	f04f 0100 	mov.w	r1, #0
 8009e1e:	00d9      	lsls	r1, r3, #3
 8009e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e24:	00d0      	lsls	r0, r2, #3
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	eb12 0804 	adds.w	r8, r2, r4
 8009e2e:	eb43 0905 	adc.w	r9, r3, r5
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f04f 0100 	mov.w	r1, #0
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	008b      	lsls	r3, r1, #2
 8009e48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e4c:	0082      	lsls	r2, r0, #2
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fed9 	bl	8000c08 <__aeabi_uldivmod>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4b4e      	ldr	r3, [pc, #312]	; (8009f94 <UART_SetConfig+0x734>)
 8009e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	011e      	lsls	r6, r3, #4
 8009e64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f04f 0100 	mov.w	r1, #0
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	1894      	adds	r4, r2, r2
 8009e74:	60bc      	str	r4, [r7, #8]
 8009e76:	415b      	adcs	r3, r3
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e7e:	1812      	adds	r2, r2, r0
 8009e80:	eb41 0303 	adc.w	r3, r1, r3
 8009e84:	f04f 0400 	mov.w	r4, #0
 8009e88:	f04f 0500 	mov.w	r5, #0
 8009e8c:	00dd      	lsls	r5, r3, #3
 8009e8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e92:	00d4      	lsls	r4, r2, #3
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	1814      	adds	r4, r2, r0
 8009e9a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009e9e:	414b      	adcs	r3, r1
 8009ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f04f 0100 	mov.w	r1, #0
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	008b      	lsls	r3, r1, #2
 8009eba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ebe:	0082      	lsls	r2, r0, #2
 8009ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ec4:	f7f6 fea0 	bl	8000c08 <__aeabi_uldivmod>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4b31      	ldr	r3, [pc, #196]	; (8009f94 <UART_SetConfig+0x734>)
 8009ece:	fba3 1302 	umull	r1, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	2164      	movs	r1, #100	; 0x64
 8009ed6:	fb01 f303 	mul.w	r3, r1, r3
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	3332      	adds	r3, #50	; 0x32
 8009ee0:	4a2c      	ldr	r2, [pc, #176]	; (8009f94 <UART_SetConfig+0x734>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eec:	441e      	add	r6, r3
 8009eee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f04f 0100 	mov.w	r1, #0
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	1894      	adds	r4, r2, r2
 8009efe:	603c      	str	r4, [r7, #0]
 8009f00:	415b      	adcs	r3, r3
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f08:	1812      	adds	r2, r2, r0
 8009f0a:	eb41 0303 	adc.w	r3, r1, r3
 8009f0e:	f04f 0400 	mov.w	r4, #0
 8009f12:	f04f 0500 	mov.w	r5, #0
 8009f16:	00dd      	lsls	r5, r3, #3
 8009f18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f1c:	00d4      	lsls	r4, r2, #3
 8009f1e:	4622      	mov	r2, r4
 8009f20:	462b      	mov	r3, r5
 8009f22:	1814      	adds	r4, r2, r0
 8009f24:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009f28:	414b      	adcs	r3, r1
 8009f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f04f 0100 	mov.w	r1, #0
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	008b      	lsls	r3, r1, #2
 8009f44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f48:	0082      	lsls	r2, r0, #2
 8009f4a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009f4e:	f7f6 fe5b 	bl	8000c08 <__aeabi_uldivmod>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <UART_SetConfig+0x734>)
 8009f58:	fba3 1302 	umull	r1, r3, r3, r2
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	2164      	movs	r1, #100	; 0x64
 8009f60:	fb01 f303 	mul.w	r3, r1, r3
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	3332      	adds	r3, #50	; 0x32
 8009f6a:	4a0a      	ldr	r2, [pc, #40]	; (8009f94 <UART_SetConfig+0x734>)
 8009f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	f003 020f 	and.w	r2, r3, #15
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4432      	add	r2, r6
 8009f7e:	609a      	str	r2, [r3, #8]
}
 8009f80:	e7ff      	b.n	8009f82 <UART_SetConfig+0x722>
 8009f82:	bf00      	nop
 8009f84:	37f4      	adds	r7, #244	; 0xf4
 8009f86:	46bd      	mov	sp, r7
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	40011000 	.word	0x40011000
 8009f90:	40011400 	.word	0x40011400
 8009f94:	51eb851f 	.word	0x51eb851f

08009f98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d029      	beq.n	800a006 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009fbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fc2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fcc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009fd2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009fd8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009fde:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009fe4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009fea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009ff0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8009ff6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e034      	b.n	800a070 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a012:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a01c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a022:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a03a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a044:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a04a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a050:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a056:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a05c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	4313      	orrs	r3, r2
 800a062:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a07e:	b480      	push	{r7}
 800a080:	b087      	sub	sp, #28
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d02e      	beq.n	800a0f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a0b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a0be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a0c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a0d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a0dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	609a      	str	r2, [r3, #8]
 800a0f4:	e03b      	b.n	800a16e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a106:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	3b01      	subs	r3, #1
 800a116:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a118:	4313      	orrs	r3, r2
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a12c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	3b01      	subs	r3, #1
 800a13a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a13c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	3b01      	subs	r3, #1
 800a144:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a146:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a150:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	3b01      	subs	r3, #1
 800a158:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a15a:	4313      	orrs	r3, r2
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a198:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a1a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a1b4:	f7fa f8c6 	bl	8004344 <HAL_GetTick>
 800a1b8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a1ba:	e010      	b.n	800a1de <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d00c      	beq.n	800a1de <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <FMC_SDRAM_SendCommand+0x5e>
 800a1ca:	f7fa f8bb 	bl	8004344 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d201      	bcs.n	800a1de <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e006      	b.n	800a1ec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d0e8      	beq.n	800a1bc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695a      	ldr	r2, [r3, #20]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f103 0208 	add.w	r2, r3, #8
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f103 0208 	add.w	r2, r3, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0208 	add.w	r2, r3, #8
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	601a      	str	r2, [r3, #0]
}
 800a2b0:	bf00      	nop
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d103      	bne.n	800a2dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	e00c      	b.n	800a2f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e002      	b.n	800a2ea <vListInsert+0x2e>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d2f6      	bcs.n	800a2e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	601a      	str	r2, [r3, #0]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6892      	ldr	r2, [r2, #8]
 800a344:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6852      	ldr	r2, [r2, #4]
 800a34e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d103      	bne.n	800a362 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3aa:	bf00      	nop
 800a3ac:	e7fe      	b.n	800a3ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3ae:	f002 fa59 	bl	800c864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	441a      	add	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	68f9      	ldr	r1, [r7, #12]
 800a3e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3e4:	fb01 f303 	mul.w	r3, r1, r3
 800a3e8:	441a      	add	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	22ff      	movs	r2, #255	; 0xff
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	22ff      	movs	r2, #255	; 0xff
 800a3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d114      	bne.n	800a42e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01a      	beq.n	800a442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3310      	adds	r3, #16
 800a410:	4618      	mov	r0, r3
 800a412:	f001 fa15 	bl	800b840 <xTaskRemoveFromEventList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d012      	beq.n	800a442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a41c:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <xQueueGenericReset+0xcc>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e009      	b.n	800a442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3310      	adds	r3, #16
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fef1 	bl	800a21a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3324      	adds	r3, #36	; 0x24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff feec 	bl	800a21a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a442:	f002 fa3f 	bl	800c8c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a446:	2301      	movs	r3, #1
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	613b      	str	r3, [r7, #16]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a484:	2300      	movs	r3, #0
 800a486:	61fb      	str	r3, [r7, #28]
 800a488:	e004      	b.n	800a494 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	3350      	adds	r3, #80	; 0x50
 800a498:	4618      	mov	r0, r3
 800a49a:	f002 fb05 	bl	800caa8 <pvPortMalloc>
 800a49e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00d      	beq.n	800a4c2 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	3350      	adds	r3, #80	; 0x50
 800a4ae:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4b0:	79fa      	ldrb	r2, [r7, #7]
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f805 	bl	800a4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	e002      	b.n	800a4ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	69b8      	ldr	r0, [r7, #24]
 800a4fe:	f7ff ff41 	bl	800a384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a532:	2300      	movs	r3, #0
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f81d 	bl	800a578 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4603      	mov	r3, r0
 800a54e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6939      	ldr	r1, [r7, #16]
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7ff ff78 	bl	800a454 <xQueueGenericCreate>
 800a564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff ffd3 	bl	800a512 <prvInitialiseMutex>

		return xNewQueue;
 800a56c:	68fb      	ldr	r3, [r7, #12]
	}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08e      	sub	sp, #56	; 0x38
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <xQueueGenericSend+0x32>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <xQueueGenericSend+0x40>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <xQueueGenericSend+0x44>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <xQueueGenericSend+0x46>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <xQueueGenericSend+0x60>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d103      	bne.n	800a5e6 <xQueueGenericSend+0x6e>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <xQueueGenericSend+0x72>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <xQueueGenericSend+0x74>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <xQueueGenericSend+0x8e>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	623b      	str	r3, [r7, #32]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a606:	f001 fab7 	bl	800bb78 <xTaskGetSchedulerState>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <xQueueGenericSend+0x9e>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <xQueueGenericSend+0xa2>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <xQueueGenericSend+0xa4>
 800a61a:	2300      	movs	r3, #0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <xQueueGenericSend+0xbe>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	61fb      	str	r3, [r7, #28]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a636:	f002 f915 	bl	800c864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	429a      	cmp	r2, r3
 800a644:	d302      	bcc.n	800a64c <xQueueGenericSend+0xd4>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d129      	bne.n	800a6a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a652:	f000 fb2b 	bl	800acac <prvCopyDataToQueue>
 800a656:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d010      	beq.n	800a682 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	3324      	adds	r3, #36	; 0x24
 800a664:	4618      	mov	r0, r3
 800a666:	f001 f8eb 	bl	800b840 <xTaskRemoveFromEventList>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d013      	beq.n	800a698 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a670:	4b3f      	ldr	r3, [pc, #252]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	e00a      	b.n	800a698 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a688:	4b39      	ldr	r3, [pc, #228]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a698:	f002 f914 	bl	800c8c4 <vPortExitCritical>
				return pdPASS;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e063      	b.n	800a768 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d103      	bne.n	800a6ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6a6:	f002 f90d 	bl	800c8c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e05c      	b.n	800a768 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d106      	bne.n	800a6c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6b4:	f107 0314 	add.w	r3, r7, #20
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 f923 	bl	800b904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6c2:	f002 f8ff 	bl	800c8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6c6:	f000 fe83 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ca:	f002 f8cb 	bl	800c864 <vPortEnterCritical>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	d103      	bne.n	800a6e4 <xQueueGenericSend+0x16c>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ea:	b25b      	sxtb	r3, r3
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d103      	bne.n	800a6fa <xQueueGenericSend+0x182>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6fa:	f002 f8e3 	bl	800c8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6fe:	1d3a      	adds	r2, r7, #4
 800a700:	f107 0314 	add.w	r3, r7, #20
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f001 f912 	bl	800b930 <xTaskCheckForTimeOut>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d124      	bne.n	800a75c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a714:	f000 fbc2 	bl	800ae9c <prvIsQueueFull>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d018      	beq.n	800a750 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	3310      	adds	r3, #16
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f001 f83a 	bl	800b7a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a72c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a72e:	f000 fb4d 	bl	800adcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a732:	f000 fe5b 	bl	800b3ec <xTaskResumeAll>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f47f af7c 	bne.w	800a636 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	e772      	b.n	800a636 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fb3b 	bl	800adcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a756:	f000 fe49 	bl	800b3ec <xTaskResumeAll>
 800a75a:	e76c      	b.n	800a636 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a75e:	f000 fb35 	bl	800adcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a762:	f000 fe43 	bl	800b3ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3738      	adds	r7, #56	; 0x38
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08e      	sub	sp, #56	; 0x38
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d103      	bne.n	800a7b0 <xQueueGenericSendFromISR+0x3c>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <xQueueGenericSendFromISR+0x40>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <xQueueGenericSendFromISR+0x42>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	623b      	str	r3, [r7, #32]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d103      	bne.n	800a7de <xQueueGenericSendFromISR+0x6a>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <xQueueGenericSendFromISR+0x6e>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <xQueueGenericSendFromISR+0x70>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61fb      	str	r3, [r7, #28]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7fe:	f002 f913 	bl	800ca28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a802:	f3ef 8211 	mrs	r2, BASEPRI
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61ba      	str	r2, [r7, #24]
 800a818:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a81a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <xQueueGenericSendFromISR+0xbc>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d12c      	bne.n	800a88a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a840:	f000 fa34 	bl	800acac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a844:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d112      	bne.n	800a874 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d016      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fff0 	bl	800b840 <xTaskRemoveFromEventList>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00e      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e007      	b.n	800a884 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a878:	3301      	adds	r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	b25a      	sxtb	r2, r3
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a884:	2301      	movs	r3, #1
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a888:	e001      	b.n	800a88e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a898:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3738      	adds	r7, #56	; 0x38
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	; 0x30
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <xQueueReceive+0x30>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	623b      	str	r3, [r7, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <xQueueReceive+0x3e>
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <xQueueReceive+0x42>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueReceive+0x44>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueReceive+0x5e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	61fb      	str	r3, [r7, #28]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a902:	f001 f939 	bl	800bb78 <xTaskGetSchedulerState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xQueueReceive+0x6e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xQueueReceive+0x72>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <xQueueReceive+0x74>
 800a916:	2300      	movs	r3, #0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <xQueueReceive+0x8e>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	61bb      	str	r3, [r7, #24]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a932:	f001 ff97 	bl	800c864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01f      	beq.n	800a982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a946:	f000 fa1b 	bl	800ad80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1e5a      	subs	r2, r3, #1
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	3310      	adds	r3, #16
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 ff6e 	bl	800b840 <xTaskRemoveFromEventList>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d007      	beq.n	800a97a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a96a:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <xQueueReceive+0x1bc>)
 800a96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a97a:	f001 ffa3 	bl	800c8c4 <vPortExitCritical>
				return pdPASS;
 800a97e:	2301      	movs	r3, #1
 800a980:	e069      	b.n	800aa56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a988:	f001 ff9c 	bl	800c8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e062      	b.n	800aa56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a996:	f107 0310 	add.w	r3, r7, #16
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 ffb2 	bl	800b904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a4:	f001 ff8e 	bl	800c8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a8:	f000 fd12 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ac:	f001 ff5a 	bl	800c864 <vPortEnterCritical>
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d103      	bne.n	800a9c6 <xQueueReceive+0x122>
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueReceive+0x138>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 ff72 	bl	800c8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e0:	1d3a      	adds	r2, r7, #4
 800a9e2:	f107 0310 	add.w	r3, r7, #16
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 ffa1 	bl	800b930 <xTaskCheckForTimeOut>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d123      	bne.n	800aa3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f6:	f000 fa3b 	bl	800ae70 <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d017      	beq.n	800aa30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	3324      	adds	r3, #36	; 0x24
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fec9 	bl	800b7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa10:	f000 f9dc 	bl	800adcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa14:	f000 fcea 	bl	800b3ec <xTaskResumeAll>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d189      	bne.n	800a932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa1e:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xQueueReceive+0x1bc>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e780      	b.n	800a932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa32:	f000 f9cb 	bl	800adcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa36:	f000 fcd9 	bl	800b3ec <xTaskResumeAll>
 800aa3a:	e77a      	b.n	800a932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f000 f9c5 	bl	800adcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa42:	f000 fcd3 	bl	800b3ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa48:	f000 fa12 	bl	800ae70 <prvIsQueueEmpty>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f43f af6f 	beq.w	800a932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3730      	adds	r7, #48	; 0x30
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08e      	sub	sp, #56	; 0x38
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	623b      	str	r3, [r7, #32]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	61fb      	str	r3, [r7, #28]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aab4:	f001 f860 	bl	800bb78 <xTaskGetSchedulerState>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d102      	bne.n	800aac4 <xQueueSemaphoreTake+0x60>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueSemaphoreTake+0x64>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <xQueueSemaphoreTake+0x66>
 800aac8:	2300      	movs	r3, #0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	61bb      	str	r3, [r7, #24]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae4:	f001 febe 	bl	800c864 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d024      	beq.n	800ab3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	1e5a      	subs	r2, r3, #1
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab04:	f001 f9f6 	bl	800bef4 <pvTaskIncrementMutexHeldCount>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00f      	beq.n	800ab36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	3310      	adds	r3, #16
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fe90 	bl	800b840 <xTaskRemoveFromEventList>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab26:	4b54      	ldr	r3, [pc, #336]	; (800ac78 <xQueueSemaphoreTake+0x214>)
 800ab28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab36:	f001 fec5 	bl	800c8c4 <vPortExitCritical>
				return pdPASS;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e097      	b.n	800ac6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d111      	bne.n	800ab68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	617b      	str	r3, [r7, #20]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab60:	f001 feb0 	bl	800c8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e082      	b.n	800ac6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab6e:	f107 030c 	add.w	r3, r7, #12
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fec6 	bl	800b904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab7c:	f001 fea2 	bl	800c8c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab80:	f000 fc26 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab84:	f001 fe6e 	bl	800c864 <vPortEnterCritical>
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab94:	d103      	bne.n	800ab9e <xQueueSemaphoreTake+0x13a>
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aba4:	b25b      	sxtb	r3, r3
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d103      	bne.n	800abb4 <xQueueSemaphoreTake+0x150>
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb4:	f001 fe86 	bl	800c8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abb8:	463a      	mov	r2, r7
 800abba:	f107 030c 	add.w	r3, r7, #12
 800abbe:	4611      	mov	r1, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 feb5 	bl	800b930 <xTaskCheckForTimeOut>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d132      	bne.n	800ac32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abce:	f000 f94f 	bl	800ae70 <prvIsQueueEmpty>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d026      	beq.n	800ac26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d109      	bne.n	800abf4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800abe0:	f001 fe40 	bl	800c864 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 ffe3 	bl	800bbb4 <xTaskPriorityInherit>
 800abee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abf0:	f001 fe68 	bl	800c8c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	3324      	adds	r3, #36	; 0x24
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 fdcf 	bl	800b7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac04:	f000 f8e2 	bl	800adcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac08:	f000 fbf0 	bl	800b3ec <xTaskResumeAll>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f47f af68 	bne.w	800aae4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <xQueueSemaphoreTake+0x214>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	e75e      	b.n	800aae4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac28:	f000 f8d0 	bl	800adcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2c:	f000 fbde 	bl	800b3ec <xTaskResumeAll>
 800ac30:	e758      	b.n	800aae4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac34:	f000 f8ca 	bl	800adcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac38:	f000 fbd8 	bl	800b3ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac3e:	f000 f917 	bl	800ae70 <prvIsQueueEmpty>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f43f af4d 	beq.w	800aae4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00d      	beq.n	800ac6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ac50:	f001 fe08 	bl	800c864 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac56:	f000 f811 	bl	800ac7c <prvGetDisinheritPriorityAfterTimeout>
 800ac5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 f8ac 	bl	800bdc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac68:	f001 fe2c 	bl	800c8c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3738      	adds	r7, #56	; 0x38
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	e000ed04 	.word	0xe000ed04

0800ac7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d006      	beq.n	800ac9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f1c3 0307 	rsb	r3, r3, #7
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	e001      	b.n	800ac9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
	}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10d      	bne.n	800ace6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d14d      	bne.n	800ad6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 ffec 	bl	800bcb4 <xTaskPriorityDisinherit>
 800acdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	609a      	str	r2, [r3, #8]
 800ace4:	e043      	b.n	800ad6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d119      	bne.n	800ad20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6858      	ldr	r0, [r3, #4]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf4:	461a      	mov	r2, r3
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	f003 faf4 	bl	800e2e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad04:	441a      	add	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d32b      	bcc.n	800ad6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	605a      	str	r2, [r3, #4]
 800ad1e:	e026      	b.n	800ad6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68d8      	ldr	r0, [r3, #12]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	461a      	mov	r2, r3
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	f003 fada 	bl	800e2e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	425b      	negs	r3, r3
 800ad3a:	441a      	add	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	68da      	ldr	r2, [r3, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d207      	bcs.n	800ad5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	689a      	ldr	r2, [r3, #8]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad54:	425b      	negs	r3, r3
 800ad56:	441a      	add	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d105      	bne.n	800ad6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad76:	697b      	ldr	r3, [r7, #20]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d018      	beq.n	800adc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	441a      	add	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d303      	bcc.n	800adb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68d9      	ldr	r1, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	461a      	mov	r2, r3
 800adbe:	6838      	ldr	r0, [r7, #0]
 800adc0:	f003 fa90 	bl	800e2e4 <memcpy>
	}
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800add4:	f001 fd46 	bl	800c864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ade0:	e011      	b.n	800ae06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d012      	beq.n	800ae10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3324      	adds	r3, #36	; 0x24
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 fd26 	bl	800b840 <xTaskRemoveFromEventList>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adfa:	f000 fdfb 	bl	800b9f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dce9      	bgt.n	800ade2 <prvUnlockQueue+0x16>
 800ae0e:	e000      	b.n	800ae12 <prvUnlockQueue+0x46>
					break;
 800ae10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	22ff      	movs	r2, #255	; 0xff
 800ae16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae1a:	f001 fd53 	bl	800c8c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae1e:	f001 fd21 	bl	800c864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae2a:	e011      	b.n	800ae50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3310      	adds	r3, #16
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fd01 	bl	800b840 <xTaskRemoveFromEventList>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae44:	f000 fdd6 	bl	800b9f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dce9      	bgt.n	800ae2c <prvUnlockQueue+0x60>
 800ae58:	e000      	b.n	800ae5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	22ff      	movs	r2, #255	; 0xff
 800ae60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae64:	f001 fd2e 	bl	800c8c4 <vPortExitCritical>
}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae78:	f001 fcf4 	bl	800c864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e001      	b.n	800ae8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae8e:	f001 fd19 	bl	800c8c4 <vPortExitCritical>

	return xReturn;
 800ae92:	68fb      	ldr	r3, [r7, #12]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aea4:	f001 fcde 	bl	800c864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d102      	bne.n	800aeba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	e001      	b.n	800aebe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aebe:	f001 fd01 	bl	800c8c4 <vPortExitCritical>

	return xReturn;
 800aec2:	68fb      	ldr	r3, [r7, #12]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed6:	2300      	movs	r3, #0
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e014      	b.n	800af06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aedc:	4a0f      	ldr	r2, [pc, #60]	; (800af1c <vQueueAddToRegistry+0x50>)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10b      	bne.n	800af00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aee8:	490c      	ldr	r1, [pc, #48]	; (800af1c <vQueueAddToRegistry+0x50>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aef2:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <vQueueAddToRegistry+0x50>)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	4413      	add	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aefe:	e006      	b.n	800af0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3301      	adds	r3, #1
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b0b      	cmp	r3, #11
 800af0a:	d9e7      	bls.n	800aedc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af0c:	bf00      	nop
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	2001fdf4 	.word	0x2001fdf4

0800af20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af30:	f001 fc98 	bl	800c864 <vPortEnterCritical>
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af40:	d103      	bne.n	800af4a <vQueueWaitForMessageRestricted+0x2a>
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af50:	b25b      	sxtb	r3, r3
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d103      	bne.n	800af60 <vQueueWaitForMessageRestricted+0x40>
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af60:	f001 fcb0 	bl	800c8c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	3324      	adds	r3, #36	; 0x24
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	4618      	mov	r0, r3
 800af76:	f000 fc37 	bl	800b7e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	f7ff ff26 	bl	800adcc <prvUnlockQueue>
	}
 800af80:	bf00      	nop
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af04      	add	r7, sp, #16
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	4613      	mov	r3, r2
 800af96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f001 fd83 	bl	800caa8 <pvPortMalloc>
 800afa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00e      	beq.n	800afc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afaa:	2064      	movs	r0, #100	; 0x64
 800afac:	f001 fd7c 	bl	800caa8 <pvPortMalloc>
 800afb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	631a      	str	r2, [r3, #48]	; 0x30
 800afbe:	e005      	b.n	800afcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afc0:	6978      	ldr	r0, [r7, #20]
 800afc2:	f001 fe35 	bl	800cc30 <vPortFree>
 800afc6:	e001      	b.n	800afcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d013      	beq.n	800affa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afd2:	88fa      	ldrh	r2, [r7, #6]
 800afd4:	2300      	movs	r3, #0
 800afd6:	9303      	str	r3, [sp, #12]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f80e 	bl	800b00a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afee:	69f8      	ldr	r0, [r7, #28]
 800aff0:	f000 f8a0 	bl	800b134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aff4:	2301      	movs	r3, #1
 800aff6:	61bb      	str	r3, [r7, #24]
 800aff8:	e002      	b.n	800b000 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800affa:	f04f 33ff 	mov.w	r3, #4294967295
 800affe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b000:	69bb      	ldr	r3, [r7, #24]
	}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b088      	sub	sp, #32
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	607a      	str	r2, [r7, #4]
 800b016:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	461a      	mov	r2, r3
 800b022:	21a5      	movs	r1, #165	; 0xa5
 800b024:	f003 f96c 	bl	800e300 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b032:	3b01      	subs	r3, #1
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	f023 0307 	bic.w	r3, r3, #7
 800b040:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	f003 0307 	and.w	r3, r3, #7
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00a      	beq.n	800b062 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	617b      	str	r3, [r7, #20]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d01f      	beq.n	800b0ae <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b06e:	2300      	movs	r3, #0
 800b070:	61fb      	str	r3, [r7, #28]
 800b072:	e012      	b.n	800b09a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	7819      	ldrb	r1, [r3, #0]
 800b07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4413      	add	r3, r2
 800b082:	3334      	adds	r3, #52	; 0x34
 800b084:	460a      	mov	r2, r1
 800b086:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d006      	beq.n	800b0a2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	3301      	adds	r3, #1
 800b098:	61fb      	str	r3, [r7, #28]
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	2b0f      	cmp	r3, #15
 800b09e:	d9e9      	bls.n	800b074 <prvInitialiseNewTask+0x6a>
 800b0a0:	e000      	b.n	800b0a4 <prvInitialiseNewTask+0x9a>
			{
				break;
 800b0a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0ac:	e003      	b.n	800b0b6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	2b06      	cmp	r3, #6
 800b0ba:	d901      	bls.n	800b0c0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0bc:	2306      	movs	r3, #6
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ca:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff f8bf 	bl	800a25a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	3318      	adds	r3, #24
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff f8ba 	bl	800a25a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	f1c3 0207 	rsb	r2, r3, #7
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	2200      	movs	r2, #0
 800b100:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	2200      	movs	r2, #0
 800b106:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	69b8      	ldr	r0, [r7, #24]
 800b116:	f001 fa79 	bl	800c60c <pxPortInitialiseStack>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b12a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12c:	bf00      	nop
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b13c:	f001 fb92 	bl	800c864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b140:	4b2c      	ldr	r3, [pc, #176]	; (800b1f4 <prvAddNewTaskToReadyList+0xc0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3301      	adds	r3, #1
 800b146:	4a2b      	ldr	r2, [pc, #172]	; (800b1f4 <prvAddNewTaskToReadyList+0xc0>)
 800b148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b14a:	4b2b      	ldr	r3, [pc, #172]	; (800b1f8 <prvAddNewTaskToReadyList+0xc4>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d109      	bne.n	800b166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b152:	4a29      	ldr	r2, [pc, #164]	; (800b1f8 <prvAddNewTaskToReadyList+0xc4>)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b158:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <prvAddNewTaskToReadyList+0xc0>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d110      	bne.n	800b182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b160:	f000 fc6c 	bl	800ba3c <prvInitialiseTaskLists>
 800b164:	e00d      	b.n	800b182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b166:	4b25      	ldr	r3, [pc, #148]	; (800b1fc <prvAddNewTaskToReadyList+0xc8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d109      	bne.n	800b182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b16e:	4b22      	ldr	r3, [pc, #136]	; (800b1f8 <prvAddNewTaskToReadyList+0xc4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	429a      	cmp	r2, r3
 800b17a:	d802      	bhi.n	800b182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b17c:	4a1e      	ldr	r2, [pc, #120]	; (800b1f8 <prvAddNewTaskToReadyList+0xc4>)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b182:	4b1f      	ldr	r3, [pc, #124]	; (800b200 <prvAddNewTaskToReadyList+0xcc>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3301      	adds	r3, #1
 800b188:	4a1d      	ldr	r2, [pc, #116]	; (800b200 <prvAddNewTaskToReadyList+0xcc>)
 800b18a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b18c:	4b1c      	ldr	r3, [pc, #112]	; (800b200 <prvAddNewTaskToReadyList+0xcc>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	2201      	movs	r2, #1
 800b19a:	409a      	lsls	r2, r3
 800b19c:	4b19      	ldr	r3, [pc, #100]	; (800b204 <prvAddNewTaskToReadyList+0xd0>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	4a18      	ldr	r2, [pc, #96]	; (800b204 <prvAddNewTaskToReadyList+0xd0>)
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4a15      	ldr	r2, [pc, #84]	; (800b208 <prvAddNewTaskToReadyList+0xd4>)
 800b1b4:	441a      	add	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4610      	mov	r0, r2
 800b1be:	f7ff f859 	bl	800a274 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1c2:	f001 fb7f 	bl	800c8c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <prvAddNewTaskToReadyList+0xc8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00e      	beq.n	800b1ec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <prvAddNewTaskToReadyList+0xc4>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d207      	bcs.n	800b1ec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <prvAddNewTaskToReadyList+0xd8>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20000504 	.word	0x20000504
 800b1f8:	20000404 	.word	0x20000404
 800b1fc:	20000510 	.word	0x20000510
 800b200:	20000520 	.word	0x20000520
 800b204:	2000050c 	.word	0x2000050c
 800b208:	20000408 	.word	0x20000408
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b218:	f001 fb24 	bl	800c864 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d102      	bne.n	800b228 <vTaskDelete+0x18>
 800b222:	4b39      	ldr	r3, [pc, #228]	; (800b308 <vTaskDelete+0xf8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	e000      	b.n	800b22a <vTaskDelete+0x1a>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3304      	adds	r3, #4
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff f87c 	bl	800a32e <uxListRemove>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d115      	bne.n	800b268 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4932      	ldr	r1, [pc, #200]	; (800b30c <vTaskDelete+0xfc>)
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <vTaskDelete+0x58>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	2201      	movs	r2, #1
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	43da      	mvns	r2, r3
 800b25e:	4b2c      	ldr	r3, [pc, #176]	; (800b310 <vTaskDelete+0x100>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4013      	ands	r3, r2
 800b264:	4a2a      	ldr	r2, [pc, #168]	; (800b310 <vTaskDelete+0x100>)
 800b266:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3318      	adds	r3, #24
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff f85a 	bl	800a32e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b27a:	4b26      	ldr	r3, [pc, #152]	; (800b314 <vTaskDelete+0x104>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3301      	adds	r3, #1
 800b280:	4a24      	ldr	r2, [pc, #144]	; (800b314 <vTaskDelete+0x104>)
 800b282:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b284:	4b20      	ldr	r3, [pc, #128]	; (800b308 <vTaskDelete+0xf8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10b      	bne.n	800b2a6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	4820      	ldr	r0, [pc, #128]	; (800b318 <vTaskDelete+0x108>)
 800b296:	f7fe ffed 	bl	800a274 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b29a:	4b20      	ldr	r3, [pc, #128]	; (800b31c <vTaskDelete+0x10c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <vTaskDelete+0x10c>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	e009      	b.n	800b2ba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b2a6:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <vTaskDelete+0x110>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	4a1c      	ldr	r2, [pc, #112]	; (800b320 <vTaskDelete+0x110>)
 800b2ae:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fc31 	bl	800bb18 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b2b6:	f000 fc3f 	bl	800bb38 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b2ba:	f001 fb03 	bl	800c8c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b2be:	4b19      	ldr	r3, [pc, #100]	; (800b324 <vTaskDelete+0x114>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01b      	beq.n	800b2fe <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <vTaskDelete+0xf8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d116      	bne.n	800b2fe <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b2d0:	4b15      	ldr	r3, [pc, #84]	; (800b328 <vTaskDelete+0x118>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <vTaskDelete+0xde>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60bb      	str	r3, [r7, #8]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <vTaskDelete+0x11c>)
 800b2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b2fe:	bf00      	nop
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20000404 	.word	0x20000404
 800b30c:	20000408 	.word	0x20000408
 800b310:	2000050c 	.word	0x2000050c
 800b314:	20000520 	.word	0x20000520
 800b318:	200004d8 	.word	0x200004d8
 800b31c:	200004ec 	.word	0x200004ec
 800b320:	20000504 	.word	0x20000504
 800b324:	20000510 	.word	0x20000510
 800b328:	2000052c 	.word	0x2000052c
 800b32c:	e000ed04 	.word	0xe000ed04

0800b330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b336:	4b20      	ldr	r3, [pc, #128]	; (800b3b8 <vTaskStartScheduler+0x88>)
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	2300      	movs	r3, #0
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2300      	movs	r3, #0
 800b340:	2280      	movs	r2, #128	; 0x80
 800b342:	491e      	ldr	r1, [pc, #120]	; (800b3bc <vTaskStartScheduler+0x8c>)
 800b344:	481e      	ldr	r0, [pc, #120]	; (800b3c0 <vTaskStartScheduler+0x90>)
 800b346:	f7ff fe1f 	bl	800af88 <xTaskCreate>
 800b34a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d102      	bne.n	800b358 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b352:	f000 fe49 	bl	800bfe8 <xTimerCreateTimerTask>
 800b356:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d118      	bne.n	800b390 <vTaskStartScheduler+0x60>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	60bb      	str	r3, [r7, #8]
}
 800b370:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b372:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <vTaskStartScheduler+0x94>)
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b37a:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <vTaskStartScheduler+0x98>)
 800b37c:	2201      	movs	r2, #1
 800b37e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b380:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <vTaskStartScheduler+0x9c>)
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b386:	f7f6 fa6f 	bl	8001868 <RTOS_AppConfigureTimerForRuntimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b38a:	f001 f9c9 	bl	800c720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b38e:	e00e      	b.n	800b3ae <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b396:	d10a      	bne.n	800b3ae <vTaskStartScheduler+0x7e>
	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	607b      	str	r3, [r7, #4]
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <vTaskStartScheduler+0x7c>
}
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000528 	.word	0x20000528
 800b3bc:	080123b4 	.word	0x080123b4
 800b3c0:	0800ba0d 	.word	0x0800ba0d
 800b3c4:	20000524 	.word	0x20000524
 800b3c8:	20000510 	.word	0x20000510
 800b3cc:	20000508 	.word	0x20000508

0800b3d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <vTaskSuspendAll+0x18>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a03      	ldr	r2, [pc, #12]	; (800b3e8 <vTaskSuspendAll+0x18>)
 800b3dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	2000052c 	.word	0x2000052c

0800b3ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3fa:	4b41      	ldr	r3, [pc, #260]	; (800b500 <xTaskResumeAll+0x114>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xTaskResumeAll+0x2c>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	603b      	str	r3, [r7, #0]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b418:	f001 fa24 	bl	800c864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b41c:	4b38      	ldr	r3, [pc, #224]	; (800b500 <xTaskResumeAll+0x114>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3b01      	subs	r3, #1
 800b422:	4a37      	ldr	r2, [pc, #220]	; (800b500 <xTaskResumeAll+0x114>)
 800b424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b426:	4b36      	ldr	r3, [pc, #216]	; (800b500 <xTaskResumeAll+0x114>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d161      	bne.n	800b4f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b42e:	4b35      	ldr	r3, [pc, #212]	; (800b504 <xTaskResumeAll+0x118>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d05d      	beq.n	800b4f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b436:	e02e      	b.n	800b496 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b438:	4b33      	ldr	r3, [pc, #204]	; (800b508 <xTaskResumeAll+0x11c>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3318      	adds	r3, #24
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe ff72 	bl	800a32e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe ff6d 	bl	800a32e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	2201      	movs	r2, #1
 800b45a:	409a      	lsls	r2, r3
 800b45c:	4b2b      	ldr	r3, [pc, #172]	; (800b50c <xTaskResumeAll+0x120>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4313      	orrs	r3, r2
 800b462:	4a2a      	ldr	r2, [pc, #168]	; (800b50c <xTaskResumeAll+0x120>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4a27      	ldr	r2, [pc, #156]	; (800b510 <xTaskResumeAll+0x124>)
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f7fe fef9 	bl	800a274 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b486:	4b23      	ldr	r3, [pc, #140]	; (800b514 <xTaskResumeAll+0x128>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d302      	bcc.n	800b496 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b490:	4b21      	ldr	r3, [pc, #132]	; (800b518 <xTaskResumeAll+0x12c>)
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b496:	4b1c      	ldr	r3, [pc, #112]	; (800b508 <xTaskResumeAll+0x11c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1cc      	bne.n	800b438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4a4:	f000 fb48 	bl	800bb38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b4a8:	4b1c      	ldr	r3, [pc, #112]	; (800b51c <xTaskResumeAll+0x130>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d010      	beq.n	800b4d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4b4:	f000 f846 	bl	800b544 <xTaskIncrementTick>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b4be:	4b16      	ldr	r3, [pc, #88]	; (800b518 <xTaskResumeAll+0x12c>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1f1      	bne.n	800b4b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b4d0:	4b12      	ldr	r3, [pc, #72]	; (800b51c <xTaskResumeAll+0x130>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <xTaskResumeAll+0x12c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d009      	beq.n	800b4f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <xTaskResumeAll+0x134>)
 800b4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f001 f9e7 	bl	800c8c4 <vPortExitCritical>

	return xAlreadyYielded;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	2000052c 	.word	0x2000052c
 800b504:	20000504 	.word	0x20000504
 800b508:	200004c4 	.word	0x200004c4
 800b50c:	2000050c 	.word	0x2000050c
 800b510:	20000408 	.word	0x20000408
 800b514:	20000404 	.word	0x20000404
 800b518:	20000518 	.word	0x20000518
 800b51c:	20000514 	.word	0x20000514
 800b520:	e000ed04 	.word	0xe000ed04

0800b524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b52a:	4b05      	ldr	r3, [pc, #20]	; (800b540 <xTaskGetTickCount+0x1c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b530:	687b      	ldr	r3, [r7, #4]
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000508 	.word	0x20000508

0800b544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b54e:	4b4e      	ldr	r3, [pc, #312]	; (800b688 <xTaskIncrementTick+0x144>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 8088 	bne.w	800b668 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b558:	4b4c      	ldr	r3, [pc, #304]	; (800b68c <xTaskIncrementTick+0x148>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b560:	4a4a      	ldr	r2, [pc, #296]	; (800b68c <xTaskIncrementTick+0x148>)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d120      	bne.n	800b5ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b56c:	4b48      	ldr	r3, [pc, #288]	; (800b690 <xTaskIncrementTick+0x14c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <xTaskIncrementTick+0x48>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	603b      	str	r3, [r7, #0]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <xTaskIncrementTick+0x46>
 800b58c:	4b40      	ldr	r3, [pc, #256]	; (800b690 <xTaskIncrementTick+0x14c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	4b40      	ldr	r3, [pc, #256]	; (800b694 <xTaskIncrementTick+0x150>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a3e      	ldr	r2, [pc, #248]	; (800b690 <xTaskIncrementTick+0x14c>)
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	4a3e      	ldr	r2, [pc, #248]	; (800b694 <xTaskIncrementTick+0x150>)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	4b3d      	ldr	r3, [pc, #244]	; (800b698 <xTaskIncrementTick+0x154>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	4a3c      	ldr	r2, [pc, #240]	; (800b698 <xTaskIncrementTick+0x154>)
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	f000 fac5 	bl	800bb38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5ae:	4b3b      	ldr	r3, [pc, #236]	; (800b69c <xTaskIncrementTick+0x158>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d348      	bcc.n	800b64a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b8:	4b35      	ldr	r3, [pc, #212]	; (800b690 <xTaskIncrementTick+0x14c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d104      	bne.n	800b5cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c2:	4b36      	ldr	r3, [pc, #216]	; (800b69c <xTaskIncrementTick+0x158>)
 800b5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c8:	601a      	str	r2, [r3, #0]
					break;
 800b5ca:	e03e      	b.n	800b64a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5cc:	4b30      	ldr	r3, [pc, #192]	; (800b690 <xTaskIncrementTick+0x14c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d203      	bcs.n	800b5ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5e4:	4a2d      	ldr	r2, [pc, #180]	; (800b69c <xTaskIncrementTick+0x158>)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5ea:	e02e      	b.n	800b64a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fe9c 	bl	800a32e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	3318      	adds	r3, #24
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fe93 	bl	800a32e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	2201      	movs	r2, #1
 800b60e:	409a      	lsls	r2, r3
 800b610:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <xTaskIncrementTick+0x15c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4313      	orrs	r3, r2
 800b616:	4a22      	ldr	r2, [pc, #136]	; (800b6a0 <xTaskIncrementTick+0x15c>)
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	4613      	mov	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4413      	add	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4a1f      	ldr	r2, [pc, #124]	; (800b6a4 <xTaskIncrementTick+0x160>)
 800b628:	441a      	add	r2, r3
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f7fe fe1f 	bl	800a274 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <xTaskIncrementTick+0x164>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	429a      	cmp	r2, r3
 800b642:	d3b9      	bcc.n	800b5b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b648:	e7b6      	b.n	800b5b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b64a:	4b17      	ldr	r3, [pc, #92]	; (800b6a8 <xTaskIncrementTick+0x164>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4914      	ldr	r1, [pc, #80]	; (800b6a4 <xTaskIncrementTick+0x160>)
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d907      	bls.n	800b672 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b662:	2301      	movs	r3, #1
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	e004      	b.n	800b672 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b668:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <xTaskIncrementTick+0x168>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3301      	adds	r3, #1
 800b66e:	4a0f      	ldr	r2, [pc, #60]	; (800b6ac <xTaskIncrementTick+0x168>)
 800b670:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b672:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <xTaskIncrementTick+0x16c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b67a:	2301      	movs	r3, #1
 800b67c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b67e:	697b      	ldr	r3, [r7, #20]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2000052c 	.word	0x2000052c
 800b68c:	20000508 	.word	0x20000508
 800b690:	200004bc 	.word	0x200004bc
 800b694:	200004c0 	.word	0x200004c0
 800b698:	2000051c 	.word	0x2000051c
 800b69c:	20000524 	.word	0x20000524
 800b6a0:	2000050c 	.word	0x2000050c
 800b6a4:	20000408 	.word	0x20000408
 800b6a8:	20000404 	.word	0x20000404
 800b6ac:	20000514 	.word	0x20000514
 800b6b0:	20000518 	.word	0x20000518

0800b6b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6ba:	4b32      	ldr	r3, [pc, #200]	; (800b784 <vTaskSwitchContext+0xd0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6c2:	4b31      	ldr	r3, [pc, #196]	; (800b788 <vTaskSwitchContext+0xd4>)
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6c8:	e058      	b.n	800b77c <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	; (800b788 <vTaskSwitchContext+0xd4>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b6d0:	f7f6 f8d8 	bl	8001884 <RTOS_AppGetRuntimeCounterValueFromISR>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	4a2d      	ldr	r2, [pc, #180]	; (800b78c <vTaskSwitchContext+0xd8>)
 800b6d8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b6da:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <vTaskSwitchContext+0xd8>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <vTaskSwitchContext+0xdc>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d909      	bls.n	800b6fa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b6e6:	4b2b      	ldr	r3, [pc, #172]	; (800b794 <vTaskSwitchContext+0xe0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b6ec:	4a27      	ldr	r2, [pc, #156]	; (800b78c <vTaskSwitchContext+0xd8>)
 800b6ee:	6810      	ldr	r0, [r2, #0]
 800b6f0:	4a27      	ldr	r2, [pc, #156]	; (800b790 <vTaskSwitchContext+0xdc>)
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	1a82      	subs	r2, r0, r2
 800b6f6:	440a      	add	r2, r1
 800b6f8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b6fa:	4b24      	ldr	r3, [pc, #144]	; (800b78c <vTaskSwitchContext+0xd8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a24      	ldr	r2, [pc, #144]	; (800b790 <vTaskSwitchContext+0xdc>)
 800b700:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b702:	4b25      	ldr	r3, [pc, #148]	; (800b798 <vTaskSwitchContext+0xe4>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	fab3 f383 	clz	r3, r3
 800b70e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	f1c3 031f 	rsb	r3, r3, #31
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	4920      	ldr	r1, [pc, #128]	; (800b79c <vTaskSwitchContext+0xe8>)
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <vTaskSwitchContext+0x8e>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	607b      	str	r3, [r7, #4]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <vTaskSwitchContext+0x8c>
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <vTaskSwitchContext+0xe8>)
 800b74e:	4413      	add	r3, r2
 800b750:	613b      	str	r3, [r7, #16]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	605a      	str	r2, [r3, #4]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	3308      	adds	r3, #8
 800b764:	429a      	cmp	r2, r3
 800b766:	d104      	bne.n	800b772 <vTaskSwitchContext+0xbe>
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	605a      	str	r2, [r3, #4]
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	4a06      	ldr	r2, [pc, #24]	; (800b794 <vTaskSwitchContext+0xe0>)
 800b77a:	6013      	str	r3, [r2, #0]
}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	2000052c 	.word	0x2000052c
 800b788:	20000518 	.word	0x20000518
 800b78c:	20000534 	.word	0x20000534
 800b790:	20000530 	.word	0x20000530
 800b794:	20000404 	.word	0x20000404
 800b798:	2000050c 	.word	0x2000050c
 800b79c:	20000408 	.word	0x20000408

0800b7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <vTaskPlaceOnEventList+0x44>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fe fd74 	bl	800a2bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6838      	ldr	r0, [r7, #0]
 800b7d8:	f000 fba0 	bl	800bf1c <prvAddCurrentTaskToDelayedList>
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20000404 	.word	0x20000404

0800b7e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	617b      	str	r3, [r7, #20]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b810:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <vTaskPlaceOnEventListRestricted+0x54>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3318      	adds	r3, #24
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7fe fd2b 	bl	800a274 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b824:	f04f 33ff 	mov.w	r3, #4294967295
 800b828:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	68b8      	ldr	r0, [r7, #8]
 800b82e:	f000 fb75 	bl	800bf1c <prvAddCurrentTaskToDelayedList>
	}
 800b832:	bf00      	nop
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000404 	.word	0x20000404

0800b840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	3318      	adds	r3, #24
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fd5c 	bl	800a32e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <xTaskRemoveFromEventList+0xac>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d11c      	bne.n	800b8b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	3304      	adds	r3, #4
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fd53 	bl	800a32e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	2201      	movs	r2, #1
 800b88e:	409a      	lsls	r2, r3
 800b890:	4b17      	ldr	r3, [pc, #92]	; (800b8f0 <xTaskRemoveFromEventList+0xb0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4313      	orrs	r3, r2
 800b896:	4a16      	ldr	r2, [pc, #88]	; (800b8f0 <xTaskRemoveFromEventList+0xb0>)
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4a13      	ldr	r2, [pc, #76]	; (800b8f4 <xTaskRemoveFromEventList+0xb4>)
 800b8a8:	441a      	add	r2, r3
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fe fcdf 	bl	800a274 <vListInsertEnd>
 800b8b6:	e005      	b.n	800b8c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	3318      	adds	r3, #24
 800b8bc:	4619      	mov	r1, r3
 800b8be:	480e      	ldr	r0, [pc, #56]	; (800b8f8 <xTaskRemoveFromEventList+0xb8>)
 800b8c0:	f7fe fcd8 	bl	800a274 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <xTaskRemoveFromEventList+0xbc>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d905      	bls.n	800b8de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8d6:	4b0a      	ldr	r3, [pc, #40]	; (800b900 <xTaskRemoveFromEventList+0xc0>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	e001      	b.n	800b8e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8e2:	697b      	ldr	r3, [r7, #20]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000052c 	.word	0x2000052c
 800b8f0:	2000050c 	.word	0x2000050c
 800b8f4:	20000408 	.word	0x20000408
 800b8f8:	200004c4 	.word	0x200004c4
 800b8fc:	20000404 	.word	0x20000404
 800b900:	20000518 	.word	0x20000518

0800b904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b90c:	4b06      	ldr	r3, [pc, #24]	; (800b928 <vTaskInternalSetTimeOutState+0x24>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b914:	4b05      	ldr	r3, [pc, #20]	; (800b92c <vTaskInternalSetTimeOutState+0x28>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	605a      	str	r2, [r3, #4]
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	2000051c 	.word	0x2000051c
 800b92c:	20000508 	.word	0x20000508

0800b930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	613b      	str	r3, [r7, #16]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60fb      	str	r3, [r7, #12]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b972:	f000 ff77 	bl	800c864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b976:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <xTaskCheckForTimeOut+0xbc>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d102      	bne.n	800b996 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]
 800b994:	e023      	b.n	800b9de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	4b15      	ldr	r3, [pc, #84]	; (800b9f0 <xTaskCheckForTimeOut+0xc0>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d007      	beq.n	800b9b2 <xTaskCheckForTimeOut+0x82>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d302      	bcc.n	800b9b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	e015      	b.n	800b9de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d20b      	bcs.n	800b9d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	1ad2      	subs	r2, r2, r3
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff ff9b 	bl	800b904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	61fb      	str	r3, [r7, #28]
 800b9d2:	e004      	b.n	800b9de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9de:	f000 ff71 	bl	800c8c4 <vPortExitCritical>

	return xReturn;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20000508 	.word	0x20000508
 800b9f0:	2000051c 	.word	0x2000051c

0800b9f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9f8:	4b03      	ldr	r3, [pc, #12]	; (800ba08 <vTaskMissedYield+0x14>)
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]
}
 800b9fe:	bf00      	nop
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20000518 	.word	0x20000518

0800ba0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba14:	f000 f852 	bl	800babc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba18:	4b06      	ldr	r3, [pc, #24]	; (800ba34 <prvIdleTask+0x28>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d9f9      	bls.n	800ba14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba20:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <prvIdleTask+0x2c>)
 800ba22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba30:	e7f0      	b.n	800ba14 <prvIdleTask+0x8>
 800ba32:	bf00      	nop
 800ba34:	20000408 	.word	0x20000408
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba42:	2300      	movs	r3, #0
 800ba44:	607b      	str	r3, [r7, #4]
 800ba46:	e00c      	b.n	800ba62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4a12      	ldr	r2, [pc, #72]	; (800ba9c <prvInitialiseTaskLists+0x60>)
 800ba54:	4413      	add	r3, r2
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fbdf 	bl	800a21a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b06      	cmp	r3, #6
 800ba66:	d9ef      	bls.n	800ba48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba68:	480d      	ldr	r0, [pc, #52]	; (800baa0 <prvInitialiseTaskLists+0x64>)
 800ba6a:	f7fe fbd6 	bl	800a21a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba6e:	480d      	ldr	r0, [pc, #52]	; (800baa4 <prvInitialiseTaskLists+0x68>)
 800ba70:	f7fe fbd3 	bl	800a21a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba74:	480c      	ldr	r0, [pc, #48]	; (800baa8 <prvInitialiseTaskLists+0x6c>)
 800ba76:	f7fe fbd0 	bl	800a21a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba7a:	480c      	ldr	r0, [pc, #48]	; (800baac <prvInitialiseTaskLists+0x70>)
 800ba7c:	f7fe fbcd 	bl	800a21a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba80:	480b      	ldr	r0, [pc, #44]	; (800bab0 <prvInitialiseTaskLists+0x74>)
 800ba82:	f7fe fbca 	bl	800a21a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba86:	4b0b      	ldr	r3, [pc, #44]	; (800bab4 <prvInitialiseTaskLists+0x78>)
 800ba88:	4a05      	ldr	r2, [pc, #20]	; (800baa0 <prvInitialiseTaskLists+0x64>)
 800ba8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	; (800bab8 <prvInitialiseTaskLists+0x7c>)
 800ba8e:	4a05      	ldr	r2, [pc, #20]	; (800baa4 <prvInitialiseTaskLists+0x68>)
 800ba90:	601a      	str	r2, [r3, #0]
}
 800ba92:	bf00      	nop
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000408 	.word	0x20000408
 800baa0:	20000494 	.word	0x20000494
 800baa4:	200004a8 	.word	0x200004a8
 800baa8:	200004c4 	.word	0x200004c4
 800baac:	200004d8 	.word	0x200004d8
 800bab0:	200004f0 	.word	0x200004f0
 800bab4:	200004bc 	.word	0x200004bc
 800bab8:	200004c0 	.word	0x200004c0

0800babc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bac2:	e019      	b.n	800baf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac4:	f000 fece 	bl	800c864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac8:	4b10      	ldr	r3, [pc, #64]	; (800bb0c <prvCheckTasksWaitingTermination+0x50>)
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe fc2a 	bl	800a32e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bada:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <prvCheckTasksWaitingTermination+0x54>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3b01      	subs	r3, #1
 800bae0:	4a0b      	ldr	r2, [pc, #44]	; (800bb10 <prvCheckTasksWaitingTermination+0x54>)
 800bae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <prvCheckTasksWaitingTermination+0x58>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3b01      	subs	r3, #1
 800baea:	4a0a      	ldr	r2, [pc, #40]	; (800bb14 <prvCheckTasksWaitingTermination+0x58>)
 800baec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baee:	f000 fee9 	bl	800c8c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f810 	bl	800bb18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <prvCheckTasksWaitingTermination+0x58>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e1      	bne.n	800bac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	200004d8 	.word	0x200004d8
 800bb10:	20000504 	.word	0x20000504
 800bb14:	200004ec 	.word	0x200004ec

0800bb18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f883 	bl	800cc30 <vPortFree>
			vPortFree( pxTCB );
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 f880 	bl	800cc30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb3e:	4b0c      	ldr	r3, [pc, #48]	; (800bb70 <prvResetNextTaskUnblockTime+0x38>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d104      	bne.n	800bb52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb48:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <prvResetNextTaskUnblockTime+0x3c>)
 800bb4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb50:	e008      	b.n	800bb64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb52:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <prvResetNextTaskUnblockTime+0x38>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	4a04      	ldr	r2, [pc, #16]	; (800bb74 <prvResetNextTaskUnblockTime+0x3c>)
 800bb62:	6013      	str	r3, [r2, #0]
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	200004bc 	.word	0x200004bc
 800bb74:	20000524 	.word	0x20000524

0800bb78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb7e:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <xTaskGetSchedulerState+0x34>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb86:	2301      	movs	r3, #1
 800bb88:	607b      	str	r3, [r7, #4]
 800bb8a:	e008      	b.n	800bb9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8c:	4b08      	ldr	r3, [pc, #32]	; (800bbb0 <xTaskGetSchedulerState+0x38>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb94:	2302      	movs	r3, #2
 800bb96:	607b      	str	r3, [r7, #4]
 800bb98:	e001      	b.n	800bb9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb9e:	687b      	ldr	r3, [r7, #4]
	}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20000510 	.word	0x20000510
 800bbb0:	2000052c 	.word	0x2000052c

0800bbb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d069      	beq.n	800bc9e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbce:	4b36      	ldr	r3, [pc, #216]	; (800bca8 <xTaskPriorityInherit+0xf4>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d259      	bcs.n	800bc8c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	db06      	blt.n	800bbee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbe0:	4b31      	ldr	r3, [pc, #196]	; (800bca8 <xTaskPriorityInherit+0xf4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	f1c3 0207 	rsb	r2, r3, #7
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	6959      	ldr	r1, [r3, #20]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4a2b      	ldr	r2, [pc, #172]	; (800bcac <xTaskPriorityInherit+0xf8>)
 800bc00:	4413      	add	r3, r2
 800bc02:	4299      	cmp	r1, r3
 800bc04:	d13a      	bne.n	800bc7c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	3304      	adds	r3, #4
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fb8f 	bl	800a32e <uxListRemove>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d115      	bne.n	800bc42 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1a:	4924      	ldr	r1, [pc, #144]	; (800bcac <xTaskPriorityInherit+0xf8>)
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <xTaskPriorityInherit+0x8e>
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	2201      	movs	r2, #1
 800bc32:	fa02 f303 	lsl.w	r3, r2, r3
 800bc36:	43da      	mvns	r2, r3
 800bc38:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <xTaskPriorityInherit+0xfc>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	4a1c      	ldr	r2, [pc, #112]	; (800bcb0 <xTaskPriorityInherit+0xfc>)
 800bc40:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc42:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <xTaskPriorityInherit+0xf4>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	2201      	movs	r2, #1
 800bc52:	409a      	lsls	r2, r3
 800bc54:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <xTaskPriorityInherit+0xfc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <xTaskPriorityInherit+0xfc>)
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	4613      	mov	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4a10      	ldr	r2, [pc, #64]	; (800bcac <xTaskPriorityInherit+0xf8>)
 800bc6c:	441a      	add	r2, r3
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4619      	mov	r1, r3
 800bc74:	4610      	mov	r0, r2
 800bc76:	f7fe fafd 	bl	800a274 <vListInsertEnd>
 800bc7a:	e004      	b.n	800bc86 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <xTaskPriorityInherit+0xf4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e008      	b.n	800bc9e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <xTaskPriorityInherit+0xf4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d201      	bcs.n	800bc9e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
	}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000404 	.word	0x20000404
 800bcac:	20000408 	.word	0x20000408
 800bcb0:	2000050c 	.word	0x2000050c

0800bcb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d06e      	beq.n	800bda8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcca:	4b3a      	ldr	r3, [pc, #232]	; (800bdb4 <xTaskPriorityDisinherit+0x100>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d00a      	beq.n	800bcea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60fb      	str	r3, [r7, #12]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	60bb      	str	r3, [r7, #8]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d044      	beq.n	800bda8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d140      	bne.n	800bda8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe faff 	bl	800a32e <uxListRemove>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d115      	bne.n	800bd62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3a:	491f      	ldr	r1, [pc, #124]	; (800bdb8 <xTaskPriorityDisinherit+0x104>)
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	440b      	add	r3, r1
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xTaskPriorityDisinherit+0xae>
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	2201      	movs	r2, #1
 800bd52:	fa02 f303 	lsl.w	r3, r2, r3
 800bd56:	43da      	mvns	r2, r3
 800bd58:	4b18      	ldr	r3, [pc, #96]	; (800bdbc <xTaskPriorityDisinherit+0x108>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	4a17      	ldr	r2, [pc, #92]	; (800bdbc <xTaskPriorityDisinherit+0x108>)
 800bd60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6e:	f1c3 0207 	rsb	r2, r3, #7
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	409a      	lsls	r2, r3
 800bd7e:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <xTaskPriorityDisinherit+0x108>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <xTaskPriorityDisinherit+0x108>)
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4a08      	ldr	r2, [pc, #32]	; (800bdb8 <xTaskPriorityDisinherit+0x104>)
 800bd96:	441a      	add	r2, r3
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f7fe fa68 	bl	800a274 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bda4:	2301      	movs	r3, #1
 800bda6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bda8:	697b      	ldr	r3, [r7, #20]
	}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20000404 	.word	0x20000404
 800bdb8:	20000408 	.word	0x20000408
 800bdbc:	2000050c 	.word	0x2000050c

0800bdc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8083 	beq.w	800bee0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	60fb      	str	r3, [r7, #12]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d902      	bls.n	800be08 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	e002      	b.n	800be0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be12:	69fa      	ldr	r2, [r7, #28]
 800be14:	429a      	cmp	r2, r3
 800be16:	d063      	beq.n	800bee0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d15e      	bne.n	800bee0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be22:	4b31      	ldr	r3, [pc, #196]	; (800bee8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d10a      	bne.n	800be42 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60bb      	str	r3, [r7, #8]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be46:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	2b00      	cmp	r3, #0
 800be54:	db04      	blt.n	800be60 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	f1c3 0207 	rsb	r2, r3, #7
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	6959      	ldr	r1, [r3, #20]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	4613      	mov	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4a1f      	ldr	r2, [pc, #124]	; (800beec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800be70:	4413      	add	r3, r2
 800be72:	4299      	cmp	r1, r3
 800be74:	d134      	bne.n	800bee0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3304      	adds	r3, #4
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe fa57 	bl	800a32e <uxListRemove>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d115      	bne.n	800beb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8a:	4918      	ldr	r1, [pc, #96]	; (800beec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	2201      	movs	r2, #1
 800bea2:	fa02 f303 	lsl.w	r3, r2, r3
 800bea6:	43da      	mvns	r2, r3
 800bea8:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4013      	ands	r3, r2
 800beae:	4a10      	ldr	r2, [pc, #64]	; (800bef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800beb0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	2201      	movs	r2, #1
 800beb8:	409a      	lsls	r2, r3
 800beba:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	4a0b      	ldr	r2, [pc, #44]	; (800bef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4a06      	ldr	r2, [pc, #24]	; (800beec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bed2:	441a      	add	r2, r3
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7fe f9ca 	bl	800a274 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bee0:	bf00      	nop
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20000404 	.word	0x20000404
 800beec:	20000408 	.word	0x20000408
 800bef0:	2000050c 	.word	0x2000050c

0800bef4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bef4:	b480      	push	{r7}
 800bef6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bef8:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <pvTaskIncrementMutexHeldCount+0x24>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d004      	beq.n	800bf0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf00:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf06:	3201      	adds	r2, #1
 800bf08:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800bf0a:	4b03      	ldr	r3, [pc, #12]	; (800bf18 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
	}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	20000404 	.word	0x20000404

0800bf1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf26:	4b29      	ldr	r3, [pc, #164]	; (800bfcc <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf2c:	4b28      	ldr	r3, [pc, #160]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe f9fb 	bl	800a32e <uxListRemove>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10b      	bne.n	800bf56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf3e:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	2201      	movs	r2, #1
 800bf46:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4a:	43da      	mvns	r2, r3
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4013      	ands	r3, r2
 800bf52:	4a20      	ldr	r2, [pc, #128]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	d10a      	bne.n	800bf74 <prvAddCurrentTaskToDelayedList+0x58>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d007      	beq.n	800bf74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf64:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	481a      	ldr	r0, [pc, #104]	; (800bfd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf6e:	f7fe f981 	bl	800a274 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf72:	e026      	b.n	800bfc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4413      	add	r3, r2
 800bf7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf7c:	4b14      	ldr	r3, [pc, #80]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d209      	bcs.n	800bfa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf8c:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3304      	adds	r3, #4
 800bf96:	4619      	mov	r1, r3
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f7fe f98f 	bl	800a2bc <vListInsert>
}
 800bf9e:	e010      	b.n	800bfc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4610      	mov	r0, r2
 800bfae:	f7fe f985 	bl	800a2bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d202      	bcs.n	800bfc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bfbc:	4a09      	ldr	r2, [pc, #36]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6013      	str	r3, [r2, #0]
}
 800bfc2:	bf00      	nop
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000508 	.word	0x20000508
 800bfd0:	20000404 	.word	0x20000404
 800bfd4:	2000050c 	.word	0x2000050c
 800bfd8:	200004f0 	.word	0x200004f0
 800bfdc:	200004c0 	.word	0x200004c0
 800bfe0:	200004bc 	.word	0x200004bc
 800bfe4:	20000524 	.word	0x20000524

0800bfe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bff2:	f000 fad5 	bl	800c5a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bff6:	4b11      	ldr	r3, [pc, #68]	; (800c03c <xTimerCreateTimerTask+0x54>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <xTimerCreateTimerTask+0x58>)
 800c000:	9301      	str	r3, [sp, #4]
 800c002:	2307      	movs	r3, #7
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	2300      	movs	r3, #0
 800c008:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c00c:	490d      	ldr	r1, [pc, #52]	; (800c044 <xTimerCreateTimerTask+0x5c>)
 800c00e:	480e      	ldr	r0, [pc, #56]	; (800c048 <xTimerCreateTimerTask+0x60>)
 800c010:	f7fe ffba 	bl	800af88 <xTaskCreate>
 800c014:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	603b      	str	r3, [r7, #0]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800c032:	687b      	ldr	r3, [r7, #4]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20000568 	.word	0x20000568
 800c040:	2000056c 	.word	0x2000056c
 800c044:	080123f4 	.word	0x080123f4
 800c048:	0800c181 	.word	0x0800c181

0800c04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	; 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	623b      	str	r3, [r7, #32]
}
 800c076:	bf00      	nop
 800c078:	e7fe      	b.n	800c078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c07a:	4b1a      	ldr	r3, [pc, #104]	; (800c0e4 <xTimerGenericCommand+0x98>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d02a      	beq.n	800c0d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b05      	cmp	r3, #5
 800c092:	dc18      	bgt.n	800c0c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c094:	f7ff fd70 	bl	800bb78 <xTaskGetSchedulerState>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d109      	bne.n	800c0b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c09e:	4b11      	ldr	r3, [pc, #68]	; (800c0e4 <xTimerGenericCommand+0x98>)
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f107 0114 	add.w	r1, r7, #20
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0aa:	f7fe fa65 	bl	800a578 <xQueueGenericSend>
 800c0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800c0b0:	e012      	b.n	800c0d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0b2:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <xTimerGenericCommand+0x98>)
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	f107 0114 	add.w	r1, r7, #20
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f7fe fa5b 	bl	800a578 <xQueueGenericSend>
 800c0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800c0c4:	e008      	b.n	800c0d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0c6:	4b07      	ldr	r3, [pc, #28]	; (800c0e4 <xTimerGenericCommand+0x98>)
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	f107 0114 	add.w	r1, r7, #20
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	f7fe fb4f 	bl	800a774 <xQueueGenericSendFromISR>
 800c0d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3728      	adds	r7, #40	; 0x28
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20000568 	.word	0x20000568

0800c0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f2:	4b22      	ldr	r3, [pc, #136]	; (800c17c <prvProcessExpiredTimer+0x94>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe f914 	bl	800a32e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d022      	beq.n	800c15a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	699a      	ldr	r2, [r3, #24]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	18d1      	adds	r1, r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	6978      	ldr	r0, [r7, #20]
 800c122:	f000 f8d1 	bl	800c2c8 <prvInsertTimerInActiveList>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d01f      	beq.n	800c16c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c12c:	2300      	movs	r3, #0
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2300      	movs	r3, #0
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	2100      	movs	r1, #0
 800c136:	6978      	ldr	r0, [r7, #20]
 800c138:	f7ff ff88 	bl	800c04c <xTimerGenericCommand>
 800c13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d113      	bne.n	800c16c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	60fb      	str	r3, [r7, #12]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c160:	f023 0301 	bic.w	r3, r3, #1
 800c164:	b2da      	uxtb	r2, r3
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	6978      	ldr	r0, [r7, #20]
 800c172:	4798      	blx	r3
}
 800c174:	bf00      	nop
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20000560 	.word	0x20000560

0800c180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c188:	f107 0308 	add.w	r3, r7, #8
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 f857 	bl	800c240 <prvGetNextExpireTime>
 800c192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4619      	mov	r1, r3
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f803 	bl	800c1a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c19e:	f000 f8d5 	bl	800c34c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1a2:	e7f1      	b.n	800c188 <prvTimerTask+0x8>

0800c1a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1ae:	f7ff f90f 	bl	800b3d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1b2:	f107 0308 	add.w	r3, r7, #8
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f866 	bl	800c288 <prvSampleTimeNow>
 800c1bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d130      	bne.n	800c226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10a      	bne.n	800c1e0 <prvProcessTimerOrBlockTask+0x3c>
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d806      	bhi.n	800c1e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1d2:	f7ff f90b 	bl	800b3ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1d6:	68f9      	ldr	r1, [r7, #12]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff85 	bl	800c0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1de:	e024      	b.n	800c22a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d008      	beq.n	800c1f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1e6:	4b13      	ldr	r3, [pc, #76]	; (800c234 <prvProcessTimerOrBlockTask+0x90>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <prvProcessTimerOrBlockTask+0x50>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e000      	b.n	800c1f6 <prvProcessTimerOrBlockTask+0x52>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1f8:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <prvProcessTimerOrBlockTask+0x94>)
 800c1fa:	6818      	ldr	r0, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	4619      	mov	r1, r3
 800c206:	f7fe fe8b 	bl	800af20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c20a:	f7ff f8ef 	bl	800b3ec <xTaskResumeAll>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c214:	4b09      	ldr	r3, [pc, #36]	; (800c23c <prvProcessTimerOrBlockTask+0x98>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
}
 800c224:	e001      	b.n	800c22a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c226:	f7ff f8e1 	bl	800b3ec <xTaskResumeAll>
}
 800c22a:	bf00      	nop
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000564 	.word	0x20000564
 800c238:	20000568 	.word	0x20000568
 800c23c:	e000ed04 	.word	0xe000ed04

0800c240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c248:	4b0e      	ldr	r3, [pc, #56]	; (800c284 <prvGetNextExpireTime+0x44>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <prvGetNextExpireTime+0x16>
 800c252:	2201      	movs	r2, #1
 800c254:	e000      	b.n	800c258 <prvGetNextExpireTime+0x18>
 800c256:	2200      	movs	r2, #0
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c264:	4b07      	ldr	r3, [pc, #28]	; (800c284 <prvGetNextExpireTime+0x44>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	e001      	b.n	800c274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c274:	68fb      	ldr	r3, [r7, #12]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20000560 	.word	0x20000560

0800c288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c290:	f7ff f948 	bl	800b524 <xTaskGetTickCount>
 800c294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <prvSampleTimeNow+0x3c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d205      	bcs.n	800c2ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2a0:	f000 f91a 	bl	800c4d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	e002      	b.n	800c2b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2b2:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <prvSampleTimeNow+0x3c>)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20000570 	.word	0x20000570

0800c2c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d812      	bhi.n	800c314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	1ad2      	subs	r2, r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d302      	bcc.n	800c302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	e01b      	b.n	800c33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c302:	4b10      	ldr	r3, [pc, #64]	; (800c344 <prvInsertTimerInActiveList+0x7c>)
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3304      	adds	r3, #4
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f7fd ffd5 	bl	800a2bc <vListInsert>
 800c312:	e012      	b.n	800c33a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d206      	bcs.n	800c32a <prvInsertTimerInActiveList+0x62>
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	429a      	cmp	r2, r3
 800c322:	d302      	bcc.n	800c32a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c324:	2301      	movs	r3, #1
 800c326:	617b      	str	r3, [r7, #20]
 800c328:	e007      	b.n	800c33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c32a:	4b07      	ldr	r3, [pc, #28]	; (800c348 <prvInsertTimerInActiveList+0x80>)
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3304      	adds	r3, #4
 800c332:	4619      	mov	r1, r3
 800c334:	4610      	mov	r0, r2
 800c336:	f7fd ffc1 	bl	800a2bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c33a:	697b      	ldr	r3, [r7, #20]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3718      	adds	r7, #24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20000564 	.word	0x20000564
 800c348:	20000560 	.word	0x20000560

0800c34c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08c      	sub	sp, #48	; 0x30
 800c350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c352:	e0ae      	b.n	800c4b2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f2c0 80aa 	blt.w	800c4b0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	3304      	adds	r3, #4
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fd ffde 	bl	800a32e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c372:	1d3b      	adds	r3, r7, #4
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff ff87 	bl	800c288 <prvSampleTimeNow>
 800c37a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2b09      	cmp	r3, #9
 800c380:	f200 8097 	bhi.w	800c4b2 <prvProcessReceivedCommands+0x166>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <prvProcessReceivedCommands+0x40>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3b5 	.word	0x0800c3b5
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3b5 	.word	0x0800c3b5
 800c398:	0800c429 	.word	0x0800c429
 800c39c:	0800c43d 	.word	0x0800c43d
 800c3a0:	0800c487 	.word	0x0800c487
 800c3a4:	0800c3b5 	.word	0x0800c3b5
 800c3a8:	0800c3b5 	.word	0x0800c3b5
 800c3ac:	0800c429 	.word	0x0800c429
 800c3b0:	0800c43d 	.word	0x0800c43d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ba:	f043 0301 	orr.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	18d1      	adds	r1, r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6a3a      	ldr	r2, [r7, #32]
 800c3d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d4:	f7ff ff78 	bl	800c2c8 <prvInsertTimerInActiveList>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d069      	beq.n	800c4b2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05e      	beq.n	800c4b2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	441a      	add	r2, r3
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2300      	movs	r3, #0
 800c402:	2100      	movs	r1, #0
 800c404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c406:	f7ff fe21 	bl	800c04c <xTimerGenericCommand>
 800c40a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d14f      	bne.n	800c4b2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61bb      	str	r3, [r7, #24]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c42e:	f023 0301 	bic.w	r3, r3, #1
 800c432:	b2da      	uxtb	r2, r3
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c43a:	e03a      	b.n	800c4b2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c442:	f043 0301 	orr.w	r3, r3, #1
 800c446:	b2da      	uxtb	r2, r3
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	617b      	str	r3, [r7, #20]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	699a      	ldr	r2, [r3, #24]
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	18d1      	adds	r1, r2, r3
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	6a3a      	ldr	r2, [r7, #32]
 800c47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c480:	f7ff ff22 	bl	800c2c8 <prvInsertTimerInActiveList>
					break;
 800c484:	e015      	b.n	800c4b2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800c494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c496:	f000 fbcb 	bl	800cc30 <vPortFree>
 800c49a:	e00a      	b.n	800c4b2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a2:	f023 0301 	bic.w	r3, r3, #1
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4ae:	e000      	b.n	800c4b2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c4b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <prvProcessReceivedCommands+0x188>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f107 0108 	add.w	r1, r7, #8
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe f9f1 	bl	800a8a4 <xQueueReceive>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f47f af45 	bne.w	800c354 <prvProcessReceivedCommands+0x8>
	}
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	3728      	adds	r7, #40	; 0x28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	20000568 	.word	0x20000568

0800c4d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4de:	e048      	b.n	800c572 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4e0:	4b2d      	ldr	r3, [pc, #180]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ea:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	3304      	adds	r3, #4
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fd ff18 	bl	800a32e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b00      	cmp	r3, #0
 800c512:	d02e      	beq.n	800c572 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	429a      	cmp	r2, r3
 800c524:	d90e      	bls.n	800c544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c532:	4b19      	ldr	r3, [pc, #100]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	3304      	adds	r3, #4
 800c53a:	4619      	mov	r1, r3
 800c53c:	4610      	mov	r0, r2
 800c53e:	f7fd febd 	bl	800a2bc <vListInsert>
 800c542:	e016      	b.n	800c572 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c544:	2300      	movs	r3, #0
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	2300      	movs	r3, #0
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	2100      	movs	r1, #0
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fd7c 	bl	800c04c <xTimerGenericCommand>
 800c554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10a      	bne.n	800c572 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	603b      	str	r3, [r7, #0]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c572:	4b09      	ldr	r3, [pc, #36]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1b1      	bne.n	800c4e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c582:	4b06      	ldr	r3, [pc, #24]	; (800c59c <prvSwitchTimerLists+0xc4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a04      	ldr	r2, [pc, #16]	; (800c598 <prvSwitchTimerLists+0xc0>)
 800c588:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c58a:	4a04      	ldr	r2, [pc, #16]	; (800c59c <prvSwitchTimerLists+0xc4>)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6013      	str	r3, [r2, #0]
}
 800c590:	bf00      	nop
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20000560 	.word	0x20000560
 800c59c:	20000564 	.word	0x20000564

0800c5a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5a4:	f000 f95e 	bl	800c864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5a8:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <prvCheckForValidListAndQueue+0x54>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11d      	bne.n	800c5ec <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5b0:	4811      	ldr	r0, [pc, #68]	; (800c5f8 <prvCheckForValidListAndQueue+0x58>)
 800c5b2:	f7fd fe32 	bl	800a21a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5b6:	4811      	ldr	r0, [pc, #68]	; (800c5fc <prvCheckForValidListAndQueue+0x5c>)
 800c5b8:	f7fd fe2f 	bl	800a21a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5bc:	4b10      	ldr	r3, [pc, #64]	; (800c600 <prvCheckForValidListAndQueue+0x60>)
 800c5be:	4a0e      	ldr	r2, [pc, #56]	; (800c5f8 <prvCheckForValidListAndQueue+0x58>)
 800c5c0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5c2:	4b10      	ldr	r3, [pc, #64]	; (800c604 <prvCheckForValidListAndQueue+0x64>)
 800c5c4:	4a0d      	ldr	r2, [pc, #52]	; (800c5fc <prvCheckForValidListAndQueue+0x5c>)
 800c5c6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	210c      	movs	r1, #12
 800c5cc:	200a      	movs	r0, #10
 800c5ce:	f7fd ff41 	bl	800a454 <xQueueGenericCreate>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4a07      	ldr	r2, [pc, #28]	; (800c5f4 <prvCheckForValidListAndQueue+0x54>)
 800c5d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <prvCheckForValidListAndQueue+0x54>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d005      	beq.n	800c5ec <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <prvCheckForValidListAndQueue+0x54>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4908      	ldr	r1, [pc, #32]	; (800c608 <prvCheckForValidListAndQueue+0x68>)
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fc70 	bl	800aecc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5ec:	f000 f96a 	bl	800c8c4 <vPortExitCritical>
}
 800c5f0:	bf00      	nop
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20000568 	.word	0x20000568
 800c5f8:	20000538 	.word	0x20000538
 800c5fc:	2000054c 	.word	0x2000054c
 800c600:	20000560 	.word	0x20000560
 800c604:	20000564 	.word	0x20000564
 800c608:	080123fc 	.word	0x080123fc

0800c60c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3b04      	subs	r3, #4
 800c61c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b04      	subs	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f023 0201 	bic.w	r2, r3, #1
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3b04      	subs	r3, #4
 800c63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c63c:	4a0c      	ldr	r2, [pc, #48]	; (800c670 <pxPortInitialiseStack+0x64>)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3b14      	subs	r3, #20
 800c646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b04      	subs	r3, #4
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f06f 0202 	mvn.w	r2, #2
 800c65a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3b20      	subs	r3, #32
 800c660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	0800c675 	.word	0x0800c675

0800c674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c67e:	4b12      	ldr	r3, [pc, #72]	; (800c6c8 <prvTaskExitError+0x54>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c686:	d00a      	beq.n	800c69e <prvTaskExitError+0x2a>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <prvTaskExitError+0x28>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	60bb      	str	r3, [r7, #8]
}
 800c6b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6b2:	bf00      	nop
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0fc      	beq.n	800c6b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20000064 	.word	0x20000064
 800c6cc:	00000000 	.word	0x00000000

0800c6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <pxCurrentTCBConst2>)
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	6808      	ldr	r0, [r1, #0]
 800c6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	f380 8809 	msr	PSP, r0
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8811 	msr	BASEPRI, r0
 800c6ea:	4770      	bx	lr
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst2>:
 800c6f0:	20000404 	.word	0x20000404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6f8:	4808      	ldr	r0, [pc, #32]	; (800c71c <prvPortStartFirstTask+0x24>)
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f380 8808 	msr	MSP, r0
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8814 	msr	CONTROL, r0
 800c70a:	b662      	cpsie	i
 800c70c:	b661      	cpsie	f
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	df00      	svc	0
 800c718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c71a:	bf00      	nop
 800c71c:	e000ed08 	.word	0xe000ed08

0800c720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c726:	4b46      	ldr	r3, [pc, #280]	; (800c840 <xPortStartScheduler+0x120>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a46      	ldr	r2, [pc, #280]	; (800c844 <xPortStartScheduler+0x124>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10a      	bne.n	800c746 <xPortStartScheduler+0x26>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	e7fe      	b.n	800c744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c746:	4b3e      	ldr	r3, [pc, #248]	; (800c840 <xPortStartScheduler+0x120>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a3f      	ldr	r2, [pc, #252]	; (800c848 <xPortStartScheduler+0x128>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d10a      	bne.n	800c766 <xPortStartScheduler+0x46>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	60fb      	str	r3, [r7, #12]
}
 800c762:	bf00      	nop
 800c764:	e7fe      	b.n	800c764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c766:	4b39      	ldr	r3, [pc, #228]	; (800c84c <xPortStartScheduler+0x12c>)
 800c768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	22ff      	movs	r2, #255	; 0xff
 800c776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	4b31      	ldr	r3, [pc, #196]	; (800c850 <xPortStartScheduler+0x130>)
 800c78c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c78e:	4b31      	ldr	r3, [pc, #196]	; (800c854 <xPortStartScheduler+0x134>)
 800c790:	2207      	movs	r2, #7
 800c792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c794:	e009      	b.n	800c7aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c796:	4b2f      	ldr	r3, [pc, #188]	; (800c854 <xPortStartScheduler+0x134>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	4a2d      	ldr	r2, [pc, #180]	; (800c854 <xPortStartScheduler+0x134>)
 800c79e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7aa:	78fb      	ldrb	r3, [r7, #3]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b2:	2b80      	cmp	r3, #128	; 0x80
 800c7b4:	d0ef      	beq.n	800c796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7b6:	4b27      	ldr	r3, [pc, #156]	; (800c854 <xPortStartScheduler+0x134>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f1c3 0307 	rsb	r3, r3, #7
 800c7be:	2b04      	cmp	r3, #4
 800c7c0:	d00a      	beq.n	800c7d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60bb      	str	r3, [r7, #8]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7d8:	4b1e      	ldr	r3, [pc, #120]	; (800c854 <xPortStartScheduler+0x134>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	4a1d      	ldr	r2, [pc, #116]	; (800c854 <xPortStartScheduler+0x134>)
 800c7e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7e2:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <xPortStartScheduler+0x134>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7ea:	4a1a      	ldr	r2, [pc, #104]	; (800c854 <xPortStartScheduler+0x134>)
 800c7ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7f6:	4b18      	ldr	r3, [pc, #96]	; (800c858 <xPortStartScheduler+0x138>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a17      	ldr	r2, [pc, #92]	; (800c858 <xPortStartScheduler+0x138>)
 800c7fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c802:	4b15      	ldr	r3, [pc, #84]	; (800c858 <xPortStartScheduler+0x138>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a14      	ldr	r2, [pc, #80]	; (800c858 <xPortStartScheduler+0x138>)
 800c808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c80c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c80e:	f000 f8dd 	bl	800c9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c812:	4b12      	ldr	r3, [pc, #72]	; (800c85c <xPortStartScheduler+0x13c>)
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c818:	f000 f8fc 	bl	800ca14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c81c:	4b10      	ldr	r3, [pc, #64]	; (800c860 <xPortStartScheduler+0x140>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a0f      	ldr	r2, [pc, #60]	; (800c860 <xPortStartScheduler+0x140>)
 800c822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c828:	f7ff ff66 	bl	800c6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c82c:	f7fe ff42 	bl	800b6b4 <vTaskSwitchContext>
	prvTaskExitError();
 800c830:	f7ff ff20 	bl	800c674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	e000ed00 	.word	0xe000ed00
 800c844:	410fc271 	.word	0x410fc271
 800c848:	410fc270 	.word	0x410fc270
 800c84c:	e000e400 	.word	0xe000e400
 800c850:	20000574 	.word	0x20000574
 800c854:	20000578 	.word	0x20000578
 800c858:	e000ed20 	.word	0xe000ed20
 800c85c:	20000064 	.word	0x20000064
 800c860:	e000ef34 	.word	0xe000ef34

0800c864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	607b      	str	r3, [r7, #4]
}
 800c87c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c87e:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <vPortEnterCritical+0x58>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	4a0d      	ldr	r2, [pc, #52]	; (800c8bc <vPortEnterCritical+0x58>)
 800c886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c888:	4b0c      	ldr	r3, [pc, #48]	; (800c8bc <vPortEnterCritical+0x58>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d10f      	bne.n	800c8b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c890:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <vPortEnterCritical+0x5c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	603b      	str	r3, [r7, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <vPortEnterCritical+0x4a>
	}
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	20000064 	.word	0x20000064
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8ca:	4b12      	ldr	r3, [pc, #72]	; (800c914 <vPortExitCritical+0x50>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10a      	bne.n	800c8e8 <vPortExitCritical+0x24>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	607b      	str	r3, [r7, #4]
}
 800c8e4:	bf00      	nop
 800c8e6:	e7fe      	b.n	800c8e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8e8:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <vPortExitCritical+0x50>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	4a09      	ldr	r2, [pc, #36]	; (800c914 <vPortExitCritical+0x50>)
 800c8f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8f2:	4b08      	ldr	r3, [pc, #32]	; (800c914 <vPortExitCritical+0x50>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d105      	bne.n	800c906 <vPortExitCritical+0x42>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	f383 8811 	msr	BASEPRI, r3
}
 800c904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20000064 	.word	0x20000064
	...

0800c920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c920:	f3ef 8009 	mrs	r0, PSP
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	4b15      	ldr	r3, [pc, #84]	; (800c980 <pxCurrentTCBConst>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f01e 0f10 	tst.w	lr, #16
 800c930:	bf08      	it	eq
 800c932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c940:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c944:	f380 8811 	msr	BASEPRI, r0
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f7fe feb0 	bl	800b6b4 <vTaskSwitchContext>
 800c954:	f04f 0000 	mov.w	r0, #0
 800c958:	f380 8811 	msr	BASEPRI, r0
 800c95c:	bc09      	pop	{r0, r3}
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	6808      	ldr	r0, [r1, #0]
 800c962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c966:	f01e 0f10 	tst.w	lr, #16
 800c96a:	bf08      	it	eq
 800c96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c970:	f380 8809 	msr	PSP, r0
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w

0800c980 <pxCurrentTCBConst>:
 800c980:	20000404 	.word	0x20000404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9a2:	f7fe fdcf 	bl	800b544 <xTaskIncrementTick>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <SysTick_Handler+0x40>)
 800c9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
}
 800c9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <vPortSetupTimerInterrupt+0x38>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <vPortSetupTimerInterrupt+0x3c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <vPortSetupTimerInterrupt+0x40>)
 800c9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e6:	099b      	lsrs	r3, r3, #6
 800c9e8:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <vPortSetupTimerInterrupt+0x44>)
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ee:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	e000e010 	.word	0xe000e010
 800ca04:	e000e018 	.word	0xe000e018
 800ca08:	20000000 	.word	0x20000000
 800ca0c:	10624dd3 	.word	0x10624dd3
 800ca10:	e000e014 	.word	0xe000e014

0800ca14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca24 <vPortEnableVFP+0x10>
 800ca18:	6801      	ldr	r1, [r0, #0]
 800ca1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca1e:	6001      	str	r1, [r0, #0]
 800ca20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca22:	bf00      	nop
 800ca24:	e000ed88 	.word	0xe000ed88

0800ca28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca2e:	f3ef 8305 	mrs	r3, IPSR
 800ca32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d914      	bls.n	800ca64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca3a:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <vPortValidateInterruptPriority+0x70>)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca44:	4b15      	ldr	r3, [pc, #84]	; (800ca9c <vPortValidateInterruptPriority+0x74>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	7afa      	ldrb	r2, [r7, #11]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d20a      	bcs.n	800ca64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca64:	4b0e      	ldr	r3, [pc, #56]	; (800caa0 <vPortValidateInterruptPriority+0x78>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca6c:	4b0d      	ldr	r3, [pc, #52]	; (800caa4 <vPortValidateInterruptPriority+0x7c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d90a      	bls.n	800ca8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	603b      	str	r3, [r7, #0]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <vPortValidateInterruptPriority+0x60>
	}
 800ca8a:	bf00      	nop
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	e000e3f0 	.word	0xe000e3f0
 800ca9c:	20000574 	.word	0x20000574
 800caa0:	e000ed0c 	.word	0xe000ed0c
 800caa4:	20000578 	.word	0x20000578

0800caa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cab0:	2300      	movs	r3, #0
 800cab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cab4:	f7fe fc8c 	bl	800b3d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cab8:	4b58      	ldr	r3, [pc, #352]	; (800cc1c <pvPortMalloc+0x174>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d101      	bne.n	800cac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cac0:	f000 f910 	bl	800cce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cac4:	4b56      	ldr	r3, [pc, #344]	; (800cc20 <pvPortMalloc+0x178>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4013      	ands	r3, r2
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 808e 	bne.w	800cbee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d01d      	beq.n	800cb14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cad8:	2208      	movs	r2, #8
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4413      	add	r3, r2
 800cade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d014      	beq.n	800cb14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f023 0307 	bic.w	r3, r3, #7
 800caf0:	3308      	adds	r3, #8
 800caf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f003 0307 	and.w	r3, r3, #7
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <pvPortMalloc+0x6c>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	617b      	str	r3, [r7, #20]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d069      	beq.n	800cbee <pvPortMalloc+0x146>
 800cb1a:	4b42      	ldr	r3, [pc, #264]	; (800cc24 <pvPortMalloc+0x17c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d864      	bhi.n	800cbee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb24:	4b40      	ldr	r3, [pc, #256]	; (800cc28 <pvPortMalloc+0x180>)
 800cb26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb28:	4b3f      	ldr	r3, [pc, #252]	; (800cc28 <pvPortMalloc+0x180>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb2e:	e004      	b.n	800cb3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d903      	bls.n	800cb4c <pvPortMalloc+0xa4>
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f1      	bne.n	800cb30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb4c:	4b33      	ldr	r3, [pc, #204]	; (800cc1c <pvPortMalloc+0x174>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d04b      	beq.n	800cbee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2208      	movs	r2, #8
 800cb5c:	4413      	add	r3, r2
 800cb5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	2308      	movs	r3, #8
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d91f      	bls.n	800cbb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <pvPortMalloc+0xf8>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	613b      	str	r3, [r7, #16]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	1ad2      	subs	r2, r2, r3
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbb2:	69b8      	ldr	r0, [r7, #24]
 800cbb4:	f000 f8f8 	bl	800cda8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbb8:	4b1a      	ldr	r3, [pc, #104]	; (800cc24 <pvPortMalloc+0x17c>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	4a18      	ldr	r2, [pc, #96]	; (800cc24 <pvPortMalloc+0x17c>)
 800cbc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbc6:	4b17      	ldr	r3, [pc, #92]	; (800cc24 <pvPortMalloc+0x17c>)
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	4b18      	ldr	r3, [pc, #96]	; (800cc2c <pvPortMalloc+0x184>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d203      	bcs.n	800cbda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbd2:	4b14      	ldr	r3, [pc, #80]	; (800cc24 <pvPortMalloc+0x17c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a15      	ldr	r2, [pc, #84]	; (800cc2c <pvPortMalloc+0x184>)
 800cbd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <pvPortMalloc+0x178>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbee:	f7fe fbfd 	bl	800b3ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	f003 0307 	and.w	r3, r3, #7
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <pvPortMalloc+0x16a>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	60fb      	str	r3, [r7, #12]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <pvPortMalloc+0x168>
	return pvReturn;
 800cc12:	69fb      	ldr	r3, [r7, #28]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3728      	adds	r7, #40	; 0x28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	2001f984 	.word	0x2001f984
 800cc20:	2001f990 	.word	0x2001f990
 800cc24:	2001f988 	.word	0x2001f988
 800cc28:	2001f97c 	.word	0x2001f97c
 800cc2c:	2001f98c 	.word	0x2001f98c

0800cc30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d048      	beq.n	800ccd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc42:	2308      	movs	r3, #8
 800cc44:	425b      	negs	r3, r3
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	4413      	add	r3, r2
 800cc4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	4b21      	ldr	r3, [pc, #132]	; (800ccdc <vPortFree+0xac>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4013      	ands	r3, r2
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10a      	bne.n	800cc74 <vPortFree+0x44>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	60fb      	str	r3, [r7, #12]
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00a      	beq.n	800cc92 <vPortFree+0x62>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	60bb      	str	r3, [r7, #8]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	4b11      	ldr	r3, [pc, #68]	; (800ccdc <vPortFree+0xac>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d019      	beq.n	800ccd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d115      	bne.n	800ccd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <vPortFree+0xac>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	43db      	mvns	r3, r3
 800ccb2:	401a      	ands	r2, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccb8:	f7fe fb8a 	bl	800b3d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	685a      	ldr	r2, [r3, #4]
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <vPortFree+0xb0>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	4a06      	ldr	r2, [pc, #24]	; (800cce0 <vPortFree+0xb0>)
 800ccc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccca:	6938      	ldr	r0, [r7, #16]
 800cccc:	f000 f86c 	bl	800cda8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ccd0:	f7fe fb8c 	bl	800b3ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccd4:	bf00      	nop
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	2001f990 	.word	0x2001f990
 800cce0:	2001f988 	.word	0x2001f988

0800cce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccea:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800ccee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ccf0:	4b27      	ldr	r3, [pc, #156]	; (800cd90 <prvHeapInit+0xac>)
 800ccf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00c      	beq.n	800cd18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3307      	adds	r3, #7
 800cd02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f023 0307 	bic.w	r3, r3, #7
 800cd0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	4a1f      	ldr	r2, [pc, #124]	; (800cd90 <prvHeapInit+0xac>)
 800cd14:	4413      	add	r3, r2
 800cd16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd1c:	4a1d      	ldr	r2, [pc, #116]	; (800cd94 <prvHeapInit+0xb0>)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd22:	4b1c      	ldr	r3, [pc, #112]	; (800cd94 <prvHeapInit+0xb0>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd30:	2208      	movs	r2, #8
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f023 0307 	bic.w	r3, r3, #7
 800cd3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4a15      	ldr	r2, [pc, #84]	; (800cd98 <prvHeapInit+0xb4>)
 800cd44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <prvHeapInit+0xb4>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd4e:	4b12      	ldr	r3, [pc, #72]	; (800cd98 <prvHeapInit+0xb4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	1ad2      	subs	r2, r2, r3
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <prvHeapInit+0xb4>)
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <prvHeapInit+0xb8>)
 800cd72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	4a09      	ldr	r2, [pc, #36]	; (800cda0 <prvHeapInit+0xbc>)
 800cd7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <prvHeapInit+0xc0>)
 800cd7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	2000057c 	.word	0x2000057c
 800cd94:	2001f97c 	.word	0x2001f97c
 800cd98:	2001f984 	.word	0x2001f984
 800cd9c:	2001f98c 	.word	0x2001f98c
 800cda0:	2001f988 	.word	0x2001f988
 800cda4:	2001f990 	.word	0x2001f990

0800cda8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdb0:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <prvInsertBlockIntoFreeList+0xac>)
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	e002      	b.n	800cdbc <prvInsertBlockIntoFreeList+0x14>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d8f7      	bhi.n	800cdb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d108      	bne.n	800cdea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	441a      	add	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	441a      	add	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d118      	bne.n	800ce30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	4b15      	ldr	r3, [pc, #84]	; (800ce58 <prvInsertBlockIntoFreeList+0xb0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d00d      	beq.n	800ce26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	441a      	add	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	e008      	b.n	800ce38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce26:	4b0c      	ldr	r3, [pc, #48]	; (800ce58 <prvInsertBlockIntoFreeList+0xb0>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	e003      	b.n	800ce38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d002      	beq.n	800ce46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce46:	bf00      	nop
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2001f97c 	.word	0x2001f97c
 800ce58:	2001f984 	.word	0x2001f984

0800ce5c <I2C_Scan>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	2300      	movs	r3, #0
 800ce68:	81fb      	strh	r3, [r7, #14]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	737b      	strb	r3, [r7, #13]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	81fb      	strh	r3, [r7, #14]
 800ce72:	e014      	b.n	800ce9e <I2C_Scan+0x42>
 800ce74:	89f9      	ldrh	r1, [r7, #14]
 800ce76:	2314      	movs	r3, #20
 800ce78:	2201      	movs	r2, #1
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7f9 f826 	bl	8005ecc <HAL_I2C_IsDeviceReady>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d108      	bne.n	800ce98 <I2C_Scan+0x3c>
 800ce86:	7b7b      	ldrb	r3, [r7, #13]
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	89fa      	ldrh	r2, [r7, #14]
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	7b7b      	ldrb	r3, [r7, #13]
 800ce94:	3301      	adds	r3, #1
 800ce96:	737b      	strb	r3, [r7, #13]
 800ce98:	89fb      	ldrh	r3, [r7, #14]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	81fb      	strh	r3, [r7, #14]
 800ce9e:	89fb      	ldrh	r3, [r7, #14]
 800cea0:	2bff      	cmp	r3, #255	; 0xff
 800cea2:	d9e7      	bls.n	800ce74 <I2C_Scan+0x18>
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <Init>:
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b088      	sub	sp, #32
 800ceb2:	af04      	add	r7, sp, #16
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	2380      	movs	r3, #128	; 0x80
 800ceb8:	733b      	strb	r3, [r7, #12]
 800ceba:	2332      	movs	r3, #50	; 0x32
 800cebc:	9302      	str	r3, [sp, #8]
 800cebe:	2301      	movs	r3, #1
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	f107 030c 	add.w	r3, r7, #12
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	2301      	movs	r3, #1
 800ceca:	226b      	movs	r2, #107	; 0x6b
 800cecc:	21d0      	movs	r1, #208	; 0xd0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7f8 fcdc 	bl	800588c <HAL_I2C_Mem_Write>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <Init+0x30>
 800ceda:	f7f4 fe93 	bl	8001c04 <Error_Handler>
 800cede:	2064      	movs	r0, #100	; 0x64
 800cee0:	f7f7 fa3c 	bl	800435c <HAL_Delay>
 800cee4:	2301      	movs	r3, #1
 800cee6:	733b      	strb	r3, [r7, #12]
 800cee8:	2332      	movs	r3, #50	; 0x32
 800ceea:	9302      	str	r3, [sp, #8]
 800ceec:	2301      	movs	r3, #1
 800ceee:	9301      	str	r3, [sp, #4]
 800cef0:	f107 030c 	add.w	r3, r7, #12
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	2301      	movs	r3, #1
 800cef8:	226b      	movs	r2, #107	; 0x6b
 800cefa:	21d0      	movs	r1, #208	; 0xd0
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7f8 fcc5 	bl	800588c <HAL_I2C_Mem_Write>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <Init+0x5e>
 800cf08:	f7f4 fe7c 	bl	8001c04 <Error_Handler>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	733b      	strb	r3, [r7, #12]
 800cf10:	2332      	movs	r3, #50	; 0x32
 800cf12:	9302      	str	r3, [sp, #8]
 800cf14:	2301      	movs	r3, #1
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	f107 030c 	add.w	r3, r7, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	2301      	movs	r3, #1
 800cf20:	2237      	movs	r2, #55	; 0x37
 800cf22:	21d0      	movs	r1, #208	; 0xd0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7f8 fcb1 	bl	800588c <HAL_I2C_Mem_Write>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <Init+0x86>
 800cf30:	f7f4 fe68 	bl	8001c04 <Error_Handler>
 800cf34:	2316      	movs	r3, #22
 800cf36:	733b      	strb	r3, [r7, #12]
 800cf38:	2332      	movs	r3, #50	; 0x32
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	2301      	movs	r3, #1
 800cf48:	220a      	movs	r2, #10
 800cf4a:	2118      	movs	r1, #24
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7f8 fc9d 	bl	800588c <HAL_I2C_Mem_Write>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <Init+0xae>
 800cf58:	f7f4 fe54 	bl	8001c04 <Error_Handler>
 800cf5c:	bf00      	nop
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <Init_BMP280>:
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af04      	add	r7, sp, #16
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	23b6      	movs	r3, #182	; 0xb6
 800cf6e:	733b      	strb	r3, [r7, #12]
 800cf70:	2332      	movs	r3, #50	; 0x32
 800cf72:	9302      	str	r3, [sp, #8]
 800cf74:	2301      	movs	r3, #1
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	f107 030c 	add.w	r3, r7, #12
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	2301      	movs	r3, #1
 800cf80:	22e0      	movs	r2, #224	; 0xe0
 800cf82:	21ee      	movs	r1, #238	; 0xee
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7f8 fc81 	bl	800588c <HAL_I2C_Mem_Write>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <Init_BMP280+0x30>
 800cf90:	f7f4 fe38 	bl	8001c04 <Error_Handler>
 800cf94:	20fa      	movs	r0, #250	; 0xfa
 800cf96:	f7f7 f9e1 	bl	800435c <HAL_Delay>
 800cf9a:	232f      	movs	r3, #47	; 0x2f
 800cf9c:	733b      	strb	r3, [r7, #12]
 800cf9e:	2332      	movs	r3, #50	; 0x32
 800cfa0:	9302      	str	r3, [sp, #8]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	f107 030c 	add.w	r3, r7, #12
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	2301      	movs	r3, #1
 800cfae:	22f4      	movs	r2, #244	; 0xf4
 800cfb0:	21ee      	movs	r1, #238	; 0xee
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7f8 fc6a 	bl	800588c <HAL_I2C_Mem_Write>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <Init_BMP280+0x5e>
 800cfbe:	f7f4 fe21 	bl	8001c04 <Error_Handler>
 800cfc2:	bf00      	nop
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <MeasureT_BMP280>:
 800cfcc:	b5b0      	push	{r4, r5, r7, lr}
 800cfce:	b096      	sub	sp, #88	; 0x58
 800cfd0:	af04      	add	r7, sp, #16
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	647b      	str	r3, [r7, #68]	; 0x44
 800cfdc:	2300      	movs	r3, #0
 800cfde:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe0:	2332      	movs	r3, #50	; 0x32
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	2306      	movs	r3, #6
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	f107 0310 	add.w	r3, r7, #16
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	2301      	movs	r3, #1
 800cff0:	2288      	movs	r2, #136	; 0x88
 800cff2:	21ee      	movs	r1, #238	; 0xee
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7f8 fd43 	bl	8005a80 <HAL_I2C_Mem_Read>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <MeasureT_BMP280+0x38>
 800d000:	f7f4 fe00 	bl	8001c04 <Error_Handler>
 800d004:	7c3b      	ldrb	r3, [r7, #16]
 800d006:	b29a      	uxth	r2, r3
 800d008:	7c7b      	ldrb	r3, [r7, #17]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	021b      	lsls	r3, r3, #8
 800d00e:	b29b      	uxth	r3, r3
 800d010:	4413      	add	r3, r2
 800d012:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d014:	7cbb      	ldrb	r3, [r7, #18]
 800d016:	b29a      	uxth	r2, r3
 800d018:	7cfb      	ldrb	r3, [r7, #19]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	021b      	lsls	r3, r3, #8
 800d01e:	b29b      	uxth	r3, r3
 800d020:	4413      	add	r3, r2
 800d022:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d024:	7d3b      	ldrb	r3, [r7, #20]
 800d026:	b29a      	uxth	r2, r3
 800d028:	7d7b      	ldrb	r3, [r7, #21]
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	021b      	lsls	r3, r3, #8
 800d02e:	b29b      	uxth	r3, r3
 800d030:	4413      	add	r3, r2
 800d032:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d034:	2332      	movs	r3, #50	; 0x32
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	2303      	movs	r3, #3
 800d03a:	9301      	str	r3, [sp, #4]
 800d03c:	f107 0310 	add.w	r3, r7, #16
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	2301      	movs	r3, #1
 800d044:	22fa      	movs	r2, #250	; 0xfa
 800d046:	21ee      	movs	r1, #238	; 0xee
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7f8 fd19 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <MeasureT_BMP280+0x8c>
 800d054:	f7f4 fdd6 	bl	8001c04 <Error_Handler>
 800d058:	7c3b      	ldrb	r3, [r7, #16]
 800d05a:	031a      	lsls	r2, r3, #12
 800d05c:	7c7b      	ldrb	r3, [r7, #17]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	4413      	add	r3, r2
 800d062:	7cba      	ldrb	r2, [r7, #18]
 800d064:	0912      	lsrs	r2, r2, #4
 800d066:	b2d2      	uxtb	r2, r2
 800d068:	4413      	add	r3, r2
 800d06a:	637b      	str	r3, [r7, #52]	; 0x34
 800d06c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d06e:	f7f3 fa69 	bl	8000544 <__aeabi_i2d>
 800d072:	f04f 0200 	mov.w	r2, #0
 800d076:	4b47      	ldr	r3, [pc, #284]	; (800d194 <MeasureT_BMP280+0x1c8>)
 800d078:	f7f3 fbf8 	bl	800086c <__aeabi_ddiv>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4614      	mov	r4, r2
 800d082:	461d      	mov	r5, r3
 800d084:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d086:	4618      	mov	r0, r3
 800d088:	f7f3 fa4c 	bl	8000524 <__aeabi_ui2d>
 800d08c:	f04f 0200 	mov.w	r2, #0
 800d090:	4b41      	ldr	r3, [pc, #260]	; (800d198 <MeasureT_BMP280+0x1cc>)
 800d092:	f7f3 fbeb 	bl	800086c <__aeabi_ddiv>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4620      	mov	r0, r4
 800d09c:	4629      	mov	r1, r5
 800d09e:	f7f3 f903 	bl	80002a8 <__aeabi_dsub>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4614      	mov	r4, r2
 800d0a8:	461d      	mov	r5, r3
 800d0aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7f3 fa39 	bl	8000524 <__aeabi_ui2d>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 faad 	bl	8000618 <__aeabi_dmul>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d0c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d0c8:	f7f3 fa3c 	bl	8000544 <__aeabi_i2d>
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800d0d4:	f7f3 fbca 	bl	800086c <__aeabi_ddiv>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4614      	mov	r4, r2
 800d0de:	461d      	mov	r5, r3
 800d0e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f3 fa1e 	bl	8000524 <__aeabi_ui2d>
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	4b2b      	ldr	r3, [pc, #172]	; (800d19c <MeasureT_BMP280+0x1d0>)
 800d0ee:	f7f3 fbbd 	bl	800086c <__aeabi_ddiv>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	f7f3 f8d5 	bl	80002a8 <__aeabi_dsub>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4610      	mov	r0, r2
 800d104:	4619      	mov	r1, r3
 800d106:	f7f3 fd37 	bl	8000b78 <__aeabi_d2iz>
 800d10a:	4603      	mov	r3, r0
 800d10c:	643b      	str	r3, [r7, #64]	; 0x40
 800d10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d110:	fb03 f303 	mul.w	r3, r3, r3
 800d114:	4618      	mov	r0, r3
 800d116:	f7f3 fa15 	bl	8000544 <__aeabi_i2d>
 800d11a:	4604      	mov	r4, r0
 800d11c:	460d      	mov	r5, r1
 800d11e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d120:	4618      	mov	r0, r3
 800d122:	f7f3 f9ff 	bl	8000524 <__aeabi_ui2d>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 fa73 	bl	8000618 <__aeabi_dmul>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800d13a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d13e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d142:	f7f3 f8b3 	bl	80002ac <__adddf3>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4610      	mov	r0, r2
 800d14c:	4619      	mov	r1, r3
 800d14e:	f7f3 fd13 	bl	8000b78 <__aeabi_d2iz>
 800d152:	4603      	mov	r3, r0
 800d154:	647b      	str	r3, [r7, #68]	; 0x44
 800d156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d15a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d15e:	f7f3 f8a5 	bl	80002ac <__adddf3>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4610      	mov	r0, r2
 800d168:	4619      	mov	r1, r3
 800d16a:	f04f 0200 	mov.w	r2, #0
 800d16e:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <MeasureT_BMP280+0x1d4>)
 800d170:	f7f3 fb7c 	bl	800086c <__aeabi_ddiv>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d188:	e9c1 2300 	strd	r2, r3, [r1]
 800d18c:	bf00      	nop
 800d18e:	3748      	adds	r7, #72	; 0x48
 800d190:	46bd      	mov	sp, r7
 800d192:	bdb0      	pop	{r4, r5, r7, pc}
 800d194:	40d00000 	.word	0x40d00000
 800d198:	40900000 	.word	0x40900000
 800d19c:	40c00000 	.word	0x40c00000
 800d1a0:	40b40000 	.word	0x40b40000
 800d1a4:	00000000 	.word	0x00000000

0800d1a8 <MeasureP>:
 800d1a8:	b5b0      	push	{r4, r5, r7, lr}
 800d1aa:	b09c      	sub	sp, #112	; 0x70
 800d1ac:	af04      	add	r7, sp, #16
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f3 f9c3 	bl	8000544 <__aeabi_i2d>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800d1c6:	2332      	movs	r3, #50	; 0x32
 800d1c8:	9302      	str	r3, [sp, #8]
 800d1ca:	2312      	movs	r3, #18
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	228e      	movs	r2, #142	; 0x8e
 800d1d8:	21ee      	movs	r1, #238	; 0xee
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f7f8 fc50 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <MeasureP+0x42>
 800d1e6:	f7f4 fd0d 	bl	8001c04 <Error_Handler>
 800d1ea:	7d3b      	ldrb	r3, [r7, #20]
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	7d7b      	ldrb	r3, [r7, #21]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	021b      	lsls	r3, r3, #8
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d1fc:	7dbb      	ldrb	r3, [r7, #22]
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	7dfb      	ldrb	r3, [r7, #23]
 800d202:	b29b      	uxth	r3, r3
 800d204:	021b      	lsls	r3, r3, #8
 800d206:	b29b      	uxth	r3, r3
 800d208:	4413      	add	r3, r2
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d210:	7e3b      	ldrb	r3, [r7, #24]
 800d212:	b29a      	uxth	r2, r3
 800d214:	7e7b      	ldrb	r3, [r7, #25]
 800d216:	b29b      	uxth	r3, r3
 800d218:	021b      	lsls	r3, r3, #8
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	4413      	add	r3, r2
 800d21e:	b29b      	uxth	r3, r3
 800d220:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800d224:	7ebb      	ldrb	r3, [r7, #26]
 800d226:	b29a      	uxth	r2, r3
 800d228:	7efb      	ldrb	r3, [r7, #27]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	b29b      	uxth	r3, r3
 800d230:	4413      	add	r3, r2
 800d232:	b29b      	uxth	r3, r3
 800d234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800d238:	7f3b      	ldrb	r3, [r7, #28]
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	7f7b      	ldrb	r3, [r7, #29]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	b29b      	uxth	r3, r3
 800d244:	4413      	add	r3, r2
 800d246:	b29b      	uxth	r3, r3
 800d248:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d24c:	7fbb      	ldrb	r3, [r7, #30]
 800d24e:	b29a      	uxth	r2, r3
 800d250:	7ffb      	ldrb	r3, [r7, #31]
 800d252:	b29b      	uxth	r3, r3
 800d254:	021b      	lsls	r3, r3, #8
 800d256:	b29b      	uxth	r3, r3
 800d258:	4413      	add	r3, r2
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d260:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d264:	b29a      	uxth	r2, r3
 800d266:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4413      	add	r3, r2
 800d272:	b29b      	uxth	r3, r3
 800d274:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d278:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d282:	b29b      	uxth	r3, r3
 800d284:	021b      	lsls	r3, r3, #8
 800d286:	b29b      	uxth	r3, r3
 800d288:	4413      	add	r3, r2
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d290:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d294:	b29a      	uxth	r2, r3
 800d296:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	021b      	lsls	r3, r3, #8
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d2a8:	2332      	movs	r3, #50	; 0x32
 800d2aa:	9302      	str	r3, [sp, #8]
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	22f7      	movs	r2, #247	; 0xf7
 800d2ba:	21ee      	movs	r1, #238	; 0xee
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f7f8 fbdf 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d001      	beq.n	800d2cc <MeasureP+0x124>
 800d2c8:	f7f4 fc9c 	bl	8001c04 <Error_Handler>
 800d2cc:	7d3b      	ldrb	r3, [r7, #20]
 800d2ce:	031a      	lsls	r2, r3, #12
 800d2d0:	7d7b      	ldrb	r3, [r7, #21]
 800d2d2:	011b      	lsls	r3, r3, #4
 800d2d4:	4413      	add	r3, r2
 800d2d6:	7dba      	ldrb	r2, [r7, #22]
 800d2d8:	0912      	lsrs	r2, r2, #4
 800d2da:	b2d2      	uxtb	r2, r2
 800d2dc:	4413      	add	r3, r2
 800d2de:	643b      	str	r3, [r7, #64]	; 0x40
 800d2e0:	f04f 0200 	mov.w	r2, #0
 800d2e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d2ec:	f7f3 fabe 	bl	800086c <__aeabi_ddiv>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f04f 0200 	mov.w	r2, #0
 800d2fc:	4bb4      	ldr	r3, [pc, #720]	; (800d5d0 <MeasureP+0x428>)
 800d2fe:	f7f2 ffd3 	bl	80002a8 <__aeabi_dsub>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d30a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d30e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d312:	f7f3 f981 	bl	8000618 <__aeabi_dmul>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4614      	mov	r4, r2
 800d31c:	461d      	mov	r5, r3
 800d31e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d322:	4618      	mov	r0, r3
 800d324:	f7f3 f90e 	bl	8000544 <__aeabi_i2d>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4620      	mov	r0, r4
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f3 f972 	bl	8000618 <__aeabi_dmul>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	4610      	mov	r0, r2
 800d33a:	4619      	mov	r1, r3
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	4ba4      	ldr	r3, [pc, #656]	; (800d5d4 <MeasureP+0x42c>)
 800d342:	f7f3 fa93 	bl	800086c <__aeabi_ddiv>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d34e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d352:	4618      	mov	r0, r3
 800d354:	f7f3 f8f6 	bl	8000544 <__aeabi_i2d>
 800d358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d35c:	f7f3 f95c 	bl	8000618 <__aeabi_dmul>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4610      	mov	r0, r2
 800d366:	4619      	mov	r1, r3
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	f7f2 ff9e 	bl	80002ac <__adddf3>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d378:	f7f2 ff98 	bl	80002ac <__adddf3>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d384:	f04f 0200 	mov.w	r2, #0
 800d388:	4b93      	ldr	r3, [pc, #588]	; (800d5d8 <MeasureP+0x430>)
 800d38a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d38e:	f7f3 fa6d 	bl	800086c <__aeabi_ddiv>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4614      	mov	r4, r2
 800d398:	461d      	mov	r5, r3
 800d39a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7f3 f8d0 	bl	8000544 <__aeabi_i2d>
 800d3a4:	f04f 0200 	mov.w	r2, #0
 800d3a8:	4b8c      	ldr	r3, [pc, #560]	; (800d5dc <MeasureP+0x434>)
 800d3aa:	f7f3 f935 	bl	8000618 <__aeabi_dmul>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	f7f2 ff79 	bl	80002ac <__adddf3>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d3c2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f3 f8bc 	bl	8000544 <__aeabi_i2d>
 800d3cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d3d0:	f7f3 f922 	bl	8000618 <__aeabi_dmul>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4619      	mov	r1, r3
 800d3dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d3e0:	f7f3 f91a 	bl	8000618 <__aeabi_dmul>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f04f 0200 	mov.w	r2, #0
 800d3f0:	4b7b      	ldr	r3, [pc, #492]	; (800d5e0 <MeasureP+0x438>)
 800d3f2:	f7f3 fa3b 	bl	800086c <__aeabi_ddiv>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4614      	mov	r4, r2
 800d3fc:	461d      	mov	r5, r3
 800d3fe:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d402:	4618      	mov	r0, r3
 800d404:	f7f3 f89e 	bl	8000544 <__aeabi_i2d>
 800d408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d40c:	f7f3 f904 	bl	8000618 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4620      	mov	r0, r4
 800d416:	4629      	mov	r1, r5
 800d418:	f7f2 ff48 	bl	80002ac <__adddf3>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4610      	mov	r0, r2
 800d422:	4619      	mov	r1, r3
 800d424:	f04f 0200 	mov.w	r2, #0
 800d428:	4b6d      	ldr	r3, [pc, #436]	; (800d5e0 <MeasureP+0x438>)
 800d42a:	f7f3 fa1f 	bl	800086c <__aeabi_ddiv>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d436:	f04f 0200 	mov.w	r2, #0
 800d43a:	4b66      	ldr	r3, [pc, #408]	; (800d5d4 <MeasureP+0x42c>)
 800d43c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d440:	f7f3 fa14 	bl	800086c <__aeabi_ddiv>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4610      	mov	r0, r2
 800d44a:	4619      	mov	r1, r3
 800d44c:	f04f 0200 	mov.w	r2, #0
 800d450:	4b64      	ldr	r3, [pc, #400]	; (800d5e4 <MeasureP+0x43c>)
 800d452:	f7f2 ff2b 	bl	80002ac <__adddf3>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	4614      	mov	r4, r2
 800d45c:	461d      	mov	r5, r3
 800d45e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d462:	4618      	mov	r0, r3
 800d464:	f7f3 f85e 	bl	8000524 <__aeabi_ui2d>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4620      	mov	r0, r4
 800d46e:	4629      	mov	r1, r5
 800d470:	f7f3 f8d2 	bl	8000618 <__aeabi_dmul>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d47c:	f04f 0200 	mov.w	r2, #0
 800d480:	f04f 0300 	mov.w	r3, #0
 800d484:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d488:	f7f3 fb2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <MeasureP+0x2ee>
 800d492:	2300      	movs	r3, #0
 800d494:	e091      	b.n	800d5ba <MeasureP+0x412>
 800d496:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d498:	f7f3 f854 	bl	8000544 <__aeabi_i2d>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	f04f 0000 	mov.w	r0, #0
 800d4a4:	4950      	ldr	r1, [pc, #320]	; (800d5e8 <MeasureP+0x440>)
 800d4a6:	f7f2 feff 	bl	80002a8 <__aeabi_dsub>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	4b4d      	ldr	r3, [pc, #308]	; (800d5ec <MeasureP+0x444>)
 800d4b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4bc:	f7f3 f9d6 	bl	800086c <__aeabi_ddiv>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d4c8:	f7f2 feee 	bl	80002a8 <__aeabi_dsub>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	a33c      	add	r3, pc, #240	; (adr r3, 800d5c8 <MeasureP+0x420>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	f7f3 f89d 	bl	8000618 <__aeabi_dmul>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4ea:	f7f3 f9bf 	bl	800086c <__aeabi_ddiv>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d4f6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f3 f822 	bl	8000544 <__aeabi_i2d>
 800d500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d504:	f7f3 f888 	bl	8000618 <__aeabi_dmul>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4610      	mov	r0, r2
 800d50e:	4619      	mov	r1, r3
 800d510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d514:	f7f3 f880 	bl	8000618 <__aeabi_dmul>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4610      	mov	r0, r2
 800d51e:	4619      	mov	r1, r3
 800d520:	f04f 0200 	mov.w	r2, #0
 800d524:	4b32      	ldr	r3, [pc, #200]	; (800d5f0 <MeasureP+0x448>)
 800d526:	f7f3 f9a1 	bl	800086c <__aeabi_ddiv>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d532:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800d536:	4618      	mov	r0, r3
 800d538:	f7f3 f804 	bl	8000544 <__aeabi_i2d>
 800d53c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d540:	f7f3 f86a 	bl	8000618 <__aeabi_dmul>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	4610      	mov	r0, r2
 800d54a:	4619      	mov	r1, r3
 800d54c:	f04f 0200 	mov.w	r2, #0
 800d550:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <MeasureP+0x42c>)
 800d552:	f7f3 f98b 	bl	800086c <__aeabi_ddiv>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d55e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d562:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d566:	f7f2 fea1 	bl	80002ac <__adddf3>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4614      	mov	r4, r2
 800d570:	461d      	mov	r5, r3
 800d572:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d576:	4618      	mov	r0, r3
 800d578:	f7f2 ffe4 	bl	8000544 <__aeabi_i2d>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4620      	mov	r0, r4
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fe92 	bl	80002ac <__adddf3>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4610      	mov	r0, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	f04f 0200 	mov.w	r2, #0
 800d594:	4b17      	ldr	r3, [pc, #92]	; (800d5f4 <MeasureP+0x44c>)
 800d596:	f7f3 f969 	bl	800086c <__aeabi_ddiv>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d5a2:	f7f2 fe83 	bl	80002ac <__adddf3>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5b4:	e9c1 2300 	strd	r2, r3, [r1]
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3760      	adds	r7, #96	; 0x60
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	00000000 	.word	0x00000000
 800d5cc:	40b86a00 	.word	0x40b86a00
 800d5d0:	40ef4000 	.word	0x40ef4000
 800d5d4:	40e00000 	.word	0x40e00000
 800d5d8:	40100000 	.word	0x40100000
 800d5dc:	40f00000 	.word	0x40f00000
 800d5e0:	41200000 	.word	0x41200000
 800d5e4:	3ff00000 	.word	0x3ff00000
 800d5e8:	41300000 	.word	0x41300000
 800d5ec:	40b00000 	.word	0x40b00000
 800d5f0:	41e00000 	.word	0x41e00000
 800d5f4:	40300000 	.word	0x40300000

0800d5f8 <MeasureA>:
 800d5f8:	b5b0      	push	{r4, r5, r7, lr}
 800d5fa:	b08a      	sub	sp, #40	; 0x28
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	75fb      	strb	r3, [r7, #23]
 800d606:	2300      	movs	r3, #0
 800d608:	82bb      	strh	r3, [r7, #20]
 800d60a:	2301      	movs	r3, #1
 800d60c:	75bb      	strb	r3, [r7, #22]
 800d60e:	2332      	movs	r3, #50	; 0x32
 800d610:	9302      	str	r3, [sp, #8]
 800d612:	2301      	movs	r3, #1
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	f107 030c 	add.w	r3, r7, #12
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	2301      	movs	r3, #1
 800d61e:	221c      	movs	r2, #28
 800d620:	21d0      	movs	r1, #208	; 0xd0
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7f8 fa2c 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <MeasureA+0x3a>
 800d62e:	f7f4 fae9 	bl	8001c04 <Error_Handler>
 800d632:	7b3b      	ldrb	r3, [r7, #12]
 800d634:	10db      	asrs	r3, r3, #3
 800d636:	b29b      	uxth	r3, r3
 800d638:	f003 0303 	and.w	r3, r3, #3
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	3301      	adds	r3, #1
 800d640:	b29b      	uxth	r3, r3
 800d642:	82bb      	strh	r3, [r7, #20]
 800d644:	2300      	movs	r3, #0
 800d646:	75fb      	strb	r3, [r7, #23]
 800d648:	e005      	b.n	800d656 <MeasureA+0x5e>
 800d64a:	7dbb      	ldrb	r3, [r7, #22]
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	75bb      	strb	r3, [r7, #22]
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	3301      	adds	r3, #1
 800d654:	75fb      	strb	r3, [r7, #23]
 800d656:	7dfa      	ldrb	r2, [r7, #23]
 800d658:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	dbf4      	blt.n	800d64a <MeasureA+0x52>
 800d660:	2332      	movs	r3, #50	; 0x32
 800d662:	9302      	str	r3, [sp, #8]
 800d664:	2306      	movs	r3, #6
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	f107 030c 	add.w	r3, r7, #12
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	2301      	movs	r3, #1
 800d670:	223b      	movs	r2, #59	; 0x3b
 800d672:	21d0      	movs	r1, #208	; 0xd0
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7f8 fa03 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <MeasureA+0x8c>
 800d680:	f7f4 fac0 	bl	8001c04 <Error_Handler>
 800d684:	2300      	movs	r3, #0
 800d686:	75fb      	strb	r3, [r7, #23]
 800d688:	e03a      	b.n	800d700 <MeasureA+0x108>
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	f107 0218 	add.w	r2, r7, #24
 800d692:	4413      	add	r3, r2
 800d694:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	021b      	lsls	r3, r3, #8
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	f107 0118 	add.w	r1, r7, #24
 800d6a8:	440b      	add	r3, r1
 800d6aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	82bb      	strh	r3, [r7, #20]
 800d6b6:	7dbb      	ldrb	r3, [r7, #22]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f2 ff43 	bl	8000544 <__aeabi_i2d>
 800d6be:	4604      	mov	r4, r0
 800d6c0:	460d      	mov	r5, r1
 800d6c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f2 ff3c 	bl	8000544 <__aeabi_i2d>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	f7f2 ffa0 	bl	8000618 <__aeabi_dmul>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4610      	mov	r0, r2
 800d6de:	4619      	mov	r1, r3
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	18d4      	adds	r4, r2, r3
 800d6e8:	a309      	add	r3, pc, #36	; (adr r3, 800d710 <MeasureA+0x118>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f7f3 f8bd 	bl	800086c <__aeabi_ddiv>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	e9c4 2300 	strd	r2, r3, [r4]
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]
 800d700:	7dfb      	ldrb	r3, [r7, #23]
 800d702:	2b02      	cmp	r3, #2
 800d704:	d9c1      	bls.n	800d68a <MeasureA+0x92>
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bdb0      	pop	{r4, r5, r7, pc}
 800d710:	00000000 	.word	0x00000000
 800d714:	40dfffc0 	.word	0x40dfffc0

0800d718 <MeasureG>:
 800d718:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800d71c:	b08b      	sub	sp, #44	; 0x2c
 800d71e:	af04      	add	r7, sp, #16
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	75fb      	strb	r3, [r7, #23]
 800d728:	2300      	movs	r3, #0
 800d72a:	82bb      	strh	r3, [r7, #20]
 800d72c:	2301      	movs	r3, #1
 800d72e:	75bb      	strb	r3, [r7, #22]
 800d730:	2332      	movs	r3, #50	; 0x32
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	2301      	movs	r3, #1
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	f107 030c 	add.w	r3, r7, #12
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	2301      	movs	r3, #1
 800d740:	221b      	movs	r2, #27
 800d742:	21d0      	movs	r1, #208	; 0xd0
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7f8 f99b 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <MeasureG+0x3c>
 800d750:	f7f4 fa58 	bl	8001c04 <Error_Handler>
 800d754:	7b3b      	ldrb	r3, [r7, #12]
 800d756:	10db      	asrs	r3, r3, #3
 800d758:	b29b      	uxth	r3, r3
 800d75a:	f003 0303 	and.w	r3, r3, #3
 800d75e:	b29b      	uxth	r3, r3
 800d760:	3301      	adds	r3, #1
 800d762:	82bb      	strh	r3, [r7, #20]
 800d764:	2300      	movs	r3, #0
 800d766:	75fb      	strb	r3, [r7, #23]
 800d768:	e008      	b.n	800d77c <MeasureG+0x64>
 800d76a:	7dbb      	ldrb	r3, [r7, #22]
 800d76c:	461a      	mov	r2, r3
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	75bb      	strb	r3, [r7, #22]
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	3301      	adds	r3, #1
 800d77a:	75fb      	strb	r3, [r7, #23]
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	8aba      	ldrh	r2, [r7, #20]
 800d782:	429a      	cmp	r2, r3
 800d784:	d8f1      	bhi.n	800d76a <MeasureG+0x52>
 800d786:	2332      	movs	r3, #50	; 0x32
 800d788:	9302      	str	r3, [sp, #8]
 800d78a:	2306      	movs	r3, #6
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	f107 030c 	add.w	r3, r7, #12
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	2301      	movs	r3, #1
 800d796:	2243      	movs	r2, #67	; 0x43
 800d798:	21d0      	movs	r1, #208	; 0xd0
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f8 f970 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <MeasureG+0x92>
 800d7a6:	f7f4 fa2d 	bl	8001c04 <Error_Handler>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	75fb      	strb	r3, [r7, #23]
 800d7ae:	e05d      	b.n	800d86c <MeasureG+0x154>
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	f107 0218 	add.w	r2, r7, #24
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	021b      	lsls	r3, r3, #8
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	f107 0118 	add.w	r1, r7, #24
 800d7ce:	440b      	add	r3, r1
 800d7d0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	4413      	add	r3, r2
 800d7d8:	82bb      	strh	r3, [r7, #20]
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	18d4      	adds	r4, r2, r3
 800d7e2:	8abb      	ldrh	r3, [r7, #20]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f2 fe9d 	bl	8000524 <__aeabi_ui2d>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	e9c4 2300 	strd	r2, r3, [r4]
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	f107 0218 	add.w	r2, r7, #24
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d800:	09db      	lsrs	r3, r3, #7
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b01      	cmp	r3, #1
 800d806:	d10f      	bne.n	800d828 <MeasureG+0x110>
 800d808:	8abb      	ldrh	r3, [r7, #20]
 800d80a:	425b      	negs	r3, r3
 800d80c:	82bb      	strh	r3, [r7, #20]
 800d80e:	8abb      	ldrh	r3, [r7, #20]
 800d810:	4259      	negs	r1, r3
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	18d4      	adds	r4, r2, r3
 800d81a:	4608      	mov	r0, r1
 800d81c:	f7f2 fe92 	bl	8000544 <__aeabi_i2d>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	e9c4 2300 	strd	r2, r3, [r4]
 800d828:	7dbb      	ldrb	r3, [r7, #22]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f2 fe7a 	bl	8000524 <__aeabi_ui2d>
 800d830:	a313      	add	r3, pc, #76	; (adr r3, 800d880 <MeasureG+0x168>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f3 f819 	bl	800086c <__aeabi_ddiv>
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4690      	mov	r8, r2
 800d840:	4699      	mov	r9, r3
 800d842:	7dfb      	ldrb	r3, [r7, #23]
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	4413      	add	r3, r2
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	7df9      	ldrb	r1, [r7, #23]
 800d850:	00c9      	lsls	r1, r1, #3
 800d852:	6838      	ldr	r0, [r7, #0]
 800d854:	1844      	adds	r4, r0, r1
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f2 fedd 	bl	8000618 <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	e9c4 2300 	strd	r2, r3, [r4]
 800d866:	7dfb      	ldrb	r3, [r7, #23]
 800d868:	3301      	adds	r3, #1
 800d86a:	75fb      	strb	r3, [r7, #23]
 800d86c:	7dfb      	ldrb	r3, [r7, #23]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d99e      	bls.n	800d7b0 <MeasureG+0x98>
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	371c      	adds	r7, #28
 800d878:	46bd      	mov	sp, r7
 800d87a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800d87e:	bf00      	nop
 800d880:	00000000 	.word	0x00000000
 800d884:	40dfffc0 	.word	0x40dfffc0

0800d888 <MeasureM>:
 800d888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d88a:	b08d      	sub	sp, #52	; 0x34
 800d88c:	af04      	add	r7, sp, #16
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
 800d896:	2300      	movs	r3, #0
 800d898:	77fb      	strb	r3, [r7, #31]
 800d89a:	2300      	movs	r3, #0
 800d89c:	83bb      	strh	r3, [r7, #28]
 800d89e:	2300      	movs	r3, #0
 800d8a0:	76fb      	strb	r3, [r7, #27]
 800d8a2:	2332      	movs	r3, #50	; 0x32
 800d8a4:	9302      	str	r3, [sp, #8]
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	f107 031b 	add.w	r3, r7, #27
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	2118      	movs	r1, #24
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f7f8 f8e2 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d8bc:	7efb      	ldrb	r3, [r7, #27]
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f000 8096 	beq.w	800d9f4 <MeasureM+0x16c>
 800d8c8:	2332      	movs	r3, #50	; 0x32
 800d8ca:	9302      	str	r3, [sp, #8]
 800d8cc:	2307      	movs	r3, #7
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	f107 0314 	add.w	r3, r7, #20
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	2203      	movs	r2, #3
 800d8da:	2118      	movs	r1, #24
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f7f8 f8cf 	bl	8005a80 <HAL_I2C_Mem_Read>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <MeasureM+0x64>
 800d8e8:	f7f4 f98c 	bl	8001c04 <Error_Handler>
 800d8ec:	7ebb      	ldrb	r3, [r7, #26]
 800d8ee:	f003 0308 	and.w	r3, r3, #8
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d17e      	bne.n	800d9f4 <MeasureM+0x16c>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	77fb      	strb	r3, [r7, #31]
 800d8fa:	e078      	b.n	800d9ee <MeasureM+0x166>
 800d8fc:	7ffb      	ldrb	r3, [r7, #31]
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	f107 0220 	add.w	r2, r7, #32
 800d904:	4413      	add	r3, r2
 800d906:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	7ffb      	ldrb	r3, [r7, #31]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	3301      	adds	r3, #1
 800d912:	f107 0120 	add.w	r1, r7, #32
 800d916:	440b      	add	r3, r1
 800d918:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	b29b      	uxth	r3, r3
 800d922:	4413      	add	r3, r2
 800d924:	83bb      	strh	r3, [r7, #28]
 800d926:	7ffb      	ldrb	r3, [r7, #31]
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	18d4      	adds	r4, r2, r3
 800d92e:	8bbb      	ldrh	r3, [r7, #28]
 800d930:	4618      	mov	r0, r3
 800d932:	f7f2 fdf7 	bl	8000524 <__aeabi_ui2d>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	e9c4 2300 	strd	r2, r3, [r4]
 800d93e:	7ffb      	ldrb	r3, [r7, #31]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	3301      	adds	r3, #1
 800d944:	f107 0220 	add.w	r2, r7, #32
 800d948:	4413      	add	r3, r2
 800d94a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d94e:	09db      	lsrs	r3, r3, #7
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b01      	cmp	r3, #1
 800d954:	d10f      	bne.n	800d976 <MeasureM+0xee>
 800d956:	8bbb      	ldrh	r3, [r7, #28]
 800d958:	425b      	negs	r3, r3
 800d95a:	83bb      	strh	r3, [r7, #28]
 800d95c:	8bbb      	ldrh	r3, [r7, #28]
 800d95e:	4259      	negs	r1, r3
 800d960:	7ffb      	ldrb	r3, [r7, #31]
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	18d4      	adds	r4, r2, r3
 800d968:	4608      	mov	r0, r1
 800d96a:	f7f2 fdeb 	bl	8000544 <__aeabi_i2d>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	e9c4 2300 	strd	r2, r3, [r4]
 800d976:	7ffb      	ldrb	r3, [r7, #31]
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4413      	add	r3, r2
 800d97e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d982:	7ffb      	ldrb	r3, [r7, #31]
 800d984:	00db      	lsls	r3, r3, #3
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	18d4      	adds	r4, r2, r3
 800d98a:	a31d      	add	r3, pc, #116	; (adr r3, 800da00 <MeasureM+0x178>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	f7f2 fe42 	bl	8000618 <__aeabi_dmul>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	e9c4 2300 	strd	r2, r3, [r4]
 800d99c:	7ffb      	ldrb	r3, [r7, #31]
 800d99e:	00db      	lsls	r3, r3, #3
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d9a8:	7ffb      	ldrb	r3, [r7, #31]
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9b4:	7ffb      	ldrb	r3, [r7, #31]
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	f7f2 fc72 	bl	80002a8 <__aeabi_dsub>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	7ffb      	ldrb	r3, [r7, #31]
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	18d6      	adds	r6, r2, r3
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7f2 fe1c 	bl	8000618 <__aeabi_dmul>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	e9c6 2300 	strd	r2, r3, [r6]
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	77fb      	strb	r3, [r7, #31]
 800d9ee:	7ffb      	ldrb	r3, [r7, #31]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d983      	bls.n	800d8fc <MeasureM+0x74>
 800d9f4:	bf00      	nop
 800d9f6:	3724      	adds	r7, #36	; 0x24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9fc:	f3af 8000 	nop.w
 800da00:	13313313 	.word	0x13313313
 800da04:	3fc33133 	.word	0x3fc33133

0800da08 <GUI>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	b095      	sub	sp, #84	; 0x54
 800da0e:	af00      	add	r7, sp, #0
 800da10:	ed87 0b08 	vstr	d0, [r7, #32]
 800da14:	ed87 1b06 	vstr	d1, [r7, #24]
 800da18:	ed87 2b04 	vstr	d2, [r7, #16]
 800da1c:	ed87 3b02 	vstr	d3, [r7, #8]
 800da20:	ed87 4b00 	vstr	d4, [r7]
 800da24:	2382      	movs	r3, #130	; 0x82
 800da26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800da2a:	2364      	movs	r3, #100	; 0x64
 800da2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800da30:	2328      	movs	r3, #40	; 0x28
 800da32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800da36:	23aa      	movs	r3, #170	; 0xaa
 800da38:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800da3c:	23aa      	movs	r3, #170	; 0xaa
 800da3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800da42:	238c      	movs	r3, #140	; 0x8c
 800da44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800da48:	2332      	movs	r3, #50	; 0x32
 800da4a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800da4e:	230a      	movs	r3, #10
 800da50:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800da54:	23d7      	movs	r3, #215	; 0xd7
 800da56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800da5a:	2332      	movs	r3, #50	; 0x32
 800da5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800da60:	238c      	movs	r3, #140	; 0x8c
 800da62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800da66:	2300      	movs	r3, #0
 800da68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800da6c:	48ee      	ldr	r0, [pc, #952]	; (800de28 <GUI+0x420>)
 800da6e:	f7f5 fc51 	bl	8003314 <BSP_LCD_SetFont>
 800da72:	2001      	movs	r0, #1
 800da74:	f7f5 fbce 	bl	8003214 <BSP_LCD_SelectLayer>
 800da78:	2100      	movs	r1, #0
 800da7a:	2001      	movs	r0, #1
 800da7c:	f7f5 fbda 	bl	8003234 <BSP_LCD_SetLayerVisible>
 800da80:	f04f 30ff 	mov.w	r0, #4294967295
 800da84:	f7f5 fc76 	bl	8003374 <BSP_LCD_Clear>
 800da88:	48e8      	ldr	r0, [pc, #928]	; (800de2c <GUI+0x424>)
 800da8a:	f7f5 fc11 	bl	80032b0 <BSP_LCD_SetTextColor>
 800da8e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800da92:	b298      	uxth	r0, r3
 800da94:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800da98:	b29a      	uxth	r2, r3
 800da9a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800daa4:	f7f5 fff6 	bl	8003a94 <BSP_LCD_FillRect>
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295
 800daac:	f7f5 fc00 	bl	80032b0 <BSP_LCD_SetTextColor>
 800dab0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dab4:	b29e      	uxth	r6, r3
 800dab6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800daba:	085b      	lsrs	r3, r3, #1
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f2 fd40 	bl	8000544 <__aeabi_i2d>
 800dac4:	4604      	mov	r4, r0
 800dac6:	460d      	mov	r5, r1
 800dac8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	f7f2 fbec 	bl	80002ac <__adddf3>
 800dad4:	4602      	mov	r2, r0
 800dad6:	460b      	mov	r3, r1
 800dad8:	4610      	mov	r0, r2
 800dada:	4619      	mov	r1, r3
 800dadc:	a3ce      	add	r3, pc, #824	; (adr r3, 800de18 <GUI+0x410>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fec3 	bl	800086c <__aeabi_ddiv>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	f04f 0000 	mov.w	r0, #0
 800daee:	49d0      	ldr	r1, [pc, #832]	; (800de30 <GUI+0x428>)
 800daf0:	f7f2 fbda 	bl	80002a8 <__aeabi_dsub>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4620      	mov	r0, r4
 800dafa:	4629      	mov	r1, r5
 800dafc:	f7f2 fd8c 	bl	8000618 <__aeabi_dmul>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4610      	mov	r0, r2
 800db06:	4619      	mov	r1, r3
 800db08:	f7f3 f85e 	bl	8000bc8 <__aeabi_d2uiz>
 800db0c:	4603      	mov	r3, r0
 800db0e:	b29a      	uxth	r2, r3
 800db10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800db14:	b29b      	uxth	r3, r3
 800db16:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7f5 ffba 	bl	8003a94 <BSP_LCD_FillRect>
 800db20:	48c2      	ldr	r0, [pc, #776]	; (800de2c <GUI+0x424>)
 800db22:	f7f5 fbc5 	bl	80032b0 <BSP_LCD_SetTextColor>
 800db26:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800db2a:	b298      	uxth	r0, r3
 800db2c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800db30:	b29a      	uxth	r2, r3
 800db32:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800db36:	b29b      	uxth	r3, r3
 800db38:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800db3c:	f7f5 fe8e 	bl	800385c <BSP_LCD_DrawRect>
 800db40:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800db44:	f7f5 fbb4 	bl	80032b0 <BSP_LCD_SetTextColor>
 800db48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800db52:	b291      	uxth	r1, r2
 800db54:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800db58:	b292      	uxth	r2, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f5 feb0 	bl	80038c0 <BSP_LCD_DrawCircle>
 800db60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db64:	4618      	mov	r0, r3
 800db66:	f7f2 fced 	bl	8000544 <__aeabi_i2d>
 800db6a:	4604      	mov	r4, r0
 800db6c:	460d      	mov	r5, r1
 800db6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800db72:	3b0a      	subs	r3, #10
 800db74:	4618      	mov	r0, r3
 800db76:	f7f2 fce5 	bl	8000544 <__aeabi_i2d>
 800db7a:	4680      	mov	r8, r0
 800db7c:	4689      	mov	r9, r1
 800db7e:	ed97 0b04 	vldr	d0, [r7, #16]
 800db82:	f003 fb35 	bl	80111f0 <sin>
 800db86:	ec53 2b10 	vmov	r2, r3, d0
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 fd43 	bl	8000618 <__aeabi_dmul>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4620      	mov	r0, r4
 800db98:	4629      	mov	r1, r5
 800db9a:	f7f2 fb85 	bl	80002a8 <__aeabi_dsub>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4610      	mov	r0, r2
 800dba4:	4619      	mov	r1, r3
 800dba6:	f7f3 f80f 	bl	8000bc8 <__aeabi_d2uiz>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	b29e      	uxth	r6, r3
 800dbae:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7f2 fcc6 	bl	8000544 <__aeabi_i2d>
 800dbb8:	4604      	mov	r4, r0
 800dbba:	460d      	mov	r5, r1
 800dbbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dbc0:	3b0a      	subs	r3, #10
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f2 fcbe 	bl	8000544 <__aeabi_i2d>
 800dbc8:	4680      	mov	r8, r0
 800dbca:	4689      	mov	r9, r1
 800dbcc:	ed97 0b04 	vldr	d0, [r7, #16]
 800dbd0:	f003 fab2 	bl	8011138 <cos>
 800dbd4:	ec53 2b10 	vmov	r2, r3, d0
 800dbd8:	4640      	mov	r0, r8
 800dbda:	4649      	mov	r1, r9
 800dbdc:	f7f2 fd1c 	bl	8000618 <__aeabi_dmul>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	f7f2 fb60 	bl	80002ac <__adddf3>
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	f7f2 ffe8 	bl	8000bc8 <__aeabi_d2uiz>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	fa1f fa83 	uxth.w	sl, r3
 800dbfe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7f2 fc9e 	bl	8000544 <__aeabi_i2d>
 800dc08:	4604      	mov	r4, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dc10:	3b0a      	subs	r3, #10
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7f2 fc96 	bl	8000544 <__aeabi_i2d>
 800dc18:	4680      	mov	r8, r0
 800dc1a:	4689      	mov	r9, r1
 800dc1c:	ed97 0b04 	vldr	d0, [r7, #16]
 800dc20:	f003 fae6 	bl	80111f0 <sin>
 800dc24:	ec53 2b10 	vmov	r2, r3, d0
 800dc28:	4640      	mov	r0, r8
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	f7f2 fcf4 	bl	8000618 <__aeabi_dmul>
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 fb38 	bl	80002ac <__adddf3>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4610      	mov	r0, r2
 800dc42:	4619      	mov	r1, r3
 800dc44:	f7f2 ffc0 	bl	8000bc8 <__aeabi_d2uiz>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	fa1f fb83 	uxth.w	fp, r3
 800dc4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7f2 fc76 	bl	8000544 <__aeabi_i2d>
 800dc58:	4604      	mov	r4, r0
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dc60:	3b0a      	subs	r3, #10
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7f2 fc6e 	bl	8000544 <__aeabi_i2d>
 800dc68:	4680      	mov	r8, r0
 800dc6a:	4689      	mov	r9, r1
 800dc6c:	ed97 0b04 	vldr	d0, [r7, #16]
 800dc70:	f003 fa62 	bl	8011138 <cos>
 800dc74:	ec53 2b10 	vmov	r2, r3, d0
 800dc78:	4640      	mov	r0, r8
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	f7f2 fccc 	bl	8000618 <__aeabi_dmul>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	4620      	mov	r0, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7f2 fb0e 	bl	80002a8 <__aeabi_dsub>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4610      	mov	r0, r2
 800dc92:	4619      	mov	r1, r3
 800dc94:	f7f2 ff98 	bl	8000bc8 <__aeabi_d2uiz>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	465a      	mov	r2, fp
 800dc9e:	4651      	mov	r1, sl
 800dca0:	4630      	mov	r0, r6
 800dca2:	f7f5 fd11 	bl	80036c8 <BSP_LCD_DrawLine>
 800dca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f2 fc4a 	bl	8000544 <__aeabi_i2d>
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dcb8:	3b0a      	subs	r3, #10
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f2 fc42 	bl	8000544 <__aeabi_i2d>
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	4689      	mov	r9, r1
 800dcc4:	ed97 0b04 	vldr	d0, [r7, #16]
 800dcc8:	f003 fa92 	bl	80111f0 <sin>
 800dccc:	ec53 2b10 	vmov	r2, r3, d0
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	f7f2 fca0 	bl	8000618 <__aeabi_dmul>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4620      	mov	r0, r4
 800dcde:	4629      	mov	r1, r5
 800dce0:	f7f2 fae4 	bl	80002ac <__adddf3>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4610      	mov	r0, r2
 800dcea:	4619      	mov	r1, r3
 800dcec:	f7f2 ff6c 	bl	8000bc8 <__aeabi_d2uiz>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	b29e      	uxth	r6, r3
 800dcf4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7f2 fc23 	bl	8000544 <__aeabi_i2d>
 800dcfe:	4604      	mov	r4, r0
 800dd00:	460d      	mov	r5, r1
 800dd02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dd06:	3b0a      	subs	r3, #10
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f2 fc1b 	bl	8000544 <__aeabi_i2d>
 800dd0e:	4680      	mov	r8, r0
 800dd10:	4689      	mov	r9, r1
 800dd12:	ed97 0b04 	vldr	d0, [r7, #16]
 800dd16:	f003 fa0f 	bl	8011138 <cos>
 800dd1a:	ec53 2b10 	vmov	r2, r3, d0
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fc79 	bl	8000618 <__aeabi_dmul>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f7f2 fabb 	bl	80002a8 <__aeabi_dsub>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4610      	mov	r0, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7f2 ff45 	bl	8000bc8 <__aeabi_d2uiz>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	fa1f f883 	uxth.w	r8, r3
 800dd44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7f2 fbfb 	bl	8000544 <__aeabi_i2d>
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	a333      	add	r3, pc, #204	; (adr r3, 800de20 <GUI+0x418>)
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dd5c:	f7f2 faa6 	bl	80002ac <__adddf3>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	ec43 2b17 	vmov	d7, r2, r3
 800dd68:	eeb0 0a47 	vmov.f32	s0, s14
 800dd6c:	eef0 0a67 	vmov.f32	s1, s15
 800dd70:	f003 fa3e 	bl	80111f0 <sin>
 800dd74:	ec51 0b10 	vmov	r0, r1, d0
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	4b2d      	ldr	r3, [pc, #180]	; (800de34 <GUI+0x42c>)
 800dd7e:	f7f2 fc4b 	bl	8000618 <__aeabi_dmul>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4620      	mov	r0, r4
 800dd88:	4629      	mov	r1, r5
 800dd8a:	f7f2 fa8f 	bl	80002ac <__adddf3>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4610      	mov	r0, r2
 800dd94:	4619      	mov	r1, r3
 800dd96:	f7f2 ff17 	bl	8000bc8 <__aeabi_d2uiz>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	fa1f f983 	uxth.w	r9, r3
 800dda0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f2 fbcd 	bl	8000544 <__aeabi_i2d>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	460d      	mov	r5, r1
 800ddae:	a31c      	add	r3, pc, #112	; (adr r3, 800de20 <GUI+0x418>)
 800ddb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ddb8:	f7f2 fa78 	bl	80002ac <__adddf3>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	ec43 2b17 	vmov	d7, r2, r3
 800ddc4:	eeb0 0a47 	vmov.f32	s0, s14
 800ddc8:	eef0 0a67 	vmov.f32	s1, s15
 800ddcc:	f003 f9b4 	bl	8011138 <cos>
 800ddd0:	ec51 0b10 	vmov	r0, r1, d0
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	4b16      	ldr	r3, [pc, #88]	; (800de34 <GUI+0x42c>)
 800ddda:	f7f2 fc1d 	bl	8000618 <__aeabi_dmul>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4620      	mov	r0, r4
 800dde4:	4629      	mov	r1, r5
 800dde6:	f7f2 fa5f 	bl	80002a8 <__aeabi_dsub>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4610      	mov	r0, r2
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	f7f2 fee9 	bl	8000bc8 <__aeabi_d2uiz>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	464a      	mov	r2, r9
 800ddfc:	4641      	mov	r1, r8
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7f5 fc62 	bl	80036c8 <BSP_LCD_DrawLine>
 800de04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de08:	4618      	mov	r0, r3
 800de0a:	f7f2 fb9b 	bl	8000544 <__aeabi_i2d>
 800de0e:	4604      	mov	r4, r0
 800de10:	e012      	b.n	800de38 <GUI+0x430>
 800de12:	bf00      	nop
 800de14:	f3af 8000 	nop.w
 800de18:	544486e0 	.word	0x544486e0
 800de1c:	400921fb 	.word	0x400921fb
 800de20:	e340cf17 	.word	0xe340cf17
 800de24:	3fc90562 	.word	0x3fc90562
 800de28:	20000050 	.word	0x20000050
 800de2c:	ff0000ff 	.word	0xff0000ff
 800de30:	3ff00000 	.word	0x3ff00000
 800de34:	40370000 	.word	0x40370000
 800de38:	460d      	mov	r5, r1
 800de3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800de3e:	3b0a      	subs	r3, #10
 800de40:	4618      	mov	r0, r3
 800de42:	f7f2 fb7f 	bl	8000544 <__aeabi_i2d>
 800de46:	4680      	mov	r8, r0
 800de48:	4689      	mov	r9, r1
 800de4a:	ed97 0b04 	vldr	d0, [r7, #16]
 800de4e:	f003 f9cf 	bl	80111f0 <sin>
 800de52:	ec53 2b10 	vmov	r2, r3, d0
 800de56:	4640      	mov	r0, r8
 800de58:	4649      	mov	r1, r9
 800de5a:	f7f2 fbdd 	bl	8000618 <__aeabi_dmul>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	4620      	mov	r0, r4
 800de64:	4629      	mov	r1, r5
 800de66:	f7f2 fa21 	bl	80002ac <__adddf3>
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4610      	mov	r0, r2
 800de70:	4619      	mov	r1, r3
 800de72:	f7f2 fea9 	bl	8000bc8 <__aeabi_d2uiz>
 800de76:	4603      	mov	r3, r0
 800de78:	b29e      	uxth	r6, r3
 800de7a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fb60 	bl	8000544 <__aeabi_i2d>
 800de84:	4604      	mov	r4, r0
 800de86:	460d      	mov	r5, r1
 800de88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800de8c:	3b0a      	subs	r3, #10
 800de8e:	4618      	mov	r0, r3
 800de90:	f7f2 fb58 	bl	8000544 <__aeabi_i2d>
 800de94:	4680      	mov	r8, r0
 800de96:	4689      	mov	r9, r1
 800de98:	ed97 0b04 	vldr	d0, [r7, #16]
 800de9c:	f003 f94c 	bl	8011138 <cos>
 800dea0:	ec53 2b10 	vmov	r2, r3, d0
 800dea4:	4640      	mov	r0, r8
 800dea6:	4649      	mov	r1, r9
 800dea8:	f7f2 fbb6 	bl	8000618 <__aeabi_dmul>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4620      	mov	r0, r4
 800deb2:	4629      	mov	r1, r5
 800deb4:	f7f2 f9f8 	bl	80002a8 <__aeabi_dsub>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4610      	mov	r0, r2
 800debe:	4619      	mov	r1, r3
 800dec0:	f7f2 fe82 	bl	8000bc8 <__aeabi_d2uiz>
 800dec4:	4603      	mov	r3, r0
 800dec6:	fa1f f883 	uxth.w	r8, r3
 800deca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f2 fb38 	bl	8000544 <__aeabi_i2d>
 800ded4:	4604      	mov	r4, r0
 800ded6:	460d      	mov	r5, r1
 800ded8:	a3d3      	add	r3, pc, #844	; (adr r3, 800e228 <GUI+0x820>)
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dee2:	f7f2 f9e1 	bl	80002a8 <__aeabi_dsub>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	ec43 2b17 	vmov	d7, r2, r3
 800deee:	eeb0 0a47 	vmov.f32	s0, s14
 800def2:	eef0 0a67 	vmov.f32	s1, s15
 800def6:	f003 f97b 	bl	80111f0 <sin>
 800defa:	ec51 0b10 	vmov	r0, r1, d0
 800defe:	f04f 0200 	mov.w	r2, #0
 800df02:	4bcd      	ldr	r3, [pc, #820]	; (800e238 <GUI+0x830>)
 800df04:	f7f2 fb88 	bl	8000618 <__aeabi_dmul>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 f9cc 	bl	80002ac <__adddf3>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4610      	mov	r0, r2
 800df1a:	4619      	mov	r1, r3
 800df1c:	f7f2 fe54 	bl	8000bc8 <__aeabi_d2uiz>
 800df20:	4603      	mov	r3, r0
 800df22:	fa1f f983 	uxth.w	r9, r3
 800df26:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7f2 fb0a 	bl	8000544 <__aeabi_i2d>
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	a3bc      	add	r3, pc, #752	; (adr r3, 800e228 <GUI+0x820>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800df3e:	f7f2 f9b3 	bl	80002a8 <__aeabi_dsub>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	ec43 2b17 	vmov	d7, r2, r3
 800df4a:	eeb0 0a47 	vmov.f32	s0, s14
 800df4e:	eef0 0a67 	vmov.f32	s1, s15
 800df52:	f003 f8f1 	bl	8011138 <cos>
 800df56:	ec51 0b10 	vmov	r0, r1, d0
 800df5a:	f04f 0200 	mov.w	r2, #0
 800df5e:	4bb6      	ldr	r3, [pc, #728]	; (800e238 <GUI+0x830>)
 800df60:	f7f2 fb5a 	bl	8000618 <__aeabi_dmul>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4620      	mov	r0, r4
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 f99c 	bl	80002a8 <__aeabi_dsub>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4610      	mov	r0, r2
 800df76:	4619      	mov	r1, r3
 800df78:	f7f2 fe26 	bl	8000bc8 <__aeabi_d2uiz>
 800df7c:	4603      	mov	r3, r0
 800df7e:	b29b      	uxth	r3, r3
 800df80:	464a      	mov	r2, r9
 800df82:	4641      	mov	r1, r8
 800df84:	4630      	mov	r0, r6
 800df86:	f7f5 fb9f 	bl	80036c8 <BSP_LCD_DrawLine>
 800df8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df8e:	b298      	uxth	r0, r3
 800df90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800df94:	b29a      	uxth	r2, r3
 800df96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	3b0f      	subs	r3, #15
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	224e      	movs	r2, #78	; 0x4e
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	f7f5 fa0c 	bl	80033c4 <BSP_LCD_DisplayChar>
 800dfac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfb0:	b298      	uxth	r0, r3
 800dfb2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	4413      	add	r3, r2
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3305      	adds	r3, #5
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	2253      	movs	r2, #83	; 0x53
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f7f5 f9fb 	bl	80033c4 <BSP_LCD_DisplayChar>
 800dfce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	3b0a      	subs	r3, #10
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dfe6:	b291      	uxth	r1, r2
 800dfe8:	2257      	movs	r2, #87	; 0x57
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7f5 f9ea 	bl	80033c4 <BSP_LCD_DisplayChar>
 800dff0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	4413      	add	r3, r2
 800dffe:	b29b      	uxth	r3, r3
 800e000:	3305      	adds	r3, #5
 800e002:	b29b      	uxth	r3, r3
 800e004:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800e008:	b291      	uxth	r1, r2
 800e00a:	2245      	movs	r2, #69	; 0x45
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7f5 f9d9 	bl	80033c4 <BSP_LCD_DisplayChar>
 800e012:	488a      	ldr	r0, [pc, #552]	; (800e23c <GUI+0x834>)
 800e014:	f7f5 f94c 	bl	80032b0 <BSP_LCD_SetTextColor>
 800e018:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e01c:	b298      	uxth	r0, r3
 800e01e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e022:	b299      	uxth	r1, r3
 800e024:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800e028:	b29a      	uxth	r2, r3
 800e02a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800e02e:	b29b      	uxth	r3, r3
 800e030:	f7f5 fd30 	bl	8003a94 <BSP_LCD_FillRect>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	f7f5 f93a 	bl	80032b0 <BSP_LCD_SetTextColor>
 800e03c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	f7f2 f932 	bl	80002ac <__adddf3>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4610      	mov	r0, r2
 800e04e:	4619      	mov	r1, r3
 800e050:	a377      	add	r3, pc, #476	; (adr r3, 800e230 <GUI+0x828>)
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	f7f2 fc09 	bl	800086c <__aeabi_ddiv>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	f04f 0000 	mov.w	r0, #0
 800e062:	4977      	ldr	r1, [pc, #476]	; (800e240 <GUI+0x838>)
 800e064:	f7f2 f920 	bl	80002a8 <__aeabi_dsub>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4610      	mov	r0, r2
 800e06e:	4619      	mov	r1, r3
 800e070:	f04f 0200 	mov.w	r2, #0
 800e074:	4b73      	ldr	r3, [pc, #460]	; (800e244 <GUI+0x83c>)
 800e076:	f7f2 facf 	bl	8000618 <__aeabi_dmul>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4610      	mov	r0, r2
 800e080:	4619      	mov	r1, r3
 800e082:	f7f2 fda1 	bl	8000bc8 <__aeabi_d2uiz>
 800e086:	4603      	mov	r3, r0
 800e088:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e08c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e090:	b298      	uxth	r0, r3
 800e092:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e096:	b299      	uxth	r1, r3
 800e098:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0a2:	f7f5 fcf7 	bl	8003a94 <BSP_LCD_FillRect>
 800e0a6:	4865      	ldr	r0, [pc, #404]	; (800e23c <GUI+0x834>)
 800e0a8:	f7f5 f902 	bl	80032b0 <BSP_LCD_SetTextColor>
 800e0ac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e0b0:	b298      	uxth	r0, r3
 800e0b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e0b6:	b299      	uxth	r1, r3
 800e0b8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	f7f5 fbca 	bl	800385c <BSP_LCD_DrawRect>
 800e0c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800e0cc:	f7f5 f8f0 	bl	80032b0 <BSP_LCD_SetTextColor>
 800e0d0:	2246      	movs	r2, #70	; 0x46
 800e0d2:	21cd      	movs	r1, #205	; 0xcd
 800e0d4:	204b      	movs	r0, #75	; 0x4b
 800e0d6:	f7f5 fab5 	bl	8003644 <BSP_LCD_DrawVLine>
 800e0da:	2246      	movs	r2, #70	; 0x46
 800e0dc:	21f0      	movs	r1, #240	; 0xf0
 800e0de:	20a0      	movs	r0, #160	; 0xa0
 800e0e0:	f7f5 fa72 	bl	80035c8 <BSP_LCD_DrawHLine>
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	4a58      	ldr	r2, [pc, #352]	; (800e248 <GUI+0x840>)
 800e0e8:	21aa      	movs	r1, #170	; 0xaa
 800e0ea:	202d      	movs	r0, #45	; 0x2d
 800e0ec:	f7f5 f9ae 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e0f0:	f04f 0200 	mov.w	r2, #0
 800e0f4:	4b55      	ldr	r3, [pc, #340]	; (800e24c <GUI+0x844>)
 800e0f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e0fa:	f7f2 fa8d 	bl	8000618 <__aeabi_dmul>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	4610      	mov	r0, r2
 800e104:	4619      	mov	r1, r3
 800e106:	a34a      	add	r3, pc, #296	; (adr r3, 800e230 <GUI+0x828>)
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f7f2 fbae 	bl	800086c <__aeabi_ddiv>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e118:	494d      	ldr	r1, [pc, #308]	; (800e250 <GUI+0x848>)
 800e11a:	f000 fdf1 	bl	800ed00 <siprintf>
 800e11e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e122:	2303      	movs	r3, #3
 800e124:	21be      	movs	r1, #190	; 0xbe
 800e126:	202d      	movs	r0, #45	; 0x2d
 800e128:	f7f5 f990 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e12c:	2303      	movs	r3, #3
 800e12e:	4a49      	ldr	r2, [pc, #292]	; (800e254 <GUI+0x84c>)
 800e130:	2182      	movs	r1, #130	; 0x82
 800e132:	20a0      	movs	r0, #160	; 0xa0
 800e134:	f7f5 f98a 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e138:	f04f 0200 	mov.w	r2, #0
 800e13c:	4b43      	ldr	r3, [pc, #268]	; (800e24c <GUI+0x844>)
 800e13e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e142:	f7f2 fa69 	bl	8000618 <__aeabi_dmul>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	a338      	add	r3, pc, #224	; (adr r3, 800e230 <GUI+0x828>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f7f2 fb8a 	bl	800086c <__aeabi_ddiv>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e160:	493b      	ldr	r1, [pc, #236]	; (800e250 <GUI+0x848>)
 800e162:	f000 fdcd 	bl	800ed00 <siprintf>
 800e166:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e16a:	2303      	movs	r3, #3
 800e16c:	2196      	movs	r1, #150	; 0x96
 800e16e:	20a0      	movs	r0, #160	; 0xa0
 800e170:	f7f5 f96c 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e174:	2303      	movs	r3, #3
 800e176:	4a38      	ldr	r2, [pc, #224]	; (800e258 <GUI+0x850>)
 800e178:	213c      	movs	r1, #60	; 0x3c
 800e17a:	200a      	movs	r0, #10
 800e17c:	f7f5 f966 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e180:	f04f 0200 	mov.w	r2, #0
 800e184:	4b31      	ldr	r3, [pc, #196]	; (800e24c <GUI+0x844>)
 800e186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e18a:	f7f2 fa45 	bl	8000618 <__aeabi_dmul>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4610      	mov	r0, r2
 800e194:	4619      	mov	r1, r3
 800e196:	a326      	add	r3, pc, #152	; (adr r3, 800e230 <GUI+0x828>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f7f2 fb66 	bl	800086c <__aeabi_ddiv>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e1a8:	4929      	ldr	r1, [pc, #164]	; (800e250 <GUI+0x848>)
 800e1aa:	f000 fda9 	bl	800ed00 <siprintf>
 800e1ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e1b2:	2303      	movs	r3, #3
 800e1b4:	2150      	movs	r1, #80	; 0x50
 800e1b6:	200a      	movs	r0, #10
 800e1b8:	f7f5 f948 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e1bc:	2303      	movs	r3, #3
 800e1be:	4a27      	ldr	r2, [pc, #156]	; (800e25c <GUI+0x854>)
 800e1c0:	210a      	movs	r1, #10
 800e1c2:	200a      	movs	r0, #10
 800e1c4:	f7f5 f942 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e1c8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e1cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1d0:	4923      	ldr	r1, [pc, #140]	; (800e260 <GUI+0x858>)
 800e1d2:	f000 fd95 	bl	800ed00 <siprintf>
 800e1d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e1da:	2303      	movs	r3, #3
 800e1dc:	211e      	movs	r1, #30
 800e1de:	200a      	movs	r0, #10
 800e1e0:	f7f5 f934 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	4a1f      	ldr	r2, [pc, #124]	; (800e264 <GUI+0x85c>)
 800e1e8:	210a      	movs	r1, #10
 800e1ea:	20a0      	movs	r0, #160	; 0xa0
 800e1ec:	f7f5 f92e 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e1f0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1f8:	4915      	ldr	r1, [pc, #84]	; (800e250 <GUI+0x848>)
 800e1fa:	f000 fd81 	bl	800ed00 <siprintf>
 800e1fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e202:	2303      	movs	r3, #3
 800e204:	211e      	movs	r1, #30
 800e206:	20a0      	movs	r0, #160	; 0xa0
 800e208:	f7f5 f920 	bl	800344c <BSP_LCD_DisplayStringAt>
 800e20c:	2064      	movs	r0, #100	; 0x64
 800e20e:	f7f6 f8a5 	bl	800435c <HAL_Delay>
 800e212:	2101      	movs	r1, #1
 800e214:	2001      	movs	r0, #1
 800e216:	f7f5 f80d 	bl	8003234 <BSP_LCD_SetLayerVisible>
 800e21a:	bf00      	nop
 800e21c:	3754      	adds	r7, #84	; 0x54
 800e21e:	46bd      	mov	sp, r7
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	f3af 8000 	nop.w
 800e228:	e340cf17 	.word	0xe340cf17
 800e22c:	3fc90562 	.word	0x3fc90562
 800e230:	544486e0 	.word	0x544486e0
 800e234:	400921fb 	.word	0x400921fb
 800e238:	40370000 	.word	0x40370000
 800e23c:	ffff0000 	.word	0xffff0000
 800e240:	3ff00000 	.word	0x3ff00000
 800e244:	40518000 	.word	0x40518000
 800e248:	08012420 	.word	0x08012420
 800e24c:	40668000 	.word	0x40668000
 800e250:	08012428 	.word	0x08012428
 800e254:	08012434 	.word	0x08012434
 800e258:	0801243c 	.word	0x0801243c
 800e25c:	08012444 	.word	0x08012444
 800e260:	0801244c 	.word	0x0801244c
 800e264:	08012454 	.word	0x08012454

0800e268 <__errno>:
 800e268:	4b01      	ldr	r3, [pc, #4]	; (800e270 <__errno+0x8>)
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	20000068 	.word	0x20000068

0800e274 <exit>:
 800e274:	b508      	push	{r3, lr}
 800e276:	4b07      	ldr	r3, [pc, #28]	; (800e294 <exit+0x20>)
 800e278:	4604      	mov	r4, r0
 800e27a:	b113      	cbz	r3, 800e282 <exit+0xe>
 800e27c:	2100      	movs	r1, #0
 800e27e:	f3af 8000 	nop.w
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <exit+0x24>)
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e288:	b103      	cbz	r3, 800e28c <exit+0x18>
 800e28a:	4798      	blx	r3
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7f3 fe5b 	bl	8001f48 <_exit>
 800e292:	bf00      	nop
 800e294:	00000000 	.word	0x00000000
 800e298:	08014f94 	.word	0x08014f94

0800e29c <__libc_init_array>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	4d0d      	ldr	r5, [pc, #52]	; (800e2d4 <__libc_init_array+0x38>)
 800e2a0:	4c0d      	ldr	r4, [pc, #52]	; (800e2d8 <__libc_init_array+0x3c>)
 800e2a2:	1b64      	subs	r4, r4, r5
 800e2a4:	10a4      	asrs	r4, r4, #2
 800e2a6:	2600      	movs	r6, #0
 800e2a8:	42a6      	cmp	r6, r4
 800e2aa:	d109      	bne.n	800e2c0 <__libc_init_array+0x24>
 800e2ac:	4d0b      	ldr	r5, [pc, #44]	; (800e2dc <__libc_init_array+0x40>)
 800e2ae:	4c0c      	ldr	r4, [pc, #48]	; (800e2e0 <__libc_init_array+0x44>)
 800e2b0:	f003 ffcc 	bl	801224c <_init>
 800e2b4:	1b64      	subs	r4, r4, r5
 800e2b6:	10a4      	asrs	r4, r4, #2
 800e2b8:	2600      	movs	r6, #0
 800e2ba:	42a6      	cmp	r6, r4
 800e2bc:	d105      	bne.n	800e2ca <__libc_init_array+0x2e>
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2c4:	4798      	blx	r3
 800e2c6:	3601      	adds	r6, #1
 800e2c8:	e7ee      	b.n	800e2a8 <__libc_init_array+0xc>
 800e2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ce:	4798      	blx	r3
 800e2d0:	3601      	adds	r6, #1
 800e2d2:	e7f2      	b.n	800e2ba <__libc_init_array+0x1e>
 800e2d4:	08015558 	.word	0x08015558
 800e2d8:	08015558 	.word	0x08015558
 800e2dc:	08015558 	.word	0x08015558
 800e2e0:	0801555c 	.word	0x0801555c

0800e2e4 <memcpy>:
 800e2e4:	440a      	add	r2, r1
 800e2e6:	4291      	cmp	r1, r2
 800e2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2ec:	d100      	bne.n	800e2f0 <memcpy+0xc>
 800e2ee:	4770      	bx	lr
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2fa:	4291      	cmp	r1, r2
 800e2fc:	d1f9      	bne.n	800e2f2 <memcpy+0xe>
 800e2fe:	bd10      	pop	{r4, pc}

0800e300 <memset>:
 800e300:	4402      	add	r2, r0
 800e302:	4603      	mov	r3, r0
 800e304:	4293      	cmp	r3, r2
 800e306:	d100      	bne.n	800e30a <memset+0xa>
 800e308:	4770      	bx	lr
 800e30a:	f803 1b01 	strb.w	r1, [r3], #1
 800e30e:	e7f9      	b.n	800e304 <memset+0x4>

0800e310 <__cvt>:
 800e310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	ec55 4b10 	vmov	r4, r5, d0
 800e318:	2d00      	cmp	r5, #0
 800e31a:	460e      	mov	r6, r1
 800e31c:	4619      	mov	r1, r3
 800e31e:	462b      	mov	r3, r5
 800e320:	bfbb      	ittet	lt
 800e322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e326:	461d      	movlt	r5, r3
 800e328:	2300      	movge	r3, #0
 800e32a:	232d      	movlt	r3, #45	; 0x2d
 800e32c:	700b      	strb	r3, [r1, #0]
 800e32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e334:	4691      	mov	r9, r2
 800e336:	f023 0820 	bic.w	r8, r3, #32
 800e33a:	bfbc      	itt	lt
 800e33c:	4622      	movlt	r2, r4
 800e33e:	4614      	movlt	r4, r2
 800e340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e344:	d005      	beq.n	800e352 <__cvt+0x42>
 800e346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e34a:	d100      	bne.n	800e34e <__cvt+0x3e>
 800e34c:	3601      	adds	r6, #1
 800e34e:	2102      	movs	r1, #2
 800e350:	e000      	b.n	800e354 <__cvt+0x44>
 800e352:	2103      	movs	r1, #3
 800e354:	ab03      	add	r3, sp, #12
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	ab02      	add	r3, sp, #8
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	ec45 4b10 	vmov	d0, r4, r5
 800e360:	4653      	mov	r3, sl
 800e362:	4632      	mov	r2, r6
 800e364:	f000 fe38 	bl	800efd8 <_dtoa_r>
 800e368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e36c:	4607      	mov	r7, r0
 800e36e:	d102      	bne.n	800e376 <__cvt+0x66>
 800e370:	f019 0f01 	tst.w	r9, #1
 800e374:	d022      	beq.n	800e3bc <__cvt+0xac>
 800e376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e37a:	eb07 0906 	add.w	r9, r7, r6
 800e37e:	d110      	bne.n	800e3a2 <__cvt+0x92>
 800e380:	783b      	ldrb	r3, [r7, #0]
 800e382:	2b30      	cmp	r3, #48	; 0x30
 800e384:	d10a      	bne.n	800e39c <__cvt+0x8c>
 800e386:	2200      	movs	r2, #0
 800e388:	2300      	movs	r3, #0
 800e38a:	4620      	mov	r0, r4
 800e38c:	4629      	mov	r1, r5
 800e38e:	f7f2 fbab 	bl	8000ae8 <__aeabi_dcmpeq>
 800e392:	b918      	cbnz	r0, 800e39c <__cvt+0x8c>
 800e394:	f1c6 0601 	rsb	r6, r6, #1
 800e398:	f8ca 6000 	str.w	r6, [sl]
 800e39c:	f8da 3000 	ldr.w	r3, [sl]
 800e3a0:	4499      	add	r9, r3
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	f7f2 fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3ae:	b108      	cbz	r0, 800e3b4 <__cvt+0xa4>
 800e3b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3b4:	2230      	movs	r2, #48	; 0x30
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	454b      	cmp	r3, r9
 800e3ba:	d307      	bcc.n	800e3cc <__cvt+0xbc>
 800e3bc:	9b03      	ldr	r3, [sp, #12]
 800e3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3c0:	1bdb      	subs	r3, r3, r7
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	6013      	str	r3, [r2, #0]
 800e3c6:	b004      	add	sp, #16
 800e3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3cc:	1c59      	adds	r1, r3, #1
 800e3ce:	9103      	str	r1, [sp, #12]
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	e7f0      	b.n	800e3b6 <__cvt+0xa6>

0800e3d4 <__exponent>:
 800e3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2900      	cmp	r1, #0
 800e3da:	bfb8      	it	lt
 800e3dc:	4249      	neglt	r1, r1
 800e3de:	f803 2b02 	strb.w	r2, [r3], #2
 800e3e2:	bfb4      	ite	lt
 800e3e4:	222d      	movlt	r2, #45	; 0x2d
 800e3e6:	222b      	movge	r2, #43	; 0x2b
 800e3e8:	2909      	cmp	r1, #9
 800e3ea:	7042      	strb	r2, [r0, #1]
 800e3ec:	dd2a      	ble.n	800e444 <__exponent+0x70>
 800e3ee:	f10d 0407 	add.w	r4, sp, #7
 800e3f2:	46a4      	mov	ip, r4
 800e3f4:	270a      	movs	r7, #10
 800e3f6:	46a6      	mov	lr, r4
 800e3f8:	460a      	mov	r2, r1
 800e3fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e3fe:	fb07 1516 	mls	r5, r7, r6, r1
 800e402:	3530      	adds	r5, #48	; 0x30
 800e404:	2a63      	cmp	r2, #99	; 0x63
 800e406:	f104 34ff 	add.w	r4, r4, #4294967295
 800e40a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e40e:	4631      	mov	r1, r6
 800e410:	dcf1      	bgt.n	800e3f6 <__exponent+0x22>
 800e412:	3130      	adds	r1, #48	; 0x30
 800e414:	f1ae 0502 	sub.w	r5, lr, #2
 800e418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e41c:	1c44      	adds	r4, r0, #1
 800e41e:	4629      	mov	r1, r5
 800e420:	4561      	cmp	r1, ip
 800e422:	d30a      	bcc.n	800e43a <__exponent+0x66>
 800e424:	f10d 0209 	add.w	r2, sp, #9
 800e428:	eba2 020e 	sub.w	r2, r2, lr
 800e42c:	4565      	cmp	r5, ip
 800e42e:	bf88      	it	hi
 800e430:	2200      	movhi	r2, #0
 800e432:	4413      	add	r3, r2
 800e434:	1a18      	subs	r0, r3, r0
 800e436:	b003      	add	sp, #12
 800e438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e43e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e442:	e7ed      	b.n	800e420 <__exponent+0x4c>
 800e444:	2330      	movs	r3, #48	; 0x30
 800e446:	3130      	adds	r1, #48	; 0x30
 800e448:	7083      	strb	r3, [r0, #2]
 800e44a:	70c1      	strb	r1, [r0, #3]
 800e44c:	1d03      	adds	r3, r0, #4
 800e44e:	e7f1      	b.n	800e434 <__exponent+0x60>

0800e450 <_printf_float>:
 800e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	ed2d 8b02 	vpush	{d8}
 800e458:	b08d      	sub	sp, #52	; 0x34
 800e45a:	460c      	mov	r4, r1
 800e45c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e460:	4616      	mov	r6, r2
 800e462:	461f      	mov	r7, r3
 800e464:	4605      	mov	r5, r0
 800e466:	f001 fd5b 	bl	800ff20 <_localeconv_r>
 800e46a:	f8d0 a000 	ldr.w	sl, [r0]
 800e46e:	4650      	mov	r0, sl
 800e470:	f7f1 febe 	bl	80001f0 <strlen>
 800e474:	2300      	movs	r3, #0
 800e476:	930a      	str	r3, [sp, #40]	; 0x28
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	9305      	str	r3, [sp, #20]
 800e47c:	f8d8 3000 	ldr.w	r3, [r8]
 800e480:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e484:	3307      	adds	r3, #7
 800e486:	f023 0307 	bic.w	r3, r3, #7
 800e48a:	f103 0208 	add.w	r2, r3, #8
 800e48e:	f8c8 2000 	str.w	r2, [r8]
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e49a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e49e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4a2:	9307      	str	r3, [sp, #28]
 800e4a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4a8:	ee08 0a10 	vmov	s16, r0
 800e4ac:	4b9f      	ldr	r3, [pc, #636]	; (800e72c <_printf_float+0x2dc>)
 800e4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b6:	f7f2 fb49 	bl	8000b4c <__aeabi_dcmpun>
 800e4ba:	bb88      	cbnz	r0, 800e520 <_printf_float+0xd0>
 800e4bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4c0:	4b9a      	ldr	r3, [pc, #616]	; (800e72c <_printf_float+0x2dc>)
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	f7f2 fb23 	bl	8000b10 <__aeabi_dcmple>
 800e4ca:	bb48      	cbnz	r0, 800e520 <_printf_float+0xd0>
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	f7f2 fb12 	bl	8000afc <__aeabi_dcmplt>
 800e4d8:	b110      	cbz	r0, 800e4e0 <_printf_float+0x90>
 800e4da:	232d      	movs	r3, #45	; 0x2d
 800e4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e0:	4b93      	ldr	r3, [pc, #588]	; (800e730 <_printf_float+0x2e0>)
 800e4e2:	4894      	ldr	r0, [pc, #592]	; (800e734 <_printf_float+0x2e4>)
 800e4e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e4e8:	bf94      	ite	ls
 800e4ea:	4698      	movls	r8, r3
 800e4ec:	4680      	movhi	r8, r0
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	6123      	str	r3, [r4, #16]
 800e4f2:	9b05      	ldr	r3, [sp, #20]
 800e4f4:	f023 0204 	bic.w	r2, r3, #4
 800e4f8:	6022      	str	r2, [r4, #0]
 800e4fa:	f04f 0900 	mov.w	r9, #0
 800e4fe:	9700      	str	r7, [sp, #0]
 800e500:	4633      	mov	r3, r6
 800e502:	aa0b      	add	r2, sp, #44	; 0x2c
 800e504:	4621      	mov	r1, r4
 800e506:	4628      	mov	r0, r5
 800e508:	f000 f9d8 	bl	800e8bc <_printf_common>
 800e50c:	3001      	adds	r0, #1
 800e50e:	f040 8090 	bne.w	800e632 <_printf_float+0x1e2>
 800e512:	f04f 30ff 	mov.w	r0, #4294967295
 800e516:	b00d      	add	sp, #52	; 0x34
 800e518:	ecbd 8b02 	vpop	{d8}
 800e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e520:	4642      	mov	r2, r8
 800e522:	464b      	mov	r3, r9
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f2 fb10 	bl	8000b4c <__aeabi_dcmpun>
 800e52c:	b140      	cbz	r0, 800e540 <_printf_float+0xf0>
 800e52e:	464b      	mov	r3, r9
 800e530:	2b00      	cmp	r3, #0
 800e532:	bfbc      	itt	lt
 800e534:	232d      	movlt	r3, #45	; 0x2d
 800e536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e53a:	487f      	ldr	r0, [pc, #508]	; (800e738 <_printf_float+0x2e8>)
 800e53c:	4b7f      	ldr	r3, [pc, #508]	; (800e73c <_printf_float+0x2ec>)
 800e53e:	e7d1      	b.n	800e4e4 <_printf_float+0x94>
 800e540:	6863      	ldr	r3, [r4, #4]
 800e542:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e546:	9206      	str	r2, [sp, #24]
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	d13f      	bne.n	800e5cc <_printf_float+0x17c>
 800e54c:	2306      	movs	r3, #6
 800e54e:	6063      	str	r3, [r4, #4]
 800e550:	9b05      	ldr	r3, [sp, #20]
 800e552:	6861      	ldr	r1, [r4, #4]
 800e554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e558:	2300      	movs	r3, #0
 800e55a:	9303      	str	r3, [sp, #12]
 800e55c:	ab0a      	add	r3, sp, #40	; 0x28
 800e55e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e562:	ab09      	add	r3, sp, #36	; 0x24
 800e564:	ec49 8b10 	vmov	d0, r8, r9
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	6022      	str	r2, [r4, #0]
 800e56c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e570:	4628      	mov	r0, r5
 800e572:	f7ff fecd 	bl	800e310 <__cvt>
 800e576:	9b06      	ldr	r3, [sp, #24]
 800e578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e57a:	2b47      	cmp	r3, #71	; 0x47
 800e57c:	4680      	mov	r8, r0
 800e57e:	d108      	bne.n	800e592 <_printf_float+0x142>
 800e580:	1cc8      	adds	r0, r1, #3
 800e582:	db02      	blt.n	800e58a <_printf_float+0x13a>
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	4299      	cmp	r1, r3
 800e588:	dd41      	ble.n	800e60e <_printf_float+0x1be>
 800e58a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e58e:	fa5f fb8b 	uxtb.w	fp, fp
 800e592:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e596:	d820      	bhi.n	800e5da <_printf_float+0x18a>
 800e598:	3901      	subs	r1, #1
 800e59a:	465a      	mov	r2, fp
 800e59c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e5a2:	f7ff ff17 	bl	800e3d4 <__exponent>
 800e5a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5a8:	1813      	adds	r3, r2, r0
 800e5aa:	2a01      	cmp	r2, #1
 800e5ac:	4681      	mov	r9, r0
 800e5ae:	6123      	str	r3, [r4, #16]
 800e5b0:	dc02      	bgt.n	800e5b8 <_printf_float+0x168>
 800e5b2:	6822      	ldr	r2, [r4, #0]
 800e5b4:	07d2      	lsls	r2, r2, #31
 800e5b6:	d501      	bpl.n	800e5bc <_printf_float+0x16c>
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	6123      	str	r3, [r4, #16]
 800e5bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d09c      	beq.n	800e4fe <_printf_float+0xae>
 800e5c4:	232d      	movs	r3, #45	; 0x2d
 800e5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5ca:	e798      	b.n	800e4fe <_printf_float+0xae>
 800e5cc:	9a06      	ldr	r2, [sp, #24]
 800e5ce:	2a47      	cmp	r2, #71	; 0x47
 800e5d0:	d1be      	bne.n	800e550 <_printf_float+0x100>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1bc      	bne.n	800e550 <_printf_float+0x100>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e7b9      	b.n	800e54e <_printf_float+0xfe>
 800e5da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e5de:	d118      	bne.n	800e612 <_printf_float+0x1c2>
 800e5e0:	2900      	cmp	r1, #0
 800e5e2:	6863      	ldr	r3, [r4, #4]
 800e5e4:	dd0b      	ble.n	800e5fe <_printf_float+0x1ae>
 800e5e6:	6121      	str	r1, [r4, #16]
 800e5e8:	b913      	cbnz	r3, 800e5f0 <_printf_float+0x1a0>
 800e5ea:	6822      	ldr	r2, [r4, #0]
 800e5ec:	07d0      	lsls	r0, r2, #31
 800e5ee:	d502      	bpl.n	800e5f6 <_printf_float+0x1a6>
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	440b      	add	r3, r1
 800e5f4:	6123      	str	r3, [r4, #16]
 800e5f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5f8:	f04f 0900 	mov.w	r9, #0
 800e5fc:	e7de      	b.n	800e5bc <_printf_float+0x16c>
 800e5fe:	b913      	cbnz	r3, 800e606 <_printf_float+0x1b6>
 800e600:	6822      	ldr	r2, [r4, #0]
 800e602:	07d2      	lsls	r2, r2, #31
 800e604:	d501      	bpl.n	800e60a <_printf_float+0x1ba>
 800e606:	3302      	adds	r3, #2
 800e608:	e7f4      	b.n	800e5f4 <_printf_float+0x1a4>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e7f2      	b.n	800e5f4 <_printf_float+0x1a4>
 800e60e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e614:	4299      	cmp	r1, r3
 800e616:	db05      	blt.n	800e624 <_printf_float+0x1d4>
 800e618:	6823      	ldr	r3, [r4, #0]
 800e61a:	6121      	str	r1, [r4, #16]
 800e61c:	07d8      	lsls	r0, r3, #31
 800e61e:	d5ea      	bpl.n	800e5f6 <_printf_float+0x1a6>
 800e620:	1c4b      	adds	r3, r1, #1
 800e622:	e7e7      	b.n	800e5f4 <_printf_float+0x1a4>
 800e624:	2900      	cmp	r1, #0
 800e626:	bfd4      	ite	le
 800e628:	f1c1 0202 	rsble	r2, r1, #2
 800e62c:	2201      	movgt	r2, #1
 800e62e:	4413      	add	r3, r2
 800e630:	e7e0      	b.n	800e5f4 <_printf_float+0x1a4>
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	055a      	lsls	r2, r3, #21
 800e636:	d407      	bmi.n	800e648 <_printf_float+0x1f8>
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	4642      	mov	r2, r8
 800e63c:	4631      	mov	r1, r6
 800e63e:	4628      	mov	r0, r5
 800e640:	47b8      	blx	r7
 800e642:	3001      	adds	r0, #1
 800e644:	d12c      	bne.n	800e6a0 <_printf_float+0x250>
 800e646:	e764      	b.n	800e512 <_printf_float+0xc2>
 800e648:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e64c:	f240 80e0 	bls.w	800e810 <_printf_float+0x3c0>
 800e650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e654:	2200      	movs	r2, #0
 800e656:	2300      	movs	r3, #0
 800e658:	f7f2 fa46 	bl	8000ae8 <__aeabi_dcmpeq>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d034      	beq.n	800e6ca <_printf_float+0x27a>
 800e660:	4a37      	ldr	r2, [pc, #220]	; (800e740 <_printf_float+0x2f0>)
 800e662:	2301      	movs	r3, #1
 800e664:	4631      	mov	r1, r6
 800e666:	4628      	mov	r0, r5
 800e668:	47b8      	blx	r7
 800e66a:	3001      	adds	r0, #1
 800e66c:	f43f af51 	beq.w	800e512 <_printf_float+0xc2>
 800e670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e674:	429a      	cmp	r2, r3
 800e676:	db02      	blt.n	800e67e <_printf_float+0x22e>
 800e678:	6823      	ldr	r3, [r4, #0]
 800e67a:	07d8      	lsls	r0, r3, #31
 800e67c:	d510      	bpl.n	800e6a0 <_printf_float+0x250>
 800e67e:	ee18 3a10 	vmov	r3, s16
 800e682:	4652      	mov	r2, sl
 800e684:	4631      	mov	r1, r6
 800e686:	4628      	mov	r0, r5
 800e688:	47b8      	blx	r7
 800e68a:	3001      	adds	r0, #1
 800e68c:	f43f af41 	beq.w	800e512 <_printf_float+0xc2>
 800e690:	f04f 0800 	mov.w	r8, #0
 800e694:	f104 091a 	add.w	r9, r4, #26
 800e698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e69a:	3b01      	subs	r3, #1
 800e69c:	4543      	cmp	r3, r8
 800e69e:	dc09      	bgt.n	800e6b4 <_printf_float+0x264>
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	079b      	lsls	r3, r3, #30
 800e6a4:	f100 8105 	bmi.w	800e8b2 <_printf_float+0x462>
 800e6a8:	68e0      	ldr	r0, [r4, #12]
 800e6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6ac:	4298      	cmp	r0, r3
 800e6ae:	bfb8      	it	lt
 800e6b0:	4618      	movlt	r0, r3
 800e6b2:	e730      	b.n	800e516 <_printf_float+0xc6>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	464a      	mov	r2, r9
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f af27 	beq.w	800e512 <_printf_float+0xc2>
 800e6c4:	f108 0801 	add.w	r8, r8, #1
 800e6c8:	e7e6      	b.n	800e698 <_printf_float+0x248>
 800e6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dc39      	bgt.n	800e744 <_printf_float+0x2f4>
 800e6d0:	4a1b      	ldr	r2, [pc, #108]	; (800e740 <_printf_float+0x2f0>)
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	47b8      	blx	r7
 800e6da:	3001      	adds	r0, #1
 800e6dc:	f43f af19 	beq.w	800e512 <_printf_float+0xc2>
 800e6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	d102      	bne.n	800e6ee <_printf_float+0x29e>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	07d9      	lsls	r1, r3, #31
 800e6ec:	d5d8      	bpl.n	800e6a0 <_printf_float+0x250>
 800e6ee:	ee18 3a10 	vmov	r3, s16
 800e6f2:	4652      	mov	r2, sl
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	47b8      	blx	r7
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	f43f af09 	beq.w	800e512 <_printf_float+0xc2>
 800e700:	f04f 0900 	mov.w	r9, #0
 800e704:	f104 0a1a 	add.w	sl, r4, #26
 800e708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e70a:	425b      	negs	r3, r3
 800e70c:	454b      	cmp	r3, r9
 800e70e:	dc01      	bgt.n	800e714 <_printf_float+0x2c4>
 800e710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e712:	e792      	b.n	800e63a <_printf_float+0x1ea>
 800e714:	2301      	movs	r3, #1
 800e716:	4652      	mov	r2, sl
 800e718:	4631      	mov	r1, r6
 800e71a:	4628      	mov	r0, r5
 800e71c:	47b8      	blx	r7
 800e71e:	3001      	adds	r0, #1
 800e720:	f43f aef7 	beq.w	800e512 <_printf_float+0xc2>
 800e724:	f109 0901 	add.w	r9, r9, #1
 800e728:	e7ee      	b.n	800e708 <_printf_float+0x2b8>
 800e72a:	bf00      	nop
 800e72c:	7fefffff 	.word	0x7fefffff
 800e730:	08014f98 	.word	0x08014f98
 800e734:	08014f9c 	.word	0x08014f9c
 800e738:	08014fa4 	.word	0x08014fa4
 800e73c:	08014fa0 	.word	0x08014fa0
 800e740:	08014fa8 	.word	0x08014fa8
 800e744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e748:	429a      	cmp	r2, r3
 800e74a:	bfa8      	it	ge
 800e74c:	461a      	movge	r2, r3
 800e74e:	2a00      	cmp	r2, #0
 800e750:	4691      	mov	r9, r2
 800e752:	dc37      	bgt.n	800e7c4 <_printf_float+0x374>
 800e754:	f04f 0b00 	mov.w	fp, #0
 800e758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e75c:	f104 021a 	add.w	r2, r4, #26
 800e760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e762:	9305      	str	r3, [sp, #20]
 800e764:	eba3 0309 	sub.w	r3, r3, r9
 800e768:	455b      	cmp	r3, fp
 800e76a:	dc33      	bgt.n	800e7d4 <_printf_float+0x384>
 800e76c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e770:	429a      	cmp	r2, r3
 800e772:	db3b      	blt.n	800e7ec <_printf_float+0x39c>
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	07da      	lsls	r2, r3, #31
 800e778:	d438      	bmi.n	800e7ec <_printf_float+0x39c>
 800e77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e77c:	9b05      	ldr	r3, [sp, #20]
 800e77e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	eba2 0901 	sub.w	r9, r2, r1
 800e786:	4599      	cmp	r9, r3
 800e788:	bfa8      	it	ge
 800e78a:	4699      	movge	r9, r3
 800e78c:	f1b9 0f00 	cmp.w	r9, #0
 800e790:	dc35      	bgt.n	800e7fe <_printf_float+0x3ae>
 800e792:	f04f 0800 	mov.w	r8, #0
 800e796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e79a:	f104 0a1a 	add.w	sl, r4, #26
 800e79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a2:	1a9b      	subs	r3, r3, r2
 800e7a4:	eba3 0309 	sub.w	r3, r3, r9
 800e7a8:	4543      	cmp	r3, r8
 800e7aa:	f77f af79 	ble.w	800e6a0 <_printf_float+0x250>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	47b8      	blx	r7
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	f43f aeaa 	beq.w	800e512 <_printf_float+0xc2>
 800e7be:	f108 0801 	add.w	r8, r8, #1
 800e7c2:	e7ec      	b.n	800e79e <_printf_float+0x34e>
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	4631      	mov	r1, r6
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	47b8      	blx	r7
 800e7ce:	3001      	adds	r0, #1
 800e7d0:	d1c0      	bne.n	800e754 <_printf_float+0x304>
 800e7d2:	e69e      	b.n	800e512 <_printf_float+0xc2>
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	4631      	mov	r1, r6
 800e7d8:	4628      	mov	r0, r5
 800e7da:	9205      	str	r2, [sp, #20]
 800e7dc:	47b8      	blx	r7
 800e7de:	3001      	adds	r0, #1
 800e7e0:	f43f ae97 	beq.w	800e512 <_printf_float+0xc2>
 800e7e4:	9a05      	ldr	r2, [sp, #20]
 800e7e6:	f10b 0b01 	add.w	fp, fp, #1
 800e7ea:	e7b9      	b.n	800e760 <_printf_float+0x310>
 800e7ec:	ee18 3a10 	vmov	r3, s16
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	47b8      	blx	r7
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	d1be      	bne.n	800e77a <_printf_float+0x32a>
 800e7fc:	e689      	b.n	800e512 <_printf_float+0xc2>
 800e7fe:	9a05      	ldr	r2, [sp, #20]
 800e800:	464b      	mov	r3, r9
 800e802:	4442      	add	r2, r8
 800e804:	4631      	mov	r1, r6
 800e806:	4628      	mov	r0, r5
 800e808:	47b8      	blx	r7
 800e80a:	3001      	adds	r0, #1
 800e80c:	d1c1      	bne.n	800e792 <_printf_float+0x342>
 800e80e:	e680      	b.n	800e512 <_printf_float+0xc2>
 800e810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e812:	2a01      	cmp	r2, #1
 800e814:	dc01      	bgt.n	800e81a <_printf_float+0x3ca>
 800e816:	07db      	lsls	r3, r3, #31
 800e818:	d538      	bpl.n	800e88c <_printf_float+0x43c>
 800e81a:	2301      	movs	r3, #1
 800e81c:	4642      	mov	r2, r8
 800e81e:	4631      	mov	r1, r6
 800e820:	4628      	mov	r0, r5
 800e822:	47b8      	blx	r7
 800e824:	3001      	adds	r0, #1
 800e826:	f43f ae74 	beq.w	800e512 <_printf_float+0xc2>
 800e82a:	ee18 3a10 	vmov	r3, s16
 800e82e:	4652      	mov	r2, sl
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	47b8      	blx	r7
 800e836:	3001      	adds	r0, #1
 800e838:	f43f ae6b 	beq.w	800e512 <_printf_float+0xc2>
 800e83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e840:	2200      	movs	r2, #0
 800e842:	2300      	movs	r3, #0
 800e844:	f7f2 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 800e848:	b9d8      	cbnz	r0, 800e882 <_printf_float+0x432>
 800e84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e84c:	f108 0201 	add.w	r2, r8, #1
 800e850:	3b01      	subs	r3, #1
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	d10e      	bne.n	800e87a <_printf_float+0x42a>
 800e85c:	e659      	b.n	800e512 <_printf_float+0xc2>
 800e85e:	2301      	movs	r3, #1
 800e860:	4652      	mov	r2, sl
 800e862:	4631      	mov	r1, r6
 800e864:	4628      	mov	r0, r5
 800e866:	47b8      	blx	r7
 800e868:	3001      	adds	r0, #1
 800e86a:	f43f ae52 	beq.w	800e512 <_printf_float+0xc2>
 800e86e:	f108 0801 	add.w	r8, r8, #1
 800e872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e874:	3b01      	subs	r3, #1
 800e876:	4543      	cmp	r3, r8
 800e878:	dcf1      	bgt.n	800e85e <_printf_float+0x40e>
 800e87a:	464b      	mov	r3, r9
 800e87c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e880:	e6dc      	b.n	800e63c <_printf_float+0x1ec>
 800e882:	f04f 0800 	mov.w	r8, #0
 800e886:	f104 0a1a 	add.w	sl, r4, #26
 800e88a:	e7f2      	b.n	800e872 <_printf_float+0x422>
 800e88c:	2301      	movs	r3, #1
 800e88e:	4642      	mov	r2, r8
 800e890:	e7df      	b.n	800e852 <_printf_float+0x402>
 800e892:	2301      	movs	r3, #1
 800e894:	464a      	mov	r2, r9
 800e896:	4631      	mov	r1, r6
 800e898:	4628      	mov	r0, r5
 800e89a:	47b8      	blx	r7
 800e89c:	3001      	adds	r0, #1
 800e89e:	f43f ae38 	beq.w	800e512 <_printf_float+0xc2>
 800e8a2:	f108 0801 	add.w	r8, r8, #1
 800e8a6:	68e3      	ldr	r3, [r4, #12]
 800e8a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8aa:	1a5b      	subs	r3, r3, r1
 800e8ac:	4543      	cmp	r3, r8
 800e8ae:	dcf0      	bgt.n	800e892 <_printf_float+0x442>
 800e8b0:	e6fa      	b.n	800e6a8 <_printf_float+0x258>
 800e8b2:	f04f 0800 	mov.w	r8, #0
 800e8b6:	f104 0919 	add.w	r9, r4, #25
 800e8ba:	e7f4      	b.n	800e8a6 <_printf_float+0x456>

0800e8bc <_printf_common>:
 800e8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c0:	4616      	mov	r6, r2
 800e8c2:	4699      	mov	r9, r3
 800e8c4:	688a      	ldr	r2, [r1, #8]
 800e8c6:	690b      	ldr	r3, [r1, #16]
 800e8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	bfb8      	it	lt
 800e8d0:	4613      	movlt	r3, r2
 800e8d2:	6033      	str	r3, [r6, #0]
 800e8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8d8:	4607      	mov	r7, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	b10a      	cbz	r2, 800e8e2 <_printf_common+0x26>
 800e8de:	3301      	adds	r3, #1
 800e8e0:	6033      	str	r3, [r6, #0]
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	0699      	lsls	r1, r3, #26
 800e8e6:	bf42      	ittt	mi
 800e8e8:	6833      	ldrmi	r3, [r6, #0]
 800e8ea:	3302      	addmi	r3, #2
 800e8ec:	6033      	strmi	r3, [r6, #0]
 800e8ee:	6825      	ldr	r5, [r4, #0]
 800e8f0:	f015 0506 	ands.w	r5, r5, #6
 800e8f4:	d106      	bne.n	800e904 <_printf_common+0x48>
 800e8f6:	f104 0a19 	add.w	sl, r4, #25
 800e8fa:	68e3      	ldr	r3, [r4, #12]
 800e8fc:	6832      	ldr	r2, [r6, #0]
 800e8fe:	1a9b      	subs	r3, r3, r2
 800e900:	42ab      	cmp	r3, r5
 800e902:	dc26      	bgt.n	800e952 <_printf_common+0x96>
 800e904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e908:	1e13      	subs	r3, r2, #0
 800e90a:	6822      	ldr	r2, [r4, #0]
 800e90c:	bf18      	it	ne
 800e90e:	2301      	movne	r3, #1
 800e910:	0692      	lsls	r2, r2, #26
 800e912:	d42b      	bmi.n	800e96c <_printf_common+0xb0>
 800e914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e918:	4649      	mov	r1, r9
 800e91a:	4638      	mov	r0, r7
 800e91c:	47c0      	blx	r8
 800e91e:	3001      	adds	r0, #1
 800e920:	d01e      	beq.n	800e960 <_printf_common+0xa4>
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	68e5      	ldr	r5, [r4, #12]
 800e926:	6832      	ldr	r2, [r6, #0]
 800e928:	f003 0306 	and.w	r3, r3, #6
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	bf08      	it	eq
 800e930:	1aad      	subeq	r5, r5, r2
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	6922      	ldr	r2, [r4, #16]
 800e936:	bf0c      	ite	eq
 800e938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e93c:	2500      	movne	r5, #0
 800e93e:	4293      	cmp	r3, r2
 800e940:	bfc4      	itt	gt
 800e942:	1a9b      	subgt	r3, r3, r2
 800e944:	18ed      	addgt	r5, r5, r3
 800e946:	2600      	movs	r6, #0
 800e948:	341a      	adds	r4, #26
 800e94a:	42b5      	cmp	r5, r6
 800e94c:	d11a      	bne.n	800e984 <_printf_common+0xc8>
 800e94e:	2000      	movs	r0, #0
 800e950:	e008      	b.n	800e964 <_printf_common+0xa8>
 800e952:	2301      	movs	r3, #1
 800e954:	4652      	mov	r2, sl
 800e956:	4649      	mov	r1, r9
 800e958:	4638      	mov	r0, r7
 800e95a:	47c0      	blx	r8
 800e95c:	3001      	adds	r0, #1
 800e95e:	d103      	bne.n	800e968 <_printf_common+0xac>
 800e960:	f04f 30ff 	mov.w	r0, #4294967295
 800e964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e968:	3501      	adds	r5, #1
 800e96a:	e7c6      	b.n	800e8fa <_printf_common+0x3e>
 800e96c:	18e1      	adds	r1, r4, r3
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	2030      	movs	r0, #48	; 0x30
 800e972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e976:	4422      	add	r2, r4
 800e978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e980:	3302      	adds	r3, #2
 800e982:	e7c7      	b.n	800e914 <_printf_common+0x58>
 800e984:	2301      	movs	r3, #1
 800e986:	4622      	mov	r2, r4
 800e988:	4649      	mov	r1, r9
 800e98a:	4638      	mov	r0, r7
 800e98c:	47c0      	blx	r8
 800e98e:	3001      	adds	r0, #1
 800e990:	d0e6      	beq.n	800e960 <_printf_common+0xa4>
 800e992:	3601      	adds	r6, #1
 800e994:	e7d9      	b.n	800e94a <_printf_common+0x8e>
	...

0800e998 <_printf_i>:
 800e998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e99c:	460c      	mov	r4, r1
 800e99e:	4691      	mov	r9, r2
 800e9a0:	7e27      	ldrb	r7, [r4, #24]
 800e9a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e9a4:	2f78      	cmp	r7, #120	; 0x78
 800e9a6:	4680      	mov	r8, r0
 800e9a8:	469a      	mov	sl, r3
 800e9aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9ae:	d807      	bhi.n	800e9c0 <_printf_i+0x28>
 800e9b0:	2f62      	cmp	r7, #98	; 0x62
 800e9b2:	d80a      	bhi.n	800e9ca <_printf_i+0x32>
 800e9b4:	2f00      	cmp	r7, #0
 800e9b6:	f000 80d8 	beq.w	800eb6a <_printf_i+0x1d2>
 800e9ba:	2f58      	cmp	r7, #88	; 0x58
 800e9bc:	f000 80a3 	beq.w	800eb06 <_printf_i+0x16e>
 800e9c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9c8:	e03a      	b.n	800ea40 <_printf_i+0xa8>
 800e9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9ce:	2b15      	cmp	r3, #21
 800e9d0:	d8f6      	bhi.n	800e9c0 <_printf_i+0x28>
 800e9d2:	a001      	add	r0, pc, #4	; (adr r0, 800e9d8 <_printf_i+0x40>)
 800e9d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e9d8:	0800ea31 	.word	0x0800ea31
 800e9dc:	0800ea45 	.word	0x0800ea45
 800e9e0:	0800e9c1 	.word	0x0800e9c1
 800e9e4:	0800e9c1 	.word	0x0800e9c1
 800e9e8:	0800e9c1 	.word	0x0800e9c1
 800e9ec:	0800e9c1 	.word	0x0800e9c1
 800e9f0:	0800ea45 	.word	0x0800ea45
 800e9f4:	0800e9c1 	.word	0x0800e9c1
 800e9f8:	0800e9c1 	.word	0x0800e9c1
 800e9fc:	0800e9c1 	.word	0x0800e9c1
 800ea00:	0800e9c1 	.word	0x0800e9c1
 800ea04:	0800eb51 	.word	0x0800eb51
 800ea08:	0800ea75 	.word	0x0800ea75
 800ea0c:	0800eb33 	.word	0x0800eb33
 800ea10:	0800e9c1 	.word	0x0800e9c1
 800ea14:	0800e9c1 	.word	0x0800e9c1
 800ea18:	0800eb73 	.word	0x0800eb73
 800ea1c:	0800e9c1 	.word	0x0800e9c1
 800ea20:	0800ea75 	.word	0x0800ea75
 800ea24:	0800e9c1 	.word	0x0800e9c1
 800ea28:	0800e9c1 	.word	0x0800e9c1
 800ea2c:	0800eb3b 	.word	0x0800eb3b
 800ea30:	680b      	ldr	r3, [r1, #0]
 800ea32:	1d1a      	adds	r2, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	600a      	str	r2, [r1, #0]
 800ea38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea40:	2301      	movs	r3, #1
 800ea42:	e0a3      	b.n	800eb8c <_printf_i+0x1f4>
 800ea44:	6825      	ldr	r5, [r4, #0]
 800ea46:	6808      	ldr	r0, [r1, #0]
 800ea48:	062e      	lsls	r6, r5, #24
 800ea4a:	f100 0304 	add.w	r3, r0, #4
 800ea4e:	d50a      	bpl.n	800ea66 <_printf_i+0xce>
 800ea50:	6805      	ldr	r5, [r0, #0]
 800ea52:	600b      	str	r3, [r1, #0]
 800ea54:	2d00      	cmp	r5, #0
 800ea56:	da03      	bge.n	800ea60 <_printf_i+0xc8>
 800ea58:	232d      	movs	r3, #45	; 0x2d
 800ea5a:	426d      	negs	r5, r5
 800ea5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea60:	485e      	ldr	r0, [pc, #376]	; (800ebdc <_printf_i+0x244>)
 800ea62:	230a      	movs	r3, #10
 800ea64:	e019      	b.n	800ea9a <_printf_i+0x102>
 800ea66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ea6a:	6805      	ldr	r5, [r0, #0]
 800ea6c:	600b      	str	r3, [r1, #0]
 800ea6e:	bf18      	it	ne
 800ea70:	b22d      	sxthne	r5, r5
 800ea72:	e7ef      	b.n	800ea54 <_printf_i+0xbc>
 800ea74:	680b      	ldr	r3, [r1, #0]
 800ea76:	6825      	ldr	r5, [r4, #0]
 800ea78:	1d18      	adds	r0, r3, #4
 800ea7a:	6008      	str	r0, [r1, #0]
 800ea7c:	0628      	lsls	r0, r5, #24
 800ea7e:	d501      	bpl.n	800ea84 <_printf_i+0xec>
 800ea80:	681d      	ldr	r5, [r3, #0]
 800ea82:	e002      	b.n	800ea8a <_printf_i+0xf2>
 800ea84:	0669      	lsls	r1, r5, #25
 800ea86:	d5fb      	bpl.n	800ea80 <_printf_i+0xe8>
 800ea88:	881d      	ldrh	r5, [r3, #0]
 800ea8a:	4854      	ldr	r0, [pc, #336]	; (800ebdc <_printf_i+0x244>)
 800ea8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ea8e:	bf0c      	ite	eq
 800ea90:	2308      	moveq	r3, #8
 800ea92:	230a      	movne	r3, #10
 800ea94:	2100      	movs	r1, #0
 800ea96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea9a:	6866      	ldr	r6, [r4, #4]
 800ea9c:	60a6      	str	r6, [r4, #8]
 800ea9e:	2e00      	cmp	r6, #0
 800eaa0:	bfa2      	ittt	ge
 800eaa2:	6821      	ldrge	r1, [r4, #0]
 800eaa4:	f021 0104 	bicge.w	r1, r1, #4
 800eaa8:	6021      	strge	r1, [r4, #0]
 800eaaa:	b90d      	cbnz	r5, 800eab0 <_printf_i+0x118>
 800eaac:	2e00      	cmp	r6, #0
 800eaae:	d04d      	beq.n	800eb4c <_printf_i+0x1b4>
 800eab0:	4616      	mov	r6, r2
 800eab2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eab6:	fb03 5711 	mls	r7, r3, r1, r5
 800eaba:	5dc7      	ldrb	r7, [r0, r7]
 800eabc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eac0:	462f      	mov	r7, r5
 800eac2:	42bb      	cmp	r3, r7
 800eac4:	460d      	mov	r5, r1
 800eac6:	d9f4      	bls.n	800eab2 <_printf_i+0x11a>
 800eac8:	2b08      	cmp	r3, #8
 800eaca:	d10b      	bne.n	800eae4 <_printf_i+0x14c>
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	07df      	lsls	r7, r3, #31
 800ead0:	d508      	bpl.n	800eae4 <_printf_i+0x14c>
 800ead2:	6923      	ldr	r3, [r4, #16]
 800ead4:	6861      	ldr	r1, [r4, #4]
 800ead6:	4299      	cmp	r1, r3
 800ead8:	bfde      	ittt	le
 800eada:	2330      	movle	r3, #48	; 0x30
 800eadc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eae4:	1b92      	subs	r2, r2, r6
 800eae6:	6122      	str	r2, [r4, #16]
 800eae8:	f8cd a000 	str.w	sl, [sp]
 800eaec:	464b      	mov	r3, r9
 800eaee:	aa03      	add	r2, sp, #12
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	f7ff fee2 	bl	800e8bc <_printf_common>
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d14c      	bne.n	800eb96 <_printf_i+0x1fe>
 800eafc:	f04f 30ff 	mov.w	r0, #4294967295
 800eb00:	b004      	add	sp, #16
 800eb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb06:	4835      	ldr	r0, [pc, #212]	; (800ebdc <_printf_i+0x244>)
 800eb08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	680e      	ldr	r6, [r1, #0]
 800eb10:	061f      	lsls	r7, r3, #24
 800eb12:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb16:	600e      	str	r6, [r1, #0]
 800eb18:	d514      	bpl.n	800eb44 <_printf_i+0x1ac>
 800eb1a:	07d9      	lsls	r1, r3, #31
 800eb1c:	bf44      	itt	mi
 800eb1e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb22:	6023      	strmi	r3, [r4, #0]
 800eb24:	b91d      	cbnz	r5, 800eb2e <_printf_i+0x196>
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	f023 0320 	bic.w	r3, r3, #32
 800eb2c:	6023      	str	r3, [r4, #0]
 800eb2e:	2310      	movs	r3, #16
 800eb30:	e7b0      	b.n	800ea94 <_printf_i+0xfc>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	f043 0320 	orr.w	r3, r3, #32
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	2378      	movs	r3, #120	; 0x78
 800eb3c:	4828      	ldr	r0, [pc, #160]	; (800ebe0 <_printf_i+0x248>)
 800eb3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb42:	e7e3      	b.n	800eb0c <_printf_i+0x174>
 800eb44:	065e      	lsls	r6, r3, #25
 800eb46:	bf48      	it	mi
 800eb48:	b2ad      	uxthmi	r5, r5
 800eb4a:	e7e6      	b.n	800eb1a <_printf_i+0x182>
 800eb4c:	4616      	mov	r6, r2
 800eb4e:	e7bb      	b.n	800eac8 <_printf_i+0x130>
 800eb50:	680b      	ldr	r3, [r1, #0]
 800eb52:	6826      	ldr	r6, [r4, #0]
 800eb54:	6960      	ldr	r0, [r4, #20]
 800eb56:	1d1d      	adds	r5, r3, #4
 800eb58:	600d      	str	r5, [r1, #0]
 800eb5a:	0635      	lsls	r5, r6, #24
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	d501      	bpl.n	800eb64 <_printf_i+0x1cc>
 800eb60:	6018      	str	r0, [r3, #0]
 800eb62:	e002      	b.n	800eb6a <_printf_i+0x1d2>
 800eb64:	0671      	lsls	r1, r6, #25
 800eb66:	d5fb      	bpl.n	800eb60 <_printf_i+0x1c8>
 800eb68:	8018      	strh	r0, [r3, #0]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	6123      	str	r3, [r4, #16]
 800eb6e:	4616      	mov	r6, r2
 800eb70:	e7ba      	b.n	800eae8 <_printf_i+0x150>
 800eb72:	680b      	ldr	r3, [r1, #0]
 800eb74:	1d1a      	adds	r2, r3, #4
 800eb76:	600a      	str	r2, [r1, #0]
 800eb78:	681e      	ldr	r6, [r3, #0]
 800eb7a:	6862      	ldr	r2, [r4, #4]
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7f1 fb3e 	bl	8000200 <memchr>
 800eb84:	b108      	cbz	r0, 800eb8a <_printf_i+0x1f2>
 800eb86:	1b80      	subs	r0, r0, r6
 800eb88:	6060      	str	r0, [r4, #4]
 800eb8a:	6863      	ldr	r3, [r4, #4]
 800eb8c:	6123      	str	r3, [r4, #16]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb94:	e7a8      	b.n	800eae8 <_printf_i+0x150>
 800eb96:	6923      	ldr	r3, [r4, #16]
 800eb98:	4632      	mov	r2, r6
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	4640      	mov	r0, r8
 800eb9e:	47d0      	blx	sl
 800eba0:	3001      	adds	r0, #1
 800eba2:	d0ab      	beq.n	800eafc <_printf_i+0x164>
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	079b      	lsls	r3, r3, #30
 800eba8:	d413      	bmi.n	800ebd2 <_printf_i+0x23a>
 800ebaa:	68e0      	ldr	r0, [r4, #12]
 800ebac:	9b03      	ldr	r3, [sp, #12]
 800ebae:	4298      	cmp	r0, r3
 800ebb0:	bfb8      	it	lt
 800ebb2:	4618      	movlt	r0, r3
 800ebb4:	e7a4      	b.n	800eb00 <_printf_i+0x168>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	4632      	mov	r2, r6
 800ebba:	4649      	mov	r1, r9
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	47d0      	blx	sl
 800ebc0:	3001      	adds	r0, #1
 800ebc2:	d09b      	beq.n	800eafc <_printf_i+0x164>
 800ebc4:	3501      	adds	r5, #1
 800ebc6:	68e3      	ldr	r3, [r4, #12]
 800ebc8:	9903      	ldr	r1, [sp, #12]
 800ebca:	1a5b      	subs	r3, r3, r1
 800ebcc:	42ab      	cmp	r3, r5
 800ebce:	dcf2      	bgt.n	800ebb6 <_printf_i+0x21e>
 800ebd0:	e7eb      	b.n	800ebaa <_printf_i+0x212>
 800ebd2:	2500      	movs	r5, #0
 800ebd4:	f104 0619 	add.w	r6, r4, #25
 800ebd8:	e7f5      	b.n	800ebc6 <_printf_i+0x22e>
 800ebda:	bf00      	nop
 800ebdc:	08014faa 	.word	0x08014faa
 800ebe0:	08014fbb 	.word	0x08014fbb

0800ebe4 <iprintf>:
 800ebe4:	b40f      	push	{r0, r1, r2, r3}
 800ebe6:	4b0a      	ldr	r3, [pc, #40]	; (800ec10 <iprintf+0x2c>)
 800ebe8:	b513      	push	{r0, r1, r4, lr}
 800ebea:	681c      	ldr	r4, [r3, #0]
 800ebec:	b124      	cbz	r4, 800ebf8 <iprintf+0x14>
 800ebee:	69a3      	ldr	r3, [r4, #24]
 800ebf0:	b913      	cbnz	r3, 800ebf8 <iprintf+0x14>
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f001 f8f6 	bl	800fde4 <__sinit>
 800ebf8:	ab05      	add	r3, sp, #20
 800ebfa:	9a04      	ldr	r2, [sp, #16]
 800ebfc:	68a1      	ldr	r1, [r4, #8]
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	4620      	mov	r0, r4
 800ec02:	f001 ffbf 	bl	8010b84 <_vfiprintf_r>
 800ec06:	b002      	add	sp, #8
 800ec08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec0c:	b004      	add	sp, #16
 800ec0e:	4770      	bx	lr
 800ec10:	20000068 	.word	0x20000068

0800ec14 <_puts_r>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	460e      	mov	r6, r1
 800ec18:	4605      	mov	r5, r0
 800ec1a:	b118      	cbz	r0, 800ec24 <_puts_r+0x10>
 800ec1c:	6983      	ldr	r3, [r0, #24]
 800ec1e:	b90b      	cbnz	r3, 800ec24 <_puts_r+0x10>
 800ec20:	f001 f8e0 	bl	800fde4 <__sinit>
 800ec24:	69ab      	ldr	r3, [r5, #24]
 800ec26:	68ac      	ldr	r4, [r5, #8]
 800ec28:	b913      	cbnz	r3, 800ec30 <_puts_r+0x1c>
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f001 f8da 	bl	800fde4 <__sinit>
 800ec30:	4b2c      	ldr	r3, [pc, #176]	; (800ece4 <_puts_r+0xd0>)
 800ec32:	429c      	cmp	r4, r3
 800ec34:	d120      	bne.n	800ec78 <_puts_r+0x64>
 800ec36:	686c      	ldr	r4, [r5, #4]
 800ec38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec3a:	07db      	lsls	r3, r3, #31
 800ec3c:	d405      	bmi.n	800ec4a <_puts_r+0x36>
 800ec3e:	89a3      	ldrh	r3, [r4, #12]
 800ec40:	0598      	lsls	r0, r3, #22
 800ec42:	d402      	bmi.n	800ec4a <_puts_r+0x36>
 800ec44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec46:	f001 f970 	bl	800ff2a <__retarget_lock_acquire_recursive>
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	0719      	lsls	r1, r3, #28
 800ec4e:	d51d      	bpl.n	800ec8c <_puts_r+0x78>
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	b1db      	cbz	r3, 800ec8c <_puts_r+0x78>
 800ec54:	3e01      	subs	r6, #1
 800ec56:	68a3      	ldr	r3, [r4, #8]
 800ec58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	60a3      	str	r3, [r4, #8]
 800ec60:	bb39      	cbnz	r1, 800ecb2 <_puts_r+0x9e>
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	da38      	bge.n	800ecd8 <_puts_r+0xc4>
 800ec66:	4622      	mov	r2, r4
 800ec68:	210a      	movs	r1, #10
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f000 f868 	bl	800ed40 <__swbuf_r>
 800ec70:	3001      	adds	r0, #1
 800ec72:	d011      	beq.n	800ec98 <_puts_r+0x84>
 800ec74:	250a      	movs	r5, #10
 800ec76:	e011      	b.n	800ec9c <_puts_r+0x88>
 800ec78:	4b1b      	ldr	r3, [pc, #108]	; (800ece8 <_puts_r+0xd4>)
 800ec7a:	429c      	cmp	r4, r3
 800ec7c:	d101      	bne.n	800ec82 <_puts_r+0x6e>
 800ec7e:	68ac      	ldr	r4, [r5, #8]
 800ec80:	e7da      	b.n	800ec38 <_puts_r+0x24>
 800ec82:	4b1a      	ldr	r3, [pc, #104]	; (800ecec <_puts_r+0xd8>)
 800ec84:	429c      	cmp	r4, r3
 800ec86:	bf08      	it	eq
 800ec88:	68ec      	ldreq	r4, [r5, #12]
 800ec8a:	e7d5      	b.n	800ec38 <_puts_r+0x24>
 800ec8c:	4621      	mov	r1, r4
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f000 f8a8 	bl	800ede4 <__swsetup_r>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d0dd      	beq.n	800ec54 <_puts_r+0x40>
 800ec98:	f04f 35ff 	mov.w	r5, #4294967295
 800ec9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec9e:	07da      	lsls	r2, r3, #31
 800eca0:	d405      	bmi.n	800ecae <_puts_r+0x9a>
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	059b      	lsls	r3, r3, #22
 800eca6:	d402      	bmi.n	800ecae <_puts_r+0x9a>
 800eca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecaa:	f001 f93f 	bl	800ff2c <__retarget_lock_release_recursive>
 800ecae:	4628      	mov	r0, r5
 800ecb0:	bd70      	pop	{r4, r5, r6, pc}
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	da04      	bge.n	800ecc0 <_puts_r+0xac>
 800ecb6:	69a2      	ldr	r2, [r4, #24]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	dc06      	bgt.n	800ecca <_puts_r+0xb6>
 800ecbc:	290a      	cmp	r1, #10
 800ecbe:	d004      	beq.n	800ecca <_puts_r+0xb6>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	6022      	str	r2, [r4, #0]
 800ecc6:	7019      	strb	r1, [r3, #0]
 800ecc8:	e7c5      	b.n	800ec56 <_puts_r+0x42>
 800ecca:	4622      	mov	r2, r4
 800eccc:	4628      	mov	r0, r5
 800ecce:	f000 f837 	bl	800ed40 <__swbuf_r>
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	d1bf      	bne.n	800ec56 <_puts_r+0x42>
 800ecd6:	e7df      	b.n	800ec98 <_puts_r+0x84>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	250a      	movs	r5, #10
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	6022      	str	r2, [r4, #0]
 800ece0:	701d      	strb	r5, [r3, #0]
 800ece2:	e7db      	b.n	800ec9c <_puts_r+0x88>
 800ece4:	08015080 	.word	0x08015080
 800ece8:	080150a0 	.word	0x080150a0
 800ecec:	08015060 	.word	0x08015060

0800ecf0 <puts>:
 800ecf0:	4b02      	ldr	r3, [pc, #8]	; (800ecfc <puts+0xc>)
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	6818      	ldr	r0, [r3, #0]
 800ecf6:	f7ff bf8d 	b.w	800ec14 <_puts_r>
 800ecfa:	bf00      	nop
 800ecfc:	20000068 	.word	0x20000068

0800ed00 <siprintf>:
 800ed00:	b40e      	push	{r1, r2, r3}
 800ed02:	b500      	push	{lr}
 800ed04:	b09c      	sub	sp, #112	; 0x70
 800ed06:	ab1d      	add	r3, sp, #116	; 0x74
 800ed08:	9002      	str	r0, [sp, #8]
 800ed0a:	9006      	str	r0, [sp, #24]
 800ed0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed10:	4809      	ldr	r0, [pc, #36]	; (800ed38 <siprintf+0x38>)
 800ed12:	9107      	str	r1, [sp, #28]
 800ed14:	9104      	str	r1, [sp, #16]
 800ed16:	4909      	ldr	r1, [pc, #36]	; (800ed3c <siprintf+0x3c>)
 800ed18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1c:	9105      	str	r1, [sp, #20]
 800ed1e:	6800      	ldr	r0, [r0, #0]
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	a902      	add	r1, sp, #8
 800ed24:	f001 fe04 	bl	8010930 <_svfiprintf_r>
 800ed28:	9b02      	ldr	r3, [sp, #8]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
 800ed2e:	b01c      	add	sp, #112	; 0x70
 800ed30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed34:	b003      	add	sp, #12
 800ed36:	4770      	bx	lr
 800ed38:	20000068 	.word	0x20000068
 800ed3c:	ffff0208 	.word	0xffff0208

0800ed40 <__swbuf_r>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	460e      	mov	r6, r1
 800ed44:	4614      	mov	r4, r2
 800ed46:	4605      	mov	r5, r0
 800ed48:	b118      	cbz	r0, 800ed52 <__swbuf_r+0x12>
 800ed4a:	6983      	ldr	r3, [r0, #24]
 800ed4c:	b90b      	cbnz	r3, 800ed52 <__swbuf_r+0x12>
 800ed4e:	f001 f849 	bl	800fde4 <__sinit>
 800ed52:	4b21      	ldr	r3, [pc, #132]	; (800edd8 <__swbuf_r+0x98>)
 800ed54:	429c      	cmp	r4, r3
 800ed56:	d12b      	bne.n	800edb0 <__swbuf_r+0x70>
 800ed58:	686c      	ldr	r4, [r5, #4]
 800ed5a:	69a3      	ldr	r3, [r4, #24]
 800ed5c:	60a3      	str	r3, [r4, #8]
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	071a      	lsls	r2, r3, #28
 800ed62:	d52f      	bpl.n	800edc4 <__swbuf_r+0x84>
 800ed64:	6923      	ldr	r3, [r4, #16]
 800ed66:	b36b      	cbz	r3, 800edc4 <__swbuf_r+0x84>
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	6820      	ldr	r0, [r4, #0]
 800ed6c:	1ac0      	subs	r0, r0, r3
 800ed6e:	6963      	ldr	r3, [r4, #20]
 800ed70:	b2f6      	uxtb	r6, r6
 800ed72:	4283      	cmp	r3, r0
 800ed74:	4637      	mov	r7, r6
 800ed76:	dc04      	bgt.n	800ed82 <__swbuf_r+0x42>
 800ed78:	4621      	mov	r1, r4
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f000 ff9e 	bl	800fcbc <_fflush_r>
 800ed80:	bb30      	cbnz	r0, 800edd0 <__swbuf_r+0x90>
 800ed82:	68a3      	ldr	r3, [r4, #8]
 800ed84:	3b01      	subs	r3, #1
 800ed86:	60a3      	str	r3, [r4, #8]
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	1c5a      	adds	r2, r3, #1
 800ed8c:	6022      	str	r2, [r4, #0]
 800ed8e:	701e      	strb	r6, [r3, #0]
 800ed90:	6963      	ldr	r3, [r4, #20]
 800ed92:	3001      	adds	r0, #1
 800ed94:	4283      	cmp	r3, r0
 800ed96:	d004      	beq.n	800eda2 <__swbuf_r+0x62>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	07db      	lsls	r3, r3, #31
 800ed9c:	d506      	bpl.n	800edac <__swbuf_r+0x6c>
 800ed9e:	2e0a      	cmp	r6, #10
 800eda0:	d104      	bne.n	800edac <__swbuf_r+0x6c>
 800eda2:	4621      	mov	r1, r4
 800eda4:	4628      	mov	r0, r5
 800eda6:	f000 ff89 	bl	800fcbc <_fflush_r>
 800edaa:	b988      	cbnz	r0, 800edd0 <__swbuf_r+0x90>
 800edac:	4638      	mov	r0, r7
 800edae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <__swbuf_r+0x9c>)
 800edb2:	429c      	cmp	r4, r3
 800edb4:	d101      	bne.n	800edba <__swbuf_r+0x7a>
 800edb6:	68ac      	ldr	r4, [r5, #8]
 800edb8:	e7cf      	b.n	800ed5a <__swbuf_r+0x1a>
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <__swbuf_r+0xa0>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	bf08      	it	eq
 800edc0:	68ec      	ldreq	r4, [r5, #12]
 800edc2:	e7ca      	b.n	800ed5a <__swbuf_r+0x1a>
 800edc4:	4621      	mov	r1, r4
 800edc6:	4628      	mov	r0, r5
 800edc8:	f000 f80c 	bl	800ede4 <__swsetup_r>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d0cb      	beq.n	800ed68 <__swbuf_r+0x28>
 800edd0:	f04f 37ff 	mov.w	r7, #4294967295
 800edd4:	e7ea      	b.n	800edac <__swbuf_r+0x6c>
 800edd6:	bf00      	nop
 800edd8:	08015080 	.word	0x08015080
 800eddc:	080150a0 	.word	0x080150a0
 800ede0:	08015060 	.word	0x08015060

0800ede4 <__swsetup_r>:
 800ede4:	4b32      	ldr	r3, [pc, #200]	; (800eeb0 <__swsetup_r+0xcc>)
 800ede6:	b570      	push	{r4, r5, r6, lr}
 800ede8:	681d      	ldr	r5, [r3, #0]
 800edea:	4606      	mov	r6, r0
 800edec:	460c      	mov	r4, r1
 800edee:	b125      	cbz	r5, 800edfa <__swsetup_r+0x16>
 800edf0:	69ab      	ldr	r3, [r5, #24]
 800edf2:	b913      	cbnz	r3, 800edfa <__swsetup_r+0x16>
 800edf4:	4628      	mov	r0, r5
 800edf6:	f000 fff5 	bl	800fde4 <__sinit>
 800edfa:	4b2e      	ldr	r3, [pc, #184]	; (800eeb4 <__swsetup_r+0xd0>)
 800edfc:	429c      	cmp	r4, r3
 800edfe:	d10f      	bne.n	800ee20 <__swsetup_r+0x3c>
 800ee00:	686c      	ldr	r4, [r5, #4]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee08:	0719      	lsls	r1, r3, #28
 800ee0a:	d42c      	bmi.n	800ee66 <__swsetup_r+0x82>
 800ee0c:	06dd      	lsls	r5, r3, #27
 800ee0e:	d411      	bmi.n	800ee34 <__swsetup_r+0x50>
 800ee10:	2309      	movs	r3, #9
 800ee12:	6033      	str	r3, [r6, #0]
 800ee14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1e:	e03e      	b.n	800ee9e <__swsetup_r+0xba>
 800ee20:	4b25      	ldr	r3, [pc, #148]	; (800eeb8 <__swsetup_r+0xd4>)
 800ee22:	429c      	cmp	r4, r3
 800ee24:	d101      	bne.n	800ee2a <__swsetup_r+0x46>
 800ee26:	68ac      	ldr	r4, [r5, #8]
 800ee28:	e7eb      	b.n	800ee02 <__swsetup_r+0x1e>
 800ee2a:	4b24      	ldr	r3, [pc, #144]	; (800eebc <__swsetup_r+0xd8>)
 800ee2c:	429c      	cmp	r4, r3
 800ee2e:	bf08      	it	eq
 800ee30:	68ec      	ldreq	r4, [r5, #12]
 800ee32:	e7e6      	b.n	800ee02 <__swsetup_r+0x1e>
 800ee34:	0758      	lsls	r0, r3, #29
 800ee36:	d512      	bpl.n	800ee5e <__swsetup_r+0x7a>
 800ee38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee3a:	b141      	cbz	r1, 800ee4e <__swsetup_r+0x6a>
 800ee3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee40:	4299      	cmp	r1, r3
 800ee42:	d002      	beq.n	800ee4a <__swsetup_r+0x66>
 800ee44:	4630      	mov	r0, r6
 800ee46:	f001 fc6d 	bl	8010724 <_free_r>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee54:	81a3      	strh	r3, [r4, #12]
 800ee56:	2300      	movs	r3, #0
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f043 0308 	orr.w	r3, r3, #8
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	6923      	ldr	r3, [r4, #16]
 800ee68:	b94b      	cbnz	r3, 800ee7e <__swsetup_r+0x9a>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee74:	d003      	beq.n	800ee7e <__swsetup_r+0x9a>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f001 f87d 	bl	800ff78 <__smakebuf_r>
 800ee7e:	89a0      	ldrh	r0, [r4, #12]
 800ee80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee84:	f010 0301 	ands.w	r3, r0, #1
 800ee88:	d00a      	beq.n	800eea0 <__swsetup_r+0xbc>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60a3      	str	r3, [r4, #8]
 800ee8e:	6963      	ldr	r3, [r4, #20]
 800ee90:	425b      	negs	r3, r3
 800ee92:	61a3      	str	r3, [r4, #24]
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	b943      	cbnz	r3, 800eeaa <__swsetup_r+0xc6>
 800ee98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee9c:	d1ba      	bne.n	800ee14 <__swsetup_r+0x30>
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}
 800eea0:	0781      	lsls	r1, r0, #30
 800eea2:	bf58      	it	pl
 800eea4:	6963      	ldrpl	r3, [r4, #20]
 800eea6:	60a3      	str	r3, [r4, #8]
 800eea8:	e7f4      	b.n	800ee94 <__swsetup_r+0xb0>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e7f7      	b.n	800ee9e <__swsetup_r+0xba>
 800eeae:	bf00      	nop
 800eeb0:	20000068 	.word	0x20000068
 800eeb4:	08015080 	.word	0x08015080
 800eeb8:	080150a0 	.word	0x080150a0
 800eebc:	08015060 	.word	0x08015060

0800eec0 <quorem>:
 800eec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec4:	6903      	ldr	r3, [r0, #16]
 800eec6:	690c      	ldr	r4, [r1, #16]
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	4607      	mov	r7, r0
 800eecc:	f2c0 8081 	blt.w	800efd2 <quorem+0x112>
 800eed0:	3c01      	subs	r4, #1
 800eed2:	f101 0814 	add.w	r8, r1, #20
 800eed6:	f100 0514 	add.w	r5, r0, #20
 800eeda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eede:	9301      	str	r3, [sp, #4]
 800eee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eee8:	3301      	adds	r3, #1
 800eeea:	429a      	cmp	r2, r3
 800eeec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eef4:	fbb2 f6f3 	udiv	r6, r2, r3
 800eef8:	d331      	bcc.n	800ef5e <quorem+0x9e>
 800eefa:	f04f 0e00 	mov.w	lr, #0
 800eefe:	4640      	mov	r0, r8
 800ef00:	46ac      	mov	ip, r5
 800ef02:	46f2      	mov	sl, lr
 800ef04:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef08:	b293      	uxth	r3, r2
 800ef0a:	fb06 e303 	mla	r3, r6, r3, lr
 800ef0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	ebaa 0303 	sub.w	r3, sl, r3
 800ef18:	0c12      	lsrs	r2, r2, #16
 800ef1a:	f8dc a000 	ldr.w	sl, [ip]
 800ef1e:	fb06 e202 	mla	r2, r6, r2, lr
 800ef22:	fa13 f38a 	uxtah	r3, r3, sl
 800ef26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef2a:	fa1f fa82 	uxth.w	sl, r2
 800ef2e:	f8dc 2000 	ldr.w	r2, [ip]
 800ef32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ef36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef40:	4581      	cmp	r9, r0
 800ef42:	f84c 3b04 	str.w	r3, [ip], #4
 800ef46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef4a:	d2db      	bcs.n	800ef04 <quorem+0x44>
 800ef4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef50:	b92b      	cbnz	r3, 800ef5e <quorem+0x9e>
 800ef52:	9b01      	ldr	r3, [sp, #4]
 800ef54:	3b04      	subs	r3, #4
 800ef56:	429d      	cmp	r5, r3
 800ef58:	461a      	mov	r2, r3
 800ef5a:	d32e      	bcc.n	800efba <quorem+0xfa>
 800ef5c:	613c      	str	r4, [r7, #16]
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f001 fad0 	bl	8010504 <__mcmp>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	db24      	blt.n	800efb2 <quorem+0xf2>
 800ef68:	3601      	adds	r6, #1
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f04f 0c00 	mov.w	ip, #0
 800ef70:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef74:	f8d0 e000 	ldr.w	lr, [r0]
 800ef78:	b293      	uxth	r3, r2
 800ef7a:	ebac 0303 	sub.w	r3, ip, r3
 800ef7e:	0c12      	lsrs	r2, r2, #16
 800ef80:	fa13 f38e 	uxtah	r3, r3, lr
 800ef84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef92:	45c1      	cmp	r9, r8
 800ef94:	f840 3b04 	str.w	r3, [r0], #4
 800ef98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef9c:	d2e8      	bcs.n	800ef70 <quorem+0xb0>
 800ef9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efa6:	b922      	cbnz	r2, 800efb2 <quorem+0xf2>
 800efa8:	3b04      	subs	r3, #4
 800efaa:	429d      	cmp	r5, r3
 800efac:	461a      	mov	r2, r3
 800efae:	d30a      	bcc.n	800efc6 <quorem+0x106>
 800efb0:	613c      	str	r4, [r7, #16]
 800efb2:	4630      	mov	r0, r6
 800efb4:	b003      	add	sp, #12
 800efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efba:	6812      	ldr	r2, [r2, #0]
 800efbc:	3b04      	subs	r3, #4
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	d1cc      	bne.n	800ef5c <quorem+0x9c>
 800efc2:	3c01      	subs	r4, #1
 800efc4:	e7c7      	b.n	800ef56 <quorem+0x96>
 800efc6:	6812      	ldr	r2, [r2, #0]
 800efc8:	3b04      	subs	r3, #4
 800efca:	2a00      	cmp	r2, #0
 800efcc:	d1f0      	bne.n	800efb0 <quorem+0xf0>
 800efce:	3c01      	subs	r4, #1
 800efd0:	e7eb      	b.n	800efaa <quorem+0xea>
 800efd2:	2000      	movs	r0, #0
 800efd4:	e7ee      	b.n	800efb4 <quorem+0xf4>
	...

0800efd8 <_dtoa_r>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	ed2d 8b02 	vpush	{d8}
 800efe0:	ec57 6b10 	vmov	r6, r7, d0
 800efe4:	b095      	sub	sp, #84	; 0x54
 800efe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efec:	9105      	str	r1, [sp, #20]
 800efee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800eff2:	4604      	mov	r4, r0
 800eff4:	9209      	str	r2, [sp, #36]	; 0x24
 800eff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eff8:	b975      	cbnz	r5, 800f018 <_dtoa_r+0x40>
 800effa:	2010      	movs	r0, #16
 800effc:	f000 fffc 	bl	800fff8 <malloc>
 800f000:	4602      	mov	r2, r0
 800f002:	6260      	str	r0, [r4, #36]	; 0x24
 800f004:	b920      	cbnz	r0, 800f010 <_dtoa_r+0x38>
 800f006:	4bb2      	ldr	r3, [pc, #712]	; (800f2d0 <_dtoa_r+0x2f8>)
 800f008:	21ea      	movs	r1, #234	; 0xea
 800f00a:	48b2      	ldr	r0, [pc, #712]	; (800f2d4 <_dtoa_r+0x2fc>)
 800f00c:	f001 ff50 	bl	8010eb0 <__assert_func>
 800f010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f014:	6005      	str	r5, [r0, #0]
 800f016:	60c5      	str	r5, [r0, #12]
 800f018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f01a:	6819      	ldr	r1, [r3, #0]
 800f01c:	b151      	cbz	r1, 800f034 <_dtoa_r+0x5c>
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	604a      	str	r2, [r1, #4]
 800f022:	2301      	movs	r3, #1
 800f024:	4093      	lsls	r3, r2
 800f026:	608b      	str	r3, [r1, #8]
 800f028:	4620      	mov	r0, r4
 800f02a:	f001 f82d 	bl	8010088 <_Bfree>
 800f02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f030:	2200      	movs	r2, #0
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	1e3b      	subs	r3, r7, #0
 800f036:	bfb9      	ittee	lt
 800f038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f03c:	9303      	strlt	r3, [sp, #12]
 800f03e:	2300      	movge	r3, #0
 800f040:	f8c8 3000 	strge.w	r3, [r8]
 800f044:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f048:	4ba3      	ldr	r3, [pc, #652]	; (800f2d8 <_dtoa_r+0x300>)
 800f04a:	bfbc      	itt	lt
 800f04c:	2201      	movlt	r2, #1
 800f04e:	f8c8 2000 	strlt.w	r2, [r8]
 800f052:	ea33 0309 	bics.w	r3, r3, r9
 800f056:	d11b      	bne.n	800f090 <_dtoa_r+0xb8>
 800f058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f05a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f064:	4333      	orrs	r3, r6
 800f066:	f000 857a 	beq.w	800fb5e <_dtoa_r+0xb86>
 800f06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f06c:	b963      	cbnz	r3, 800f088 <_dtoa_r+0xb0>
 800f06e:	4b9b      	ldr	r3, [pc, #620]	; (800f2dc <_dtoa_r+0x304>)
 800f070:	e024      	b.n	800f0bc <_dtoa_r+0xe4>
 800f072:	4b9b      	ldr	r3, [pc, #620]	; (800f2e0 <_dtoa_r+0x308>)
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	3308      	adds	r3, #8
 800f078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f07a:	6013      	str	r3, [r2, #0]
 800f07c:	9800      	ldr	r0, [sp, #0]
 800f07e:	b015      	add	sp, #84	; 0x54
 800f080:	ecbd 8b02 	vpop	{d8}
 800f084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f088:	4b94      	ldr	r3, [pc, #592]	; (800f2dc <_dtoa_r+0x304>)
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	3303      	adds	r3, #3
 800f08e:	e7f3      	b.n	800f078 <_dtoa_r+0xa0>
 800f090:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f094:	2200      	movs	r2, #0
 800f096:	ec51 0b17 	vmov	r0, r1, d7
 800f09a:	2300      	movs	r3, #0
 800f09c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f0a0:	f7f1 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0a4:	4680      	mov	r8, r0
 800f0a6:	b158      	cbz	r0, 800f0c0 <_dtoa_r+0xe8>
 800f0a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 8551 	beq.w	800fb58 <_dtoa_r+0xb80>
 800f0b6:	488b      	ldr	r0, [pc, #556]	; (800f2e4 <_dtoa_r+0x30c>)
 800f0b8:	6018      	str	r0, [r3, #0]
 800f0ba:	1e43      	subs	r3, r0, #1
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	e7dd      	b.n	800f07c <_dtoa_r+0xa4>
 800f0c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f0c4:	aa12      	add	r2, sp, #72	; 0x48
 800f0c6:	a913      	add	r1, sp, #76	; 0x4c
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f001 fabf 	bl	801064c <__d2b>
 800f0ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0d2:	4683      	mov	fp, r0
 800f0d4:	2d00      	cmp	r5, #0
 800f0d6:	d07c      	beq.n	800f1d2 <_dtoa_r+0x1fa>
 800f0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f0e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f0ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0f2:	4b7d      	ldr	r3, [pc, #500]	; (800f2e8 <_dtoa_r+0x310>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	4639      	mov	r1, r7
 800f0fa:	f7f1 f8d5 	bl	80002a8 <__aeabi_dsub>
 800f0fe:	a36e      	add	r3, pc, #440	; (adr r3, 800f2b8 <_dtoa_r+0x2e0>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	f7f1 fa88 	bl	8000618 <__aeabi_dmul>
 800f108:	a36d      	add	r3, pc, #436	; (adr r3, 800f2c0 <_dtoa_r+0x2e8>)
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f7f1 f8cd 	bl	80002ac <__adddf3>
 800f112:	4606      	mov	r6, r0
 800f114:	4628      	mov	r0, r5
 800f116:	460f      	mov	r7, r1
 800f118:	f7f1 fa14 	bl	8000544 <__aeabi_i2d>
 800f11c:	a36a      	add	r3, pc, #424	; (adr r3, 800f2c8 <_dtoa_r+0x2f0>)
 800f11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f122:	f7f1 fa79 	bl	8000618 <__aeabi_dmul>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4630      	mov	r0, r6
 800f12c:	4639      	mov	r1, r7
 800f12e:	f7f1 f8bd 	bl	80002ac <__adddf3>
 800f132:	4606      	mov	r6, r0
 800f134:	460f      	mov	r7, r1
 800f136:	f7f1 fd1f 	bl	8000b78 <__aeabi_d2iz>
 800f13a:	2200      	movs	r2, #0
 800f13c:	4682      	mov	sl, r0
 800f13e:	2300      	movs	r3, #0
 800f140:	4630      	mov	r0, r6
 800f142:	4639      	mov	r1, r7
 800f144:	f7f1 fcda 	bl	8000afc <__aeabi_dcmplt>
 800f148:	b148      	cbz	r0, 800f15e <_dtoa_r+0x186>
 800f14a:	4650      	mov	r0, sl
 800f14c:	f7f1 f9fa 	bl	8000544 <__aeabi_i2d>
 800f150:	4632      	mov	r2, r6
 800f152:	463b      	mov	r3, r7
 800f154:	f7f1 fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f158:	b908      	cbnz	r0, 800f15e <_dtoa_r+0x186>
 800f15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f15e:	f1ba 0f16 	cmp.w	sl, #22
 800f162:	d854      	bhi.n	800f20e <_dtoa_r+0x236>
 800f164:	4b61      	ldr	r3, [pc, #388]	; (800f2ec <_dtoa_r+0x314>)
 800f166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f172:	f7f1 fcc3 	bl	8000afc <__aeabi_dcmplt>
 800f176:	2800      	cmp	r0, #0
 800f178:	d04b      	beq.n	800f212 <_dtoa_r+0x23a>
 800f17a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f17e:	2300      	movs	r3, #0
 800f180:	930e      	str	r3, [sp, #56]	; 0x38
 800f182:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f184:	1b5d      	subs	r5, r3, r5
 800f186:	1e6b      	subs	r3, r5, #1
 800f188:	9304      	str	r3, [sp, #16]
 800f18a:	bf43      	ittte	mi
 800f18c:	2300      	movmi	r3, #0
 800f18e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f192:	9304      	strmi	r3, [sp, #16]
 800f194:	f04f 0800 	movpl.w	r8, #0
 800f198:	f1ba 0f00 	cmp.w	sl, #0
 800f19c:	db3b      	blt.n	800f216 <_dtoa_r+0x23e>
 800f19e:	9b04      	ldr	r3, [sp, #16]
 800f1a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f1a4:	4453      	add	r3, sl
 800f1a6:	9304      	str	r3, [sp, #16]
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9306      	str	r3, [sp, #24]
 800f1ac:	9b05      	ldr	r3, [sp, #20]
 800f1ae:	2b09      	cmp	r3, #9
 800f1b0:	d869      	bhi.n	800f286 <_dtoa_r+0x2ae>
 800f1b2:	2b05      	cmp	r3, #5
 800f1b4:	bfc4      	itt	gt
 800f1b6:	3b04      	subgt	r3, #4
 800f1b8:	9305      	strgt	r3, [sp, #20]
 800f1ba:	9b05      	ldr	r3, [sp, #20]
 800f1bc:	f1a3 0302 	sub.w	r3, r3, #2
 800f1c0:	bfcc      	ite	gt
 800f1c2:	2500      	movgt	r5, #0
 800f1c4:	2501      	movle	r5, #1
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d869      	bhi.n	800f29e <_dtoa_r+0x2c6>
 800f1ca:	e8df f003 	tbb	[pc, r3]
 800f1ce:	4e2c      	.short	0x4e2c
 800f1d0:	5a4c      	.short	0x5a4c
 800f1d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f1d6:	441d      	add	r5, r3
 800f1d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	bfc1      	itttt	gt
 800f1e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f1e8:	fa09 f303 	lslgt.w	r3, r9, r3
 800f1ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1f0:	bfda      	itte	le
 800f1f2:	f1c3 0320 	rsble	r3, r3, #32
 800f1f6:	fa06 f003 	lslle.w	r0, r6, r3
 800f1fa:	4318      	orrgt	r0, r3
 800f1fc:	f7f1 f992 	bl	8000524 <__aeabi_ui2d>
 800f200:	2301      	movs	r3, #1
 800f202:	4606      	mov	r6, r0
 800f204:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f208:	3d01      	subs	r5, #1
 800f20a:	9310      	str	r3, [sp, #64]	; 0x40
 800f20c:	e771      	b.n	800f0f2 <_dtoa_r+0x11a>
 800f20e:	2301      	movs	r3, #1
 800f210:	e7b6      	b.n	800f180 <_dtoa_r+0x1a8>
 800f212:	900e      	str	r0, [sp, #56]	; 0x38
 800f214:	e7b5      	b.n	800f182 <_dtoa_r+0x1aa>
 800f216:	f1ca 0300 	rsb	r3, sl, #0
 800f21a:	9306      	str	r3, [sp, #24]
 800f21c:	2300      	movs	r3, #0
 800f21e:	eba8 080a 	sub.w	r8, r8, sl
 800f222:	930d      	str	r3, [sp, #52]	; 0x34
 800f224:	e7c2      	b.n	800f1ac <_dtoa_r+0x1d4>
 800f226:	2300      	movs	r3, #0
 800f228:	9308      	str	r3, [sp, #32]
 800f22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	dc39      	bgt.n	800f2a4 <_dtoa_r+0x2cc>
 800f230:	f04f 0901 	mov.w	r9, #1
 800f234:	f8cd 9004 	str.w	r9, [sp, #4]
 800f238:	464b      	mov	r3, r9
 800f23a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f23e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f240:	2200      	movs	r2, #0
 800f242:	6042      	str	r2, [r0, #4]
 800f244:	2204      	movs	r2, #4
 800f246:	f102 0614 	add.w	r6, r2, #20
 800f24a:	429e      	cmp	r6, r3
 800f24c:	6841      	ldr	r1, [r0, #4]
 800f24e:	d92f      	bls.n	800f2b0 <_dtoa_r+0x2d8>
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fed9 	bl	8010008 <_Balloc>
 800f256:	9000      	str	r0, [sp, #0]
 800f258:	2800      	cmp	r0, #0
 800f25a:	d14b      	bne.n	800f2f4 <_dtoa_r+0x31c>
 800f25c:	4b24      	ldr	r3, [pc, #144]	; (800f2f0 <_dtoa_r+0x318>)
 800f25e:	4602      	mov	r2, r0
 800f260:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f264:	e6d1      	b.n	800f00a <_dtoa_r+0x32>
 800f266:	2301      	movs	r3, #1
 800f268:	e7de      	b.n	800f228 <_dtoa_r+0x250>
 800f26a:	2300      	movs	r3, #0
 800f26c:	9308      	str	r3, [sp, #32]
 800f26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f270:	eb0a 0903 	add.w	r9, sl, r3
 800f274:	f109 0301 	add.w	r3, r9, #1
 800f278:	2b01      	cmp	r3, #1
 800f27a:	9301      	str	r3, [sp, #4]
 800f27c:	bfb8      	it	lt
 800f27e:	2301      	movlt	r3, #1
 800f280:	e7dd      	b.n	800f23e <_dtoa_r+0x266>
 800f282:	2301      	movs	r3, #1
 800f284:	e7f2      	b.n	800f26c <_dtoa_r+0x294>
 800f286:	2501      	movs	r5, #1
 800f288:	2300      	movs	r3, #0
 800f28a:	9305      	str	r3, [sp, #20]
 800f28c:	9508      	str	r5, [sp, #32]
 800f28e:	f04f 39ff 	mov.w	r9, #4294967295
 800f292:	2200      	movs	r2, #0
 800f294:	f8cd 9004 	str.w	r9, [sp, #4]
 800f298:	2312      	movs	r3, #18
 800f29a:	9209      	str	r2, [sp, #36]	; 0x24
 800f29c:	e7cf      	b.n	800f23e <_dtoa_r+0x266>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	9308      	str	r3, [sp, #32]
 800f2a2:	e7f4      	b.n	800f28e <_dtoa_r+0x2b6>
 800f2a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f2a8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2ac:	464b      	mov	r3, r9
 800f2ae:	e7c6      	b.n	800f23e <_dtoa_r+0x266>
 800f2b0:	3101      	adds	r1, #1
 800f2b2:	6041      	str	r1, [r0, #4]
 800f2b4:	0052      	lsls	r2, r2, #1
 800f2b6:	e7c6      	b.n	800f246 <_dtoa_r+0x26e>
 800f2b8:	636f4361 	.word	0x636f4361
 800f2bc:	3fd287a7 	.word	0x3fd287a7
 800f2c0:	8b60c8b3 	.word	0x8b60c8b3
 800f2c4:	3fc68a28 	.word	0x3fc68a28
 800f2c8:	509f79fb 	.word	0x509f79fb
 800f2cc:	3fd34413 	.word	0x3fd34413
 800f2d0:	08014fd9 	.word	0x08014fd9
 800f2d4:	08014ff0 	.word	0x08014ff0
 800f2d8:	7ff00000 	.word	0x7ff00000
 800f2dc:	08014fd5 	.word	0x08014fd5
 800f2e0:	08014fcc 	.word	0x08014fcc
 800f2e4:	08014fa9 	.word	0x08014fa9
 800f2e8:	3ff80000 	.word	0x3ff80000
 800f2ec:	08015148 	.word	0x08015148
 800f2f0:	0801504f 	.word	0x0801504f
 800f2f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2f6:	9a00      	ldr	r2, [sp, #0]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	2b0e      	cmp	r3, #14
 800f2fe:	f200 80ad 	bhi.w	800f45c <_dtoa_r+0x484>
 800f302:	2d00      	cmp	r5, #0
 800f304:	f000 80aa 	beq.w	800f45c <_dtoa_r+0x484>
 800f308:	f1ba 0f00 	cmp.w	sl, #0
 800f30c:	dd36      	ble.n	800f37c <_dtoa_r+0x3a4>
 800f30e:	4ac3      	ldr	r2, [pc, #780]	; (800f61c <_dtoa_r+0x644>)
 800f310:	f00a 030f 	and.w	r3, sl, #15
 800f314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f318:	ed93 7b00 	vldr	d7, [r3]
 800f31c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f320:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f324:	eeb0 8a47 	vmov.f32	s16, s14
 800f328:	eef0 8a67 	vmov.f32	s17, s15
 800f32c:	d016      	beq.n	800f35c <_dtoa_r+0x384>
 800f32e:	4bbc      	ldr	r3, [pc, #752]	; (800f620 <_dtoa_r+0x648>)
 800f330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f338:	f7f1 fa98 	bl	800086c <__aeabi_ddiv>
 800f33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f340:	f007 070f 	and.w	r7, r7, #15
 800f344:	2503      	movs	r5, #3
 800f346:	4eb6      	ldr	r6, [pc, #728]	; (800f620 <_dtoa_r+0x648>)
 800f348:	b957      	cbnz	r7, 800f360 <_dtoa_r+0x388>
 800f34a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f34e:	ec53 2b18 	vmov	r2, r3, d8
 800f352:	f7f1 fa8b 	bl	800086c <__aeabi_ddiv>
 800f356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f35a:	e029      	b.n	800f3b0 <_dtoa_r+0x3d8>
 800f35c:	2502      	movs	r5, #2
 800f35e:	e7f2      	b.n	800f346 <_dtoa_r+0x36e>
 800f360:	07f9      	lsls	r1, r7, #31
 800f362:	d508      	bpl.n	800f376 <_dtoa_r+0x39e>
 800f364:	ec51 0b18 	vmov	r0, r1, d8
 800f368:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f36c:	f7f1 f954 	bl	8000618 <__aeabi_dmul>
 800f370:	ec41 0b18 	vmov	d8, r0, r1
 800f374:	3501      	adds	r5, #1
 800f376:	107f      	asrs	r7, r7, #1
 800f378:	3608      	adds	r6, #8
 800f37a:	e7e5      	b.n	800f348 <_dtoa_r+0x370>
 800f37c:	f000 80a6 	beq.w	800f4cc <_dtoa_r+0x4f4>
 800f380:	f1ca 0600 	rsb	r6, sl, #0
 800f384:	4ba5      	ldr	r3, [pc, #660]	; (800f61c <_dtoa_r+0x644>)
 800f386:	4fa6      	ldr	r7, [pc, #664]	; (800f620 <_dtoa_r+0x648>)
 800f388:	f006 020f 	and.w	r2, r6, #15
 800f38c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f394:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f398:	f7f1 f93e 	bl	8000618 <__aeabi_dmul>
 800f39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a0:	1136      	asrs	r6, r6, #4
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	2502      	movs	r5, #2
 800f3a6:	2e00      	cmp	r6, #0
 800f3a8:	f040 8085 	bne.w	800f4b6 <_dtoa_r+0x4de>
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1d2      	bne.n	800f356 <_dtoa_r+0x37e>
 800f3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 808c 	beq.w	800f4d0 <_dtoa_r+0x4f8>
 800f3b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3bc:	4b99      	ldr	r3, [pc, #612]	; (800f624 <_dtoa_r+0x64c>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	f7f1 fb9a 	bl	8000afc <__aeabi_dcmplt>
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	f000 8081 	beq.w	800f4d0 <_dtoa_r+0x4f8>
 800f3ce:	9b01      	ldr	r3, [sp, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d07d      	beq.n	800f4d0 <_dtoa_r+0x4f8>
 800f3d4:	f1b9 0f00 	cmp.w	r9, #0
 800f3d8:	dd3c      	ble.n	800f454 <_dtoa_r+0x47c>
 800f3da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f3de:	9307      	str	r3, [sp, #28]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	4b91      	ldr	r3, [pc, #580]	; (800f628 <_dtoa_r+0x650>)
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	f7f1 f916 	bl	8000618 <__aeabi_dmul>
 800f3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f3f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f7f1 f8a2 	bl	8000544 <__aeabi_i2d>
 800f400:	4632      	mov	r2, r6
 800f402:	463b      	mov	r3, r7
 800f404:	f7f1 f908 	bl	8000618 <__aeabi_dmul>
 800f408:	4b88      	ldr	r3, [pc, #544]	; (800f62c <_dtoa_r+0x654>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	f7f0 ff4e 	bl	80002ac <__adddf3>
 800f410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f418:	9303      	str	r3, [sp, #12]
 800f41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d15c      	bne.n	800f4da <_dtoa_r+0x502>
 800f420:	4b83      	ldr	r3, [pc, #524]	; (800f630 <_dtoa_r+0x658>)
 800f422:	2200      	movs	r2, #0
 800f424:	4630      	mov	r0, r6
 800f426:	4639      	mov	r1, r7
 800f428:	f7f0 ff3e 	bl	80002a8 <__aeabi_dsub>
 800f42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f430:	4606      	mov	r6, r0
 800f432:	460f      	mov	r7, r1
 800f434:	f7f1 fb80 	bl	8000b38 <__aeabi_dcmpgt>
 800f438:	2800      	cmp	r0, #0
 800f43a:	f040 8296 	bne.w	800f96a <_dtoa_r+0x992>
 800f43e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f442:	4630      	mov	r0, r6
 800f444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f448:	4639      	mov	r1, r7
 800f44a:	f7f1 fb57 	bl	8000afc <__aeabi_dcmplt>
 800f44e:	2800      	cmp	r0, #0
 800f450:	f040 8288 	bne.w	800f964 <_dtoa_r+0x98c>
 800f454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f45c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f2c0 8158 	blt.w	800f714 <_dtoa_r+0x73c>
 800f464:	f1ba 0f0e 	cmp.w	sl, #14
 800f468:	f300 8154 	bgt.w	800f714 <_dtoa_r+0x73c>
 800f46c:	4b6b      	ldr	r3, [pc, #428]	; (800f61c <_dtoa_r+0x644>)
 800f46e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f472:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f280 80e3 	bge.w	800f644 <_dtoa_r+0x66c>
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	f300 80df 	bgt.w	800f644 <_dtoa_r+0x66c>
 800f486:	f040 826d 	bne.w	800f964 <_dtoa_r+0x98c>
 800f48a:	4b69      	ldr	r3, [pc, #420]	; (800f630 <_dtoa_r+0x658>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	4640      	mov	r0, r8
 800f490:	4649      	mov	r1, r9
 800f492:	f7f1 f8c1 	bl	8000618 <__aeabi_dmul>
 800f496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f49a:	f7f1 fb43 	bl	8000b24 <__aeabi_dcmpge>
 800f49e:	9e01      	ldr	r6, [sp, #4]
 800f4a0:	4637      	mov	r7, r6
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	f040 8243 	bne.w	800f92e <_dtoa_r+0x956>
 800f4a8:	9d00      	ldr	r5, [sp, #0]
 800f4aa:	2331      	movs	r3, #49	; 0x31
 800f4ac:	f805 3b01 	strb.w	r3, [r5], #1
 800f4b0:	f10a 0a01 	add.w	sl, sl, #1
 800f4b4:	e23f      	b.n	800f936 <_dtoa_r+0x95e>
 800f4b6:	07f2      	lsls	r2, r6, #31
 800f4b8:	d505      	bpl.n	800f4c6 <_dtoa_r+0x4ee>
 800f4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4be:	f7f1 f8ab 	bl	8000618 <__aeabi_dmul>
 800f4c2:	3501      	adds	r5, #1
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	1076      	asrs	r6, r6, #1
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	e76c      	b.n	800f3a6 <_dtoa_r+0x3ce>
 800f4cc:	2502      	movs	r5, #2
 800f4ce:	e76f      	b.n	800f3b0 <_dtoa_r+0x3d8>
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800f4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f4d8:	e78d      	b.n	800f3f6 <_dtoa_r+0x41e>
 800f4da:	9900      	ldr	r1, [sp, #0]
 800f4dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f4de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4e0:	4b4e      	ldr	r3, [pc, #312]	; (800f61c <_dtoa_r+0x644>)
 800f4e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4e6:	4401      	add	r1, r0
 800f4e8:	9102      	str	r1, [sp, #8]
 800f4ea:	9908      	ldr	r1, [sp, #32]
 800f4ec:	eeb0 8a47 	vmov.f32	s16, s14
 800f4f0:	eef0 8a67 	vmov.f32	s17, s15
 800f4f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4fc:	2900      	cmp	r1, #0
 800f4fe:	d045      	beq.n	800f58c <_dtoa_r+0x5b4>
 800f500:	494c      	ldr	r1, [pc, #304]	; (800f634 <_dtoa_r+0x65c>)
 800f502:	2000      	movs	r0, #0
 800f504:	f7f1 f9b2 	bl	800086c <__aeabi_ddiv>
 800f508:	ec53 2b18 	vmov	r2, r3, d8
 800f50c:	f7f0 fecc 	bl	80002a8 <__aeabi_dsub>
 800f510:	9d00      	ldr	r5, [sp, #0]
 800f512:	ec41 0b18 	vmov	d8, r0, r1
 800f516:	4639      	mov	r1, r7
 800f518:	4630      	mov	r0, r6
 800f51a:	f7f1 fb2d 	bl	8000b78 <__aeabi_d2iz>
 800f51e:	900c      	str	r0, [sp, #48]	; 0x30
 800f520:	f7f1 f810 	bl	8000544 <__aeabi_i2d>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4630      	mov	r0, r6
 800f52a:	4639      	mov	r1, r7
 800f52c:	f7f0 febc 	bl	80002a8 <__aeabi_dsub>
 800f530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f532:	3330      	adds	r3, #48	; 0x30
 800f534:	f805 3b01 	strb.w	r3, [r5], #1
 800f538:	ec53 2b18 	vmov	r2, r3, d8
 800f53c:	4606      	mov	r6, r0
 800f53e:	460f      	mov	r7, r1
 800f540:	f7f1 fadc 	bl	8000afc <__aeabi_dcmplt>
 800f544:	2800      	cmp	r0, #0
 800f546:	d165      	bne.n	800f614 <_dtoa_r+0x63c>
 800f548:	4632      	mov	r2, r6
 800f54a:	463b      	mov	r3, r7
 800f54c:	4935      	ldr	r1, [pc, #212]	; (800f624 <_dtoa_r+0x64c>)
 800f54e:	2000      	movs	r0, #0
 800f550:	f7f0 feaa 	bl	80002a8 <__aeabi_dsub>
 800f554:	ec53 2b18 	vmov	r2, r3, d8
 800f558:	f7f1 fad0 	bl	8000afc <__aeabi_dcmplt>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	f040 80b9 	bne.w	800f6d4 <_dtoa_r+0x6fc>
 800f562:	9b02      	ldr	r3, [sp, #8]
 800f564:	429d      	cmp	r5, r3
 800f566:	f43f af75 	beq.w	800f454 <_dtoa_r+0x47c>
 800f56a:	4b2f      	ldr	r3, [pc, #188]	; (800f628 <_dtoa_r+0x650>)
 800f56c:	ec51 0b18 	vmov	r0, r1, d8
 800f570:	2200      	movs	r2, #0
 800f572:	f7f1 f851 	bl	8000618 <__aeabi_dmul>
 800f576:	4b2c      	ldr	r3, [pc, #176]	; (800f628 <_dtoa_r+0x650>)
 800f578:	ec41 0b18 	vmov	d8, r0, r1
 800f57c:	2200      	movs	r2, #0
 800f57e:	4630      	mov	r0, r6
 800f580:	4639      	mov	r1, r7
 800f582:	f7f1 f849 	bl	8000618 <__aeabi_dmul>
 800f586:	4606      	mov	r6, r0
 800f588:	460f      	mov	r7, r1
 800f58a:	e7c4      	b.n	800f516 <_dtoa_r+0x53e>
 800f58c:	ec51 0b17 	vmov	r0, r1, d7
 800f590:	f7f1 f842 	bl	8000618 <__aeabi_dmul>
 800f594:	9b02      	ldr	r3, [sp, #8]
 800f596:	9d00      	ldr	r5, [sp, #0]
 800f598:	930c      	str	r3, [sp, #48]	; 0x30
 800f59a:	ec41 0b18 	vmov	d8, r0, r1
 800f59e:	4639      	mov	r1, r7
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7f1 fae9 	bl	8000b78 <__aeabi_d2iz>
 800f5a6:	9011      	str	r0, [sp, #68]	; 0x44
 800f5a8:	f7f0 ffcc 	bl	8000544 <__aeabi_i2d>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	f7f0 fe78 	bl	80002a8 <__aeabi_dsub>
 800f5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5ba:	3330      	adds	r3, #48	; 0x30
 800f5bc:	f805 3b01 	strb.w	r3, [r5], #1
 800f5c0:	9b02      	ldr	r3, [sp, #8]
 800f5c2:	429d      	cmp	r5, r3
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	f04f 0200 	mov.w	r2, #0
 800f5cc:	d134      	bne.n	800f638 <_dtoa_r+0x660>
 800f5ce:	4b19      	ldr	r3, [pc, #100]	; (800f634 <_dtoa_r+0x65c>)
 800f5d0:	ec51 0b18 	vmov	r0, r1, d8
 800f5d4:	f7f0 fe6a 	bl	80002ac <__adddf3>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4630      	mov	r0, r6
 800f5de:	4639      	mov	r1, r7
 800f5e0:	f7f1 faaa 	bl	8000b38 <__aeabi_dcmpgt>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d175      	bne.n	800f6d4 <_dtoa_r+0x6fc>
 800f5e8:	ec53 2b18 	vmov	r2, r3, d8
 800f5ec:	4911      	ldr	r1, [pc, #68]	; (800f634 <_dtoa_r+0x65c>)
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f7f0 fe5a 	bl	80002a8 <__aeabi_dsub>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f1 fa7e 	bl	8000afc <__aeabi_dcmplt>
 800f600:	2800      	cmp	r0, #0
 800f602:	f43f af27 	beq.w	800f454 <_dtoa_r+0x47c>
 800f606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f608:	1e6b      	subs	r3, r5, #1
 800f60a:	930c      	str	r3, [sp, #48]	; 0x30
 800f60c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f610:	2b30      	cmp	r3, #48	; 0x30
 800f612:	d0f8      	beq.n	800f606 <_dtoa_r+0x62e>
 800f614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f618:	e04a      	b.n	800f6b0 <_dtoa_r+0x6d8>
 800f61a:	bf00      	nop
 800f61c:	08015148 	.word	0x08015148
 800f620:	08015120 	.word	0x08015120
 800f624:	3ff00000 	.word	0x3ff00000
 800f628:	40240000 	.word	0x40240000
 800f62c:	401c0000 	.word	0x401c0000
 800f630:	40140000 	.word	0x40140000
 800f634:	3fe00000 	.word	0x3fe00000
 800f638:	4baf      	ldr	r3, [pc, #700]	; (800f8f8 <_dtoa_r+0x920>)
 800f63a:	f7f0 ffed 	bl	8000618 <__aeabi_dmul>
 800f63e:	4606      	mov	r6, r0
 800f640:	460f      	mov	r7, r1
 800f642:	e7ac      	b.n	800f59e <_dtoa_r+0x5c6>
 800f644:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f648:	9d00      	ldr	r5, [sp, #0]
 800f64a:	4642      	mov	r2, r8
 800f64c:	464b      	mov	r3, r9
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7f1 f90b 	bl	800086c <__aeabi_ddiv>
 800f656:	f7f1 fa8f 	bl	8000b78 <__aeabi_d2iz>
 800f65a:	9002      	str	r0, [sp, #8]
 800f65c:	f7f0 ff72 	bl	8000544 <__aeabi_i2d>
 800f660:	4642      	mov	r2, r8
 800f662:	464b      	mov	r3, r9
 800f664:	f7f0 ffd8 	bl	8000618 <__aeabi_dmul>
 800f668:	4602      	mov	r2, r0
 800f66a:	460b      	mov	r3, r1
 800f66c:	4630      	mov	r0, r6
 800f66e:	4639      	mov	r1, r7
 800f670:	f7f0 fe1a 	bl	80002a8 <__aeabi_dsub>
 800f674:	9e02      	ldr	r6, [sp, #8]
 800f676:	9f01      	ldr	r7, [sp, #4]
 800f678:	3630      	adds	r6, #48	; 0x30
 800f67a:	f805 6b01 	strb.w	r6, [r5], #1
 800f67e:	9e00      	ldr	r6, [sp, #0]
 800f680:	1bae      	subs	r6, r5, r6
 800f682:	42b7      	cmp	r7, r6
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	d137      	bne.n	800f6fa <_dtoa_r+0x722>
 800f68a:	f7f0 fe0f 	bl	80002ac <__adddf3>
 800f68e:	4642      	mov	r2, r8
 800f690:	464b      	mov	r3, r9
 800f692:	4606      	mov	r6, r0
 800f694:	460f      	mov	r7, r1
 800f696:	f7f1 fa4f 	bl	8000b38 <__aeabi_dcmpgt>
 800f69a:	b9c8      	cbnz	r0, 800f6d0 <_dtoa_r+0x6f8>
 800f69c:	4642      	mov	r2, r8
 800f69e:	464b      	mov	r3, r9
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	f7f1 fa20 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6a8:	b110      	cbz	r0, 800f6b0 <_dtoa_r+0x6d8>
 800f6aa:	9b02      	ldr	r3, [sp, #8]
 800f6ac:	07d9      	lsls	r1, r3, #31
 800f6ae:	d40f      	bmi.n	800f6d0 <_dtoa_r+0x6f8>
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	4659      	mov	r1, fp
 800f6b4:	f000 fce8 	bl	8010088 <_Bfree>
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	702b      	strb	r3, [r5, #0]
 800f6bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6be:	f10a 0001 	add.w	r0, sl, #1
 800f6c2:	6018      	str	r0, [r3, #0]
 800f6c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f43f acd8 	beq.w	800f07c <_dtoa_r+0xa4>
 800f6cc:	601d      	str	r5, [r3, #0]
 800f6ce:	e4d5      	b.n	800f07c <_dtoa_r+0xa4>
 800f6d0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	461d      	mov	r5, r3
 800f6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6dc:	2a39      	cmp	r2, #57	; 0x39
 800f6de:	d108      	bne.n	800f6f2 <_dtoa_r+0x71a>
 800f6e0:	9a00      	ldr	r2, [sp, #0]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d1f7      	bne.n	800f6d6 <_dtoa_r+0x6fe>
 800f6e6:	9a07      	ldr	r2, [sp, #28]
 800f6e8:	9900      	ldr	r1, [sp, #0]
 800f6ea:	3201      	adds	r2, #1
 800f6ec:	9207      	str	r2, [sp, #28]
 800f6ee:	2230      	movs	r2, #48	; 0x30
 800f6f0:	700a      	strb	r2, [r1, #0]
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	3201      	adds	r2, #1
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	e78c      	b.n	800f614 <_dtoa_r+0x63c>
 800f6fa:	4b7f      	ldr	r3, [pc, #508]	; (800f8f8 <_dtoa_r+0x920>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f7f0 ff8b 	bl	8000618 <__aeabi_dmul>
 800f702:	2200      	movs	r2, #0
 800f704:	2300      	movs	r3, #0
 800f706:	4606      	mov	r6, r0
 800f708:	460f      	mov	r7, r1
 800f70a:	f7f1 f9ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d09b      	beq.n	800f64a <_dtoa_r+0x672>
 800f712:	e7cd      	b.n	800f6b0 <_dtoa_r+0x6d8>
 800f714:	9a08      	ldr	r2, [sp, #32]
 800f716:	2a00      	cmp	r2, #0
 800f718:	f000 80c4 	beq.w	800f8a4 <_dtoa_r+0x8cc>
 800f71c:	9a05      	ldr	r2, [sp, #20]
 800f71e:	2a01      	cmp	r2, #1
 800f720:	f300 80a8 	bgt.w	800f874 <_dtoa_r+0x89c>
 800f724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f726:	2a00      	cmp	r2, #0
 800f728:	f000 80a0 	beq.w	800f86c <_dtoa_r+0x894>
 800f72c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f730:	9e06      	ldr	r6, [sp, #24]
 800f732:	4645      	mov	r5, r8
 800f734:	9a04      	ldr	r2, [sp, #16]
 800f736:	2101      	movs	r1, #1
 800f738:	441a      	add	r2, r3
 800f73a:	4620      	mov	r0, r4
 800f73c:	4498      	add	r8, r3
 800f73e:	9204      	str	r2, [sp, #16]
 800f740:	f000 fd5e 	bl	8010200 <__i2b>
 800f744:	4607      	mov	r7, r0
 800f746:	2d00      	cmp	r5, #0
 800f748:	dd0b      	ble.n	800f762 <_dtoa_r+0x78a>
 800f74a:	9b04      	ldr	r3, [sp, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	dd08      	ble.n	800f762 <_dtoa_r+0x78a>
 800f750:	42ab      	cmp	r3, r5
 800f752:	9a04      	ldr	r2, [sp, #16]
 800f754:	bfa8      	it	ge
 800f756:	462b      	movge	r3, r5
 800f758:	eba8 0803 	sub.w	r8, r8, r3
 800f75c:	1aed      	subs	r5, r5, r3
 800f75e:	1ad3      	subs	r3, r2, r3
 800f760:	9304      	str	r3, [sp, #16]
 800f762:	9b06      	ldr	r3, [sp, #24]
 800f764:	b1fb      	cbz	r3, 800f7a6 <_dtoa_r+0x7ce>
 800f766:	9b08      	ldr	r3, [sp, #32]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 809f 	beq.w	800f8ac <_dtoa_r+0x8d4>
 800f76e:	2e00      	cmp	r6, #0
 800f770:	dd11      	ble.n	800f796 <_dtoa_r+0x7be>
 800f772:	4639      	mov	r1, r7
 800f774:	4632      	mov	r2, r6
 800f776:	4620      	mov	r0, r4
 800f778:	f000 fdfe 	bl	8010378 <__pow5mult>
 800f77c:	465a      	mov	r2, fp
 800f77e:	4601      	mov	r1, r0
 800f780:	4607      	mov	r7, r0
 800f782:	4620      	mov	r0, r4
 800f784:	f000 fd52 	bl	801022c <__multiply>
 800f788:	4659      	mov	r1, fp
 800f78a:	9007      	str	r0, [sp, #28]
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 fc7b 	bl	8010088 <_Bfree>
 800f792:	9b07      	ldr	r3, [sp, #28]
 800f794:	469b      	mov	fp, r3
 800f796:	9b06      	ldr	r3, [sp, #24]
 800f798:	1b9a      	subs	r2, r3, r6
 800f79a:	d004      	beq.n	800f7a6 <_dtoa_r+0x7ce>
 800f79c:	4659      	mov	r1, fp
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fdea 	bl	8010378 <__pow5mult>
 800f7a4:	4683      	mov	fp, r0
 800f7a6:	2101      	movs	r1, #1
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fd29 	bl	8010200 <__i2b>
 800f7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	dd7c      	ble.n	800f8b0 <_dtoa_r+0x8d8>
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fddc 	bl	8010378 <__pow5mult>
 800f7c0:	9b05      	ldr	r3, [sp, #20]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	dd76      	ble.n	800f8b6 <_dtoa_r+0x8de>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	9306      	str	r3, [sp, #24]
 800f7cc:	6933      	ldr	r3, [r6, #16]
 800f7ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f7d2:	6918      	ldr	r0, [r3, #16]
 800f7d4:	f000 fcc4 	bl	8010160 <__hi0bits>
 800f7d8:	f1c0 0020 	rsb	r0, r0, #32
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	4418      	add	r0, r3
 800f7e0:	f010 001f 	ands.w	r0, r0, #31
 800f7e4:	f000 8086 	beq.w	800f8f4 <_dtoa_r+0x91c>
 800f7e8:	f1c0 0320 	rsb	r3, r0, #32
 800f7ec:	2b04      	cmp	r3, #4
 800f7ee:	dd7f      	ble.n	800f8f0 <_dtoa_r+0x918>
 800f7f0:	f1c0 001c 	rsb	r0, r0, #28
 800f7f4:	9b04      	ldr	r3, [sp, #16]
 800f7f6:	4403      	add	r3, r0
 800f7f8:	4480      	add	r8, r0
 800f7fa:	4405      	add	r5, r0
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	f1b8 0f00 	cmp.w	r8, #0
 800f802:	dd05      	ble.n	800f810 <_dtoa_r+0x838>
 800f804:	4659      	mov	r1, fp
 800f806:	4642      	mov	r2, r8
 800f808:	4620      	mov	r0, r4
 800f80a:	f000 fe0f 	bl	801042c <__lshift>
 800f80e:	4683      	mov	fp, r0
 800f810:	9b04      	ldr	r3, [sp, #16]
 800f812:	2b00      	cmp	r3, #0
 800f814:	dd05      	ble.n	800f822 <_dtoa_r+0x84a>
 800f816:	4631      	mov	r1, r6
 800f818:	461a      	mov	r2, r3
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 fe06 	bl	801042c <__lshift>
 800f820:	4606      	mov	r6, r0
 800f822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f824:	2b00      	cmp	r3, #0
 800f826:	d069      	beq.n	800f8fc <_dtoa_r+0x924>
 800f828:	4631      	mov	r1, r6
 800f82a:	4658      	mov	r0, fp
 800f82c:	f000 fe6a 	bl	8010504 <__mcmp>
 800f830:	2800      	cmp	r0, #0
 800f832:	da63      	bge.n	800f8fc <_dtoa_r+0x924>
 800f834:	2300      	movs	r3, #0
 800f836:	4659      	mov	r1, fp
 800f838:	220a      	movs	r2, #10
 800f83a:	4620      	mov	r0, r4
 800f83c:	f000 fc46 	bl	80100cc <__multadd>
 800f840:	9b08      	ldr	r3, [sp, #32]
 800f842:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f846:	4683      	mov	fp, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f000 818f 	beq.w	800fb6c <_dtoa_r+0xb94>
 800f84e:	4639      	mov	r1, r7
 800f850:	2300      	movs	r3, #0
 800f852:	220a      	movs	r2, #10
 800f854:	4620      	mov	r0, r4
 800f856:	f000 fc39 	bl	80100cc <__multadd>
 800f85a:	f1b9 0f00 	cmp.w	r9, #0
 800f85e:	4607      	mov	r7, r0
 800f860:	f300 808e 	bgt.w	800f980 <_dtoa_r+0x9a8>
 800f864:	9b05      	ldr	r3, [sp, #20]
 800f866:	2b02      	cmp	r3, #2
 800f868:	dc50      	bgt.n	800f90c <_dtoa_r+0x934>
 800f86a:	e089      	b.n	800f980 <_dtoa_r+0x9a8>
 800f86c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f86e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f872:	e75d      	b.n	800f730 <_dtoa_r+0x758>
 800f874:	9b01      	ldr	r3, [sp, #4]
 800f876:	1e5e      	subs	r6, r3, #1
 800f878:	9b06      	ldr	r3, [sp, #24]
 800f87a:	42b3      	cmp	r3, r6
 800f87c:	bfbf      	itttt	lt
 800f87e:	9b06      	ldrlt	r3, [sp, #24]
 800f880:	9606      	strlt	r6, [sp, #24]
 800f882:	1af2      	sublt	r2, r6, r3
 800f884:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f886:	bfb6      	itet	lt
 800f888:	189b      	addlt	r3, r3, r2
 800f88a:	1b9e      	subge	r6, r3, r6
 800f88c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f88e:	9b01      	ldr	r3, [sp, #4]
 800f890:	bfb8      	it	lt
 800f892:	2600      	movlt	r6, #0
 800f894:	2b00      	cmp	r3, #0
 800f896:	bfb5      	itete	lt
 800f898:	eba8 0503 	sublt.w	r5, r8, r3
 800f89c:	9b01      	ldrge	r3, [sp, #4]
 800f89e:	2300      	movlt	r3, #0
 800f8a0:	4645      	movge	r5, r8
 800f8a2:	e747      	b.n	800f734 <_dtoa_r+0x75c>
 800f8a4:	9e06      	ldr	r6, [sp, #24]
 800f8a6:	9f08      	ldr	r7, [sp, #32]
 800f8a8:	4645      	mov	r5, r8
 800f8aa:	e74c      	b.n	800f746 <_dtoa_r+0x76e>
 800f8ac:	9a06      	ldr	r2, [sp, #24]
 800f8ae:	e775      	b.n	800f79c <_dtoa_r+0x7c4>
 800f8b0:	9b05      	ldr	r3, [sp, #20]
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	dc18      	bgt.n	800f8e8 <_dtoa_r+0x910>
 800f8b6:	9b02      	ldr	r3, [sp, #8]
 800f8b8:	b9b3      	cbnz	r3, 800f8e8 <_dtoa_r+0x910>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8c0:	b9a3      	cbnz	r3, 800f8ec <_dtoa_r+0x914>
 800f8c2:	9b03      	ldr	r3, [sp, #12]
 800f8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8c8:	0d1b      	lsrs	r3, r3, #20
 800f8ca:	051b      	lsls	r3, r3, #20
 800f8cc:	b12b      	cbz	r3, 800f8da <_dtoa_r+0x902>
 800f8ce:	9b04      	ldr	r3, [sp, #16]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	9304      	str	r3, [sp, #16]
 800f8d4:	f108 0801 	add.w	r8, r8, #1
 800f8d8:	2301      	movs	r3, #1
 800f8da:	9306      	str	r3, [sp, #24]
 800f8dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f47f af74 	bne.w	800f7cc <_dtoa_r+0x7f4>
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	e779      	b.n	800f7dc <_dtoa_r+0x804>
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	e7f6      	b.n	800f8da <_dtoa_r+0x902>
 800f8ec:	9b02      	ldr	r3, [sp, #8]
 800f8ee:	e7f4      	b.n	800f8da <_dtoa_r+0x902>
 800f8f0:	d085      	beq.n	800f7fe <_dtoa_r+0x826>
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	301c      	adds	r0, #28
 800f8f6:	e77d      	b.n	800f7f4 <_dtoa_r+0x81c>
 800f8f8:	40240000 	.word	0x40240000
 800f8fc:	9b01      	ldr	r3, [sp, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	dc38      	bgt.n	800f974 <_dtoa_r+0x99c>
 800f902:	9b05      	ldr	r3, [sp, #20]
 800f904:	2b02      	cmp	r3, #2
 800f906:	dd35      	ble.n	800f974 <_dtoa_r+0x99c>
 800f908:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f90c:	f1b9 0f00 	cmp.w	r9, #0
 800f910:	d10d      	bne.n	800f92e <_dtoa_r+0x956>
 800f912:	4631      	mov	r1, r6
 800f914:	464b      	mov	r3, r9
 800f916:	2205      	movs	r2, #5
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 fbd7 	bl	80100cc <__multadd>
 800f91e:	4601      	mov	r1, r0
 800f920:	4606      	mov	r6, r0
 800f922:	4658      	mov	r0, fp
 800f924:	f000 fdee 	bl	8010504 <__mcmp>
 800f928:	2800      	cmp	r0, #0
 800f92a:	f73f adbd 	bgt.w	800f4a8 <_dtoa_r+0x4d0>
 800f92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f930:	9d00      	ldr	r5, [sp, #0]
 800f932:	ea6f 0a03 	mvn.w	sl, r3
 800f936:	f04f 0800 	mov.w	r8, #0
 800f93a:	4631      	mov	r1, r6
 800f93c:	4620      	mov	r0, r4
 800f93e:	f000 fba3 	bl	8010088 <_Bfree>
 800f942:	2f00      	cmp	r7, #0
 800f944:	f43f aeb4 	beq.w	800f6b0 <_dtoa_r+0x6d8>
 800f948:	f1b8 0f00 	cmp.w	r8, #0
 800f94c:	d005      	beq.n	800f95a <_dtoa_r+0x982>
 800f94e:	45b8      	cmp	r8, r7
 800f950:	d003      	beq.n	800f95a <_dtoa_r+0x982>
 800f952:	4641      	mov	r1, r8
 800f954:	4620      	mov	r0, r4
 800f956:	f000 fb97 	bl	8010088 <_Bfree>
 800f95a:	4639      	mov	r1, r7
 800f95c:	4620      	mov	r0, r4
 800f95e:	f000 fb93 	bl	8010088 <_Bfree>
 800f962:	e6a5      	b.n	800f6b0 <_dtoa_r+0x6d8>
 800f964:	2600      	movs	r6, #0
 800f966:	4637      	mov	r7, r6
 800f968:	e7e1      	b.n	800f92e <_dtoa_r+0x956>
 800f96a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f96c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f970:	4637      	mov	r7, r6
 800f972:	e599      	b.n	800f4a8 <_dtoa_r+0x4d0>
 800f974:	9b08      	ldr	r3, [sp, #32]
 800f976:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 80fd 	beq.w	800fb7a <_dtoa_r+0xba2>
 800f980:	2d00      	cmp	r5, #0
 800f982:	dd05      	ble.n	800f990 <_dtoa_r+0x9b8>
 800f984:	4639      	mov	r1, r7
 800f986:	462a      	mov	r2, r5
 800f988:	4620      	mov	r0, r4
 800f98a:	f000 fd4f 	bl	801042c <__lshift>
 800f98e:	4607      	mov	r7, r0
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d05c      	beq.n	800fa50 <_dtoa_r+0xa78>
 800f996:	6879      	ldr	r1, [r7, #4]
 800f998:	4620      	mov	r0, r4
 800f99a:	f000 fb35 	bl	8010008 <_Balloc>
 800f99e:	4605      	mov	r5, r0
 800f9a0:	b928      	cbnz	r0, 800f9ae <_dtoa_r+0x9d6>
 800f9a2:	4b80      	ldr	r3, [pc, #512]	; (800fba4 <_dtoa_r+0xbcc>)
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f9aa:	f7ff bb2e 	b.w	800f00a <_dtoa_r+0x32>
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	3202      	adds	r2, #2
 800f9b2:	0092      	lsls	r2, r2, #2
 800f9b4:	f107 010c 	add.w	r1, r7, #12
 800f9b8:	300c      	adds	r0, #12
 800f9ba:	f7fe fc93 	bl	800e2e4 <memcpy>
 800f9be:	2201      	movs	r2, #1
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f000 fd32 	bl	801042c <__lshift>
 800f9c8:	9b00      	ldr	r3, [sp, #0]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	9b00      	ldr	r3, [sp, #0]
 800f9d0:	444b      	add	r3, r9
 800f9d2:	9307      	str	r3, [sp, #28]
 800f9d4:	9b02      	ldr	r3, [sp, #8]
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	46b8      	mov	r8, r7
 800f9dc:	9306      	str	r3, [sp, #24]
 800f9de:	4607      	mov	r7, r0
 800f9e0:	9b01      	ldr	r3, [sp, #4]
 800f9e2:	4631      	mov	r1, r6
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	4658      	mov	r0, fp
 800f9e8:	9302      	str	r3, [sp, #8]
 800f9ea:	f7ff fa69 	bl	800eec0 <quorem>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	3330      	adds	r3, #48	; 0x30
 800f9f2:	9004      	str	r0, [sp, #16]
 800f9f4:	4641      	mov	r1, r8
 800f9f6:	4658      	mov	r0, fp
 800f9f8:	9308      	str	r3, [sp, #32]
 800f9fa:	f000 fd83 	bl	8010504 <__mcmp>
 800f9fe:	463a      	mov	r2, r7
 800fa00:	4681      	mov	r9, r0
 800fa02:	4631      	mov	r1, r6
 800fa04:	4620      	mov	r0, r4
 800fa06:	f000 fd99 	bl	801053c <__mdiff>
 800fa0a:	68c2      	ldr	r2, [r0, #12]
 800fa0c:	9b08      	ldr	r3, [sp, #32]
 800fa0e:	4605      	mov	r5, r0
 800fa10:	bb02      	cbnz	r2, 800fa54 <_dtoa_r+0xa7c>
 800fa12:	4601      	mov	r1, r0
 800fa14:	4658      	mov	r0, fp
 800fa16:	f000 fd75 	bl	8010504 <__mcmp>
 800fa1a:	9b08      	ldr	r3, [sp, #32]
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4620      	mov	r0, r4
 800fa22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fa26:	f000 fb2f 	bl	8010088 <_Bfree>
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa2e:	9d01      	ldr	r5, [sp, #4]
 800fa30:	ea43 0102 	orr.w	r1, r3, r2
 800fa34:	9b06      	ldr	r3, [sp, #24]
 800fa36:	430b      	orrs	r3, r1
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	d10d      	bne.n	800fa58 <_dtoa_r+0xa80>
 800fa3c:	2b39      	cmp	r3, #57	; 0x39
 800fa3e:	d029      	beq.n	800fa94 <_dtoa_r+0xabc>
 800fa40:	f1b9 0f00 	cmp.w	r9, #0
 800fa44:	dd01      	ble.n	800fa4a <_dtoa_r+0xa72>
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	3331      	adds	r3, #49	; 0x31
 800fa4a:	9a02      	ldr	r2, [sp, #8]
 800fa4c:	7013      	strb	r3, [r2, #0]
 800fa4e:	e774      	b.n	800f93a <_dtoa_r+0x962>
 800fa50:	4638      	mov	r0, r7
 800fa52:	e7b9      	b.n	800f9c8 <_dtoa_r+0x9f0>
 800fa54:	2201      	movs	r2, #1
 800fa56:	e7e2      	b.n	800fa1e <_dtoa_r+0xa46>
 800fa58:	f1b9 0f00 	cmp.w	r9, #0
 800fa5c:	db06      	blt.n	800fa6c <_dtoa_r+0xa94>
 800fa5e:	9905      	ldr	r1, [sp, #20]
 800fa60:	ea41 0909 	orr.w	r9, r1, r9
 800fa64:	9906      	ldr	r1, [sp, #24]
 800fa66:	ea59 0101 	orrs.w	r1, r9, r1
 800fa6a:	d120      	bne.n	800faae <_dtoa_r+0xad6>
 800fa6c:	2a00      	cmp	r2, #0
 800fa6e:	ddec      	ble.n	800fa4a <_dtoa_r+0xa72>
 800fa70:	4659      	mov	r1, fp
 800fa72:	2201      	movs	r2, #1
 800fa74:	4620      	mov	r0, r4
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	f000 fcd8 	bl	801042c <__lshift>
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	4683      	mov	fp, r0
 800fa80:	f000 fd40 	bl	8010504 <__mcmp>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	9b01      	ldr	r3, [sp, #4]
 800fa88:	dc02      	bgt.n	800fa90 <_dtoa_r+0xab8>
 800fa8a:	d1de      	bne.n	800fa4a <_dtoa_r+0xa72>
 800fa8c:	07da      	lsls	r2, r3, #31
 800fa8e:	d5dc      	bpl.n	800fa4a <_dtoa_r+0xa72>
 800fa90:	2b39      	cmp	r3, #57	; 0x39
 800fa92:	d1d8      	bne.n	800fa46 <_dtoa_r+0xa6e>
 800fa94:	9a02      	ldr	r2, [sp, #8]
 800fa96:	2339      	movs	r3, #57	; 0x39
 800fa98:	7013      	strb	r3, [r2, #0]
 800fa9a:	462b      	mov	r3, r5
 800fa9c:	461d      	mov	r5, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800faa4:	2a39      	cmp	r2, #57	; 0x39
 800faa6:	d050      	beq.n	800fb4a <_dtoa_r+0xb72>
 800faa8:	3201      	adds	r2, #1
 800faaa:	701a      	strb	r2, [r3, #0]
 800faac:	e745      	b.n	800f93a <_dtoa_r+0x962>
 800faae:	2a00      	cmp	r2, #0
 800fab0:	dd03      	ble.n	800faba <_dtoa_r+0xae2>
 800fab2:	2b39      	cmp	r3, #57	; 0x39
 800fab4:	d0ee      	beq.n	800fa94 <_dtoa_r+0xabc>
 800fab6:	3301      	adds	r3, #1
 800fab8:	e7c7      	b.n	800fa4a <_dtoa_r+0xa72>
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	9907      	ldr	r1, [sp, #28]
 800fabe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fac2:	428a      	cmp	r2, r1
 800fac4:	d02a      	beq.n	800fb1c <_dtoa_r+0xb44>
 800fac6:	4659      	mov	r1, fp
 800fac8:	2300      	movs	r3, #0
 800faca:	220a      	movs	r2, #10
 800facc:	4620      	mov	r0, r4
 800face:	f000 fafd 	bl	80100cc <__multadd>
 800fad2:	45b8      	cmp	r8, r7
 800fad4:	4683      	mov	fp, r0
 800fad6:	f04f 0300 	mov.w	r3, #0
 800fada:	f04f 020a 	mov.w	r2, #10
 800fade:	4641      	mov	r1, r8
 800fae0:	4620      	mov	r0, r4
 800fae2:	d107      	bne.n	800faf4 <_dtoa_r+0xb1c>
 800fae4:	f000 faf2 	bl	80100cc <__multadd>
 800fae8:	4680      	mov	r8, r0
 800faea:	4607      	mov	r7, r0
 800faec:	9b01      	ldr	r3, [sp, #4]
 800faee:	3301      	adds	r3, #1
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	e775      	b.n	800f9e0 <_dtoa_r+0xa08>
 800faf4:	f000 faea 	bl	80100cc <__multadd>
 800faf8:	4639      	mov	r1, r7
 800fafa:	4680      	mov	r8, r0
 800fafc:	2300      	movs	r3, #0
 800fafe:	220a      	movs	r2, #10
 800fb00:	4620      	mov	r0, r4
 800fb02:	f000 fae3 	bl	80100cc <__multadd>
 800fb06:	4607      	mov	r7, r0
 800fb08:	e7f0      	b.n	800faec <_dtoa_r+0xb14>
 800fb0a:	f1b9 0f00 	cmp.w	r9, #0
 800fb0e:	9a00      	ldr	r2, [sp, #0]
 800fb10:	bfcc      	ite	gt
 800fb12:	464d      	movgt	r5, r9
 800fb14:	2501      	movle	r5, #1
 800fb16:	4415      	add	r5, r2
 800fb18:	f04f 0800 	mov.w	r8, #0
 800fb1c:	4659      	mov	r1, fp
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4620      	mov	r0, r4
 800fb22:	9301      	str	r3, [sp, #4]
 800fb24:	f000 fc82 	bl	801042c <__lshift>
 800fb28:	4631      	mov	r1, r6
 800fb2a:	4683      	mov	fp, r0
 800fb2c:	f000 fcea 	bl	8010504 <__mcmp>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	dcb2      	bgt.n	800fa9a <_dtoa_r+0xac2>
 800fb34:	d102      	bne.n	800fb3c <_dtoa_r+0xb64>
 800fb36:	9b01      	ldr	r3, [sp, #4]
 800fb38:	07db      	lsls	r3, r3, #31
 800fb3a:	d4ae      	bmi.n	800fa9a <_dtoa_r+0xac2>
 800fb3c:	462b      	mov	r3, r5
 800fb3e:	461d      	mov	r5, r3
 800fb40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb44:	2a30      	cmp	r2, #48	; 0x30
 800fb46:	d0fa      	beq.n	800fb3e <_dtoa_r+0xb66>
 800fb48:	e6f7      	b.n	800f93a <_dtoa_r+0x962>
 800fb4a:	9a00      	ldr	r2, [sp, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d1a5      	bne.n	800fa9c <_dtoa_r+0xac4>
 800fb50:	f10a 0a01 	add.w	sl, sl, #1
 800fb54:	2331      	movs	r3, #49	; 0x31
 800fb56:	e779      	b.n	800fa4c <_dtoa_r+0xa74>
 800fb58:	4b13      	ldr	r3, [pc, #76]	; (800fba8 <_dtoa_r+0xbd0>)
 800fb5a:	f7ff baaf 	b.w	800f0bc <_dtoa_r+0xe4>
 800fb5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f47f aa86 	bne.w	800f072 <_dtoa_r+0x9a>
 800fb66:	4b11      	ldr	r3, [pc, #68]	; (800fbac <_dtoa_r+0xbd4>)
 800fb68:	f7ff baa8 	b.w	800f0bc <_dtoa_r+0xe4>
 800fb6c:	f1b9 0f00 	cmp.w	r9, #0
 800fb70:	dc03      	bgt.n	800fb7a <_dtoa_r+0xba2>
 800fb72:	9b05      	ldr	r3, [sp, #20]
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	f73f aec9 	bgt.w	800f90c <_dtoa_r+0x934>
 800fb7a:	9d00      	ldr	r5, [sp, #0]
 800fb7c:	4631      	mov	r1, r6
 800fb7e:	4658      	mov	r0, fp
 800fb80:	f7ff f99e 	bl	800eec0 <quorem>
 800fb84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fb88:	f805 3b01 	strb.w	r3, [r5], #1
 800fb8c:	9a00      	ldr	r2, [sp, #0]
 800fb8e:	1aaa      	subs	r2, r5, r2
 800fb90:	4591      	cmp	r9, r2
 800fb92:	ddba      	ble.n	800fb0a <_dtoa_r+0xb32>
 800fb94:	4659      	mov	r1, fp
 800fb96:	2300      	movs	r3, #0
 800fb98:	220a      	movs	r2, #10
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f000 fa96 	bl	80100cc <__multadd>
 800fba0:	4683      	mov	fp, r0
 800fba2:	e7eb      	b.n	800fb7c <_dtoa_r+0xba4>
 800fba4:	0801504f 	.word	0x0801504f
 800fba8:	08014fa8 	.word	0x08014fa8
 800fbac:	08014fcc 	.word	0x08014fcc

0800fbb0 <__sflush_r>:
 800fbb0:	898a      	ldrh	r2, [r1, #12]
 800fbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	0710      	lsls	r0, r2, #28
 800fbba:	460c      	mov	r4, r1
 800fbbc:	d458      	bmi.n	800fc70 <__sflush_r+0xc0>
 800fbbe:	684b      	ldr	r3, [r1, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	dc05      	bgt.n	800fbd0 <__sflush_r+0x20>
 800fbc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	dc02      	bgt.n	800fbd0 <__sflush_r+0x20>
 800fbca:	2000      	movs	r0, #0
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbd2:	2e00      	cmp	r6, #0
 800fbd4:	d0f9      	beq.n	800fbca <__sflush_r+0x1a>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbdc:	682f      	ldr	r7, [r5, #0]
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	d032      	beq.n	800fc48 <__sflush_r+0x98>
 800fbe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbe4:	89a3      	ldrh	r3, [r4, #12]
 800fbe6:	075a      	lsls	r2, r3, #29
 800fbe8:	d505      	bpl.n	800fbf6 <__sflush_r+0x46>
 800fbea:	6863      	ldr	r3, [r4, #4]
 800fbec:	1ac0      	subs	r0, r0, r3
 800fbee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbf0:	b10b      	cbz	r3, 800fbf6 <__sflush_r+0x46>
 800fbf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbf4:	1ac0      	subs	r0, r0, r3
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbfc:	6a21      	ldr	r1, [r4, #32]
 800fbfe:	4628      	mov	r0, r5
 800fc00:	47b0      	blx	r6
 800fc02:	1c43      	adds	r3, r0, #1
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	d106      	bne.n	800fc16 <__sflush_r+0x66>
 800fc08:	6829      	ldr	r1, [r5, #0]
 800fc0a:	291d      	cmp	r1, #29
 800fc0c:	d82c      	bhi.n	800fc68 <__sflush_r+0xb8>
 800fc0e:	4a2a      	ldr	r2, [pc, #168]	; (800fcb8 <__sflush_r+0x108>)
 800fc10:	40ca      	lsrs	r2, r1
 800fc12:	07d6      	lsls	r6, r2, #31
 800fc14:	d528      	bpl.n	800fc68 <__sflush_r+0xb8>
 800fc16:	2200      	movs	r2, #0
 800fc18:	6062      	str	r2, [r4, #4]
 800fc1a:	04d9      	lsls	r1, r3, #19
 800fc1c:	6922      	ldr	r2, [r4, #16]
 800fc1e:	6022      	str	r2, [r4, #0]
 800fc20:	d504      	bpl.n	800fc2c <__sflush_r+0x7c>
 800fc22:	1c42      	adds	r2, r0, #1
 800fc24:	d101      	bne.n	800fc2a <__sflush_r+0x7a>
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	b903      	cbnz	r3, 800fc2c <__sflush_r+0x7c>
 800fc2a:	6560      	str	r0, [r4, #84]	; 0x54
 800fc2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc2e:	602f      	str	r7, [r5, #0]
 800fc30:	2900      	cmp	r1, #0
 800fc32:	d0ca      	beq.n	800fbca <__sflush_r+0x1a>
 800fc34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc38:	4299      	cmp	r1, r3
 800fc3a:	d002      	beq.n	800fc42 <__sflush_r+0x92>
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	f000 fd71 	bl	8010724 <_free_r>
 800fc42:	2000      	movs	r0, #0
 800fc44:	6360      	str	r0, [r4, #52]	; 0x34
 800fc46:	e7c1      	b.n	800fbcc <__sflush_r+0x1c>
 800fc48:	6a21      	ldr	r1, [r4, #32]
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	47b0      	blx	r6
 800fc50:	1c41      	adds	r1, r0, #1
 800fc52:	d1c7      	bne.n	800fbe4 <__sflush_r+0x34>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d0c4      	beq.n	800fbe4 <__sflush_r+0x34>
 800fc5a:	2b1d      	cmp	r3, #29
 800fc5c:	d001      	beq.n	800fc62 <__sflush_r+0xb2>
 800fc5e:	2b16      	cmp	r3, #22
 800fc60:	d101      	bne.n	800fc66 <__sflush_r+0xb6>
 800fc62:	602f      	str	r7, [r5, #0]
 800fc64:	e7b1      	b.n	800fbca <__sflush_r+0x1a>
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	e7ad      	b.n	800fbcc <__sflush_r+0x1c>
 800fc70:	690f      	ldr	r7, [r1, #16]
 800fc72:	2f00      	cmp	r7, #0
 800fc74:	d0a9      	beq.n	800fbca <__sflush_r+0x1a>
 800fc76:	0793      	lsls	r3, r2, #30
 800fc78:	680e      	ldr	r6, [r1, #0]
 800fc7a:	bf08      	it	eq
 800fc7c:	694b      	ldreq	r3, [r1, #20]
 800fc7e:	600f      	str	r7, [r1, #0]
 800fc80:	bf18      	it	ne
 800fc82:	2300      	movne	r3, #0
 800fc84:	eba6 0807 	sub.w	r8, r6, r7
 800fc88:	608b      	str	r3, [r1, #8]
 800fc8a:	f1b8 0f00 	cmp.w	r8, #0
 800fc8e:	dd9c      	ble.n	800fbca <__sflush_r+0x1a>
 800fc90:	6a21      	ldr	r1, [r4, #32]
 800fc92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc94:	4643      	mov	r3, r8
 800fc96:	463a      	mov	r2, r7
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b0      	blx	r6
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	dc06      	bgt.n	800fcae <__sflush_r+0xfe>
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcac:	e78e      	b.n	800fbcc <__sflush_r+0x1c>
 800fcae:	4407      	add	r7, r0
 800fcb0:	eba8 0800 	sub.w	r8, r8, r0
 800fcb4:	e7e9      	b.n	800fc8a <__sflush_r+0xda>
 800fcb6:	bf00      	nop
 800fcb8:	20400001 	.word	0x20400001

0800fcbc <_fflush_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	690b      	ldr	r3, [r1, #16]
 800fcc0:	4605      	mov	r5, r0
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	b913      	cbnz	r3, 800fccc <_fflush_r+0x10>
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	4628      	mov	r0, r5
 800fcca:	bd38      	pop	{r3, r4, r5, pc}
 800fccc:	b118      	cbz	r0, 800fcd6 <_fflush_r+0x1a>
 800fcce:	6983      	ldr	r3, [r0, #24]
 800fcd0:	b90b      	cbnz	r3, 800fcd6 <_fflush_r+0x1a>
 800fcd2:	f000 f887 	bl	800fde4 <__sinit>
 800fcd6:	4b14      	ldr	r3, [pc, #80]	; (800fd28 <_fflush_r+0x6c>)
 800fcd8:	429c      	cmp	r4, r3
 800fcda:	d11b      	bne.n	800fd14 <_fflush_r+0x58>
 800fcdc:	686c      	ldr	r4, [r5, #4]
 800fcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d0ef      	beq.n	800fcc6 <_fflush_r+0xa>
 800fce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fce8:	07d0      	lsls	r0, r2, #31
 800fcea:	d404      	bmi.n	800fcf6 <_fflush_r+0x3a>
 800fcec:	0599      	lsls	r1, r3, #22
 800fcee:	d402      	bmi.n	800fcf6 <_fflush_r+0x3a>
 800fcf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcf2:	f000 f91a 	bl	800ff2a <__retarget_lock_acquire_recursive>
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	f7ff ff59 	bl	800fbb0 <__sflush_r>
 800fcfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd00:	07da      	lsls	r2, r3, #31
 800fd02:	4605      	mov	r5, r0
 800fd04:	d4e0      	bmi.n	800fcc8 <_fflush_r+0xc>
 800fd06:	89a3      	ldrh	r3, [r4, #12]
 800fd08:	059b      	lsls	r3, r3, #22
 800fd0a:	d4dd      	bmi.n	800fcc8 <_fflush_r+0xc>
 800fd0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd0e:	f000 f90d 	bl	800ff2c <__retarget_lock_release_recursive>
 800fd12:	e7d9      	b.n	800fcc8 <_fflush_r+0xc>
 800fd14:	4b05      	ldr	r3, [pc, #20]	; (800fd2c <_fflush_r+0x70>)
 800fd16:	429c      	cmp	r4, r3
 800fd18:	d101      	bne.n	800fd1e <_fflush_r+0x62>
 800fd1a:	68ac      	ldr	r4, [r5, #8]
 800fd1c:	e7df      	b.n	800fcde <_fflush_r+0x22>
 800fd1e:	4b04      	ldr	r3, [pc, #16]	; (800fd30 <_fflush_r+0x74>)
 800fd20:	429c      	cmp	r4, r3
 800fd22:	bf08      	it	eq
 800fd24:	68ec      	ldreq	r4, [r5, #12]
 800fd26:	e7da      	b.n	800fcde <_fflush_r+0x22>
 800fd28:	08015080 	.word	0x08015080
 800fd2c:	080150a0 	.word	0x080150a0
 800fd30:	08015060 	.word	0x08015060

0800fd34 <std>:
 800fd34:	2300      	movs	r3, #0
 800fd36:	b510      	push	{r4, lr}
 800fd38:	4604      	mov	r4, r0
 800fd3a:	e9c0 3300 	strd	r3, r3, [r0]
 800fd3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd42:	6083      	str	r3, [r0, #8]
 800fd44:	8181      	strh	r1, [r0, #12]
 800fd46:	6643      	str	r3, [r0, #100]	; 0x64
 800fd48:	81c2      	strh	r2, [r0, #14]
 800fd4a:	6183      	str	r3, [r0, #24]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	2208      	movs	r2, #8
 800fd50:	305c      	adds	r0, #92	; 0x5c
 800fd52:	f7fe fad5 	bl	800e300 <memset>
 800fd56:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <std+0x38>)
 800fd58:	6263      	str	r3, [r4, #36]	; 0x24
 800fd5a:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <std+0x3c>)
 800fd5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <std+0x40>)
 800fd60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <std+0x44>)
 800fd64:	6224      	str	r4, [r4, #32]
 800fd66:	6323      	str	r3, [r4, #48]	; 0x30
 800fd68:	bd10      	pop	{r4, pc}
 800fd6a:	bf00      	nop
 800fd6c:	08010e05 	.word	0x08010e05
 800fd70:	08010e27 	.word	0x08010e27
 800fd74:	08010e5f 	.word	0x08010e5f
 800fd78:	08010e83 	.word	0x08010e83

0800fd7c <_cleanup_r>:
 800fd7c:	4901      	ldr	r1, [pc, #4]	; (800fd84 <_cleanup_r+0x8>)
 800fd7e:	f000 b8af 	b.w	800fee0 <_fwalk_reent>
 800fd82:	bf00      	nop
 800fd84:	0800fcbd 	.word	0x0800fcbd

0800fd88 <__sfmoreglue>:
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	1e4a      	subs	r2, r1, #1
 800fd8c:	2568      	movs	r5, #104	; 0x68
 800fd8e:	4355      	muls	r5, r2
 800fd90:	460e      	mov	r6, r1
 800fd92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd96:	f000 fd15 	bl	80107c4 <_malloc_r>
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	b140      	cbz	r0, 800fdb0 <__sfmoreglue+0x28>
 800fd9e:	2100      	movs	r1, #0
 800fda0:	e9c0 1600 	strd	r1, r6, [r0]
 800fda4:	300c      	adds	r0, #12
 800fda6:	60a0      	str	r0, [r4, #8]
 800fda8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fdac:	f7fe faa8 	bl	800e300 <memset>
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	bd70      	pop	{r4, r5, r6, pc}

0800fdb4 <__sfp_lock_acquire>:
 800fdb4:	4801      	ldr	r0, [pc, #4]	; (800fdbc <__sfp_lock_acquire+0x8>)
 800fdb6:	f000 b8b8 	b.w	800ff2a <__retarget_lock_acquire_recursive>
 800fdba:	bf00      	nop
 800fdbc:	2001fe5c 	.word	0x2001fe5c

0800fdc0 <__sfp_lock_release>:
 800fdc0:	4801      	ldr	r0, [pc, #4]	; (800fdc8 <__sfp_lock_release+0x8>)
 800fdc2:	f000 b8b3 	b.w	800ff2c <__retarget_lock_release_recursive>
 800fdc6:	bf00      	nop
 800fdc8:	2001fe5c 	.word	0x2001fe5c

0800fdcc <__sinit_lock_acquire>:
 800fdcc:	4801      	ldr	r0, [pc, #4]	; (800fdd4 <__sinit_lock_acquire+0x8>)
 800fdce:	f000 b8ac 	b.w	800ff2a <__retarget_lock_acquire_recursive>
 800fdd2:	bf00      	nop
 800fdd4:	2001fe57 	.word	0x2001fe57

0800fdd8 <__sinit_lock_release>:
 800fdd8:	4801      	ldr	r0, [pc, #4]	; (800fde0 <__sinit_lock_release+0x8>)
 800fdda:	f000 b8a7 	b.w	800ff2c <__retarget_lock_release_recursive>
 800fdde:	bf00      	nop
 800fde0:	2001fe57 	.word	0x2001fe57

0800fde4 <__sinit>:
 800fde4:	b510      	push	{r4, lr}
 800fde6:	4604      	mov	r4, r0
 800fde8:	f7ff fff0 	bl	800fdcc <__sinit_lock_acquire>
 800fdec:	69a3      	ldr	r3, [r4, #24]
 800fdee:	b11b      	cbz	r3, 800fdf8 <__sinit+0x14>
 800fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf4:	f7ff bff0 	b.w	800fdd8 <__sinit_lock_release>
 800fdf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdfc:	6523      	str	r3, [r4, #80]	; 0x50
 800fdfe:	4b13      	ldr	r3, [pc, #76]	; (800fe4c <__sinit+0x68>)
 800fe00:	4a13      	ldr	r2, [pc, #76]	; (800fe50 <__sinit+0x6c>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe06:	42a3      	cmp	r3, r4
 800fe08:	bf04      	itt	eq
 800fe0a:	2301      	moveq	r3, #1
 800fe0c:	61a3      	streq	r3, [r4, #24]
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f000 f820 	bl	800fe54 <__sfp>
 800fe14:	6060      	str	r0, [r4, #4]
 800fe16:	4620      	mov	r0, r4
 800fe18:	f000 f81c 	bl	800fe54 <__sfp>
 800fe1c:	60a0      	str	r0, [r4, #8]
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 f818 	bl	800fe54 <__sfp>
 800fe24:	2200      	movs	r2, #0
 800fe26:	60e0      	str	r0, [r4, #12]
 800fe28:	2104      	movs	r1, #4
 800fe2a:	6860      	ldr	r0, [r4, #4]
 800fe2c:	f7ff ff82 	bl	800fd34 <std>
 800fe30:	68a0      	ldr	r0, [r4, #8]
 800fe32:	2201      	movs	r2, #1
 800fe34:	2109      	movs	r1, #9
 800fe36:	f7ff ff7d 	bl	800fd34 <std>
 800fe3a:	68e0      	ldr	r0, [r4, #12]
 800fe3c:	2202      	movs	r2, #2
 800fe3e:	2112      	movs	r1, #18
 800fe40:	f7ff ff78 	bl	800fd34 <std>
 800fe44:	2301      	movs	r3, #1
 800fe46:	61a3      	str	r3, [r4, #24]
 800fe48:	e7d2      	b.n	800fdf0 <__sinit+0xc>
 800fe4a:	bf00      	nop
 800fe4c:	08014f94 	.word	0x08014f94
 800fe50:	0800fd7d 	.word	0x0800fd7d

0800fe54 <__sfp>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	4607      	mov	r7, r0
 800fe58:	f7ff ffac 	bl	800fdb4 <__sfp_lock_acquire>
 800fe5c:	4b1e      	ldr	r3, [pc, #120]	; (800fed8 <__sfp+0x84>)
 800fe5e:	681e      	ldr	r6, [r3, #0]
 800fe60:	69b3      	ldr	r3, [r6, #24]
 800fe62:	b913      	cbnz	r3, 800fe6a <__sfp+0x16>
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7ff ffbd 	bl	800fde4 <__sinit>
 800fe6a:	3648      	adds	r6, #72	; 0x48
 800fe6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe70:	3b01      	subs	r3, #1
 800fe72:	d503      	bpl.n	800fe7c <__sfp+0x28>
 800fe74:	6833      	ldr	r3, [r6, #0]
 800fe76:	b30b      	cbz	r3, 800febc <__sfp+0x68>
 800fe78:	6836      	ldr	r6, [r6, #0]
 800fe7a:	e7f7      	b.n	800fe6c <__sfp+0x18>
 800fe7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe80:	b9d5      	cbnz	r5, 800feb8 <__sfp+0x64>
 800fe82:	4b16      	ldr	r3, [pc, #88]	; (800fedc <__sfp+0x88>)
 800fe84:	60e3      	str	r3, [r4, #12]
 800fe86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe8a:	6665      	str	r5, [r4, #100]	; 0x64
 800fe8c:	f000 f84c 	bl	800ff28 <__retarget_lock_init_recursive>
 800fe90:	f7ff ff96 	bl	800fdc0 <__sfp_lock_release>
 800fe94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe9c:	6025      	str	r5, [r4, #0]
 800fe9e:	61a5      	str	r5, [r4, #24]
 800fea0:	2208      	movs	r2, #8
 800fea2:	4629      	mov	r1, r5
 800fea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fea8:	f7fe fa2a 	bl	800e300 <memset>
 800feac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800feb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800feb4:	4620      	mov	r0, r4
 800feb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feb8:	3468      	adds	r4, #104	; 0x68
 800feba:	e7d9      	b.n	800fe70 <__sfp+0x1c>
 800febc:	2104      	movs	r1, #4
 800febe:	4638      	mov	r0, r7
 800fec0:	f7ff ff62 	bl	800fd88 <__sfmoreglue>
 800fec4:	4604      	mov	r4, r0
 800fec6:	6030      	str	r0, [r6, #0]
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1d5      	bne.n	800fe78 <__sfp+0x24>
 800fecc:	f7ff ff78 	bl	800fdc0 <__sfp_lock_release>
 800fed0:	230c      	movs	r3, #12
 800fed2:	603b      	str	r3, [r7, #0]
 800fed4:	e7ee      	b.n	800feb4 <__sfp+0x60>
 800fed6:	bf00      	nop
 800fed8:	08014f94 	.word	0x08014f94
 800fedc:	ffff0001 	.word	0xffff0001

0800fee0 <_fwalk_reent>:
 800fee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee4:	4606      	mov	r6, r0
 800fee6:	4688      	mov	r8, r1
 800fee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800feec:	2700      	movs	r7, #0
 800feee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fef2:	f1b9 0901 	subs.w	r9, r9, #1
 800fef6:	d505      	bpl.n	800ff04 <_fwalk_reent+0x24>
 800fef8:	6824      	ldr	r4, [r4, #0]
 800fefa:	2c00      	cmp	r4, #0
 800fefc:	d1f7      	bne.n	800feee <_fwalk_reent+0xe>
 800fefe:	4638      	mov	r0, r7
 800ff00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff04:	89ab      	ldrh	r3, [r5, #12]
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d907      	bls.n	800ff1a <_fwalk_reent+0x3a>
 800ff0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	d003      	beq.n	800ff1a <_fwalk_reent+0x3a>
 800ff12:	4629      	mov	r1, r5
 800ff14:	4630      	mov	r0, r6
 800ff16:	47c0      	blx	r8
 800ff18:	4307      	orrs	r7, r0
 800ff1a:	3568      	adds	r5, #104	; 0x68
 800ff1c:	e7e9      	b.n	800fef2 <_fwalk_reent+0x12>
	...

0800ff20 <_localeconv_r>:
 800ff20:	4800      	ldr	r0, [pc, #0]	; (800ff24 <_localeconv_r+0x4>)
 800ff22:	4770      	bx	lr
 800ff24:	200001bc 	.word	0x200001bc

0800ff28 <__retarget_lock_init_recursive>:
 800ff28:	4770      	bx	lr

0800ff2a <__retarget_lock_acquire_recursive>:
 800ff2a:	4770      	bx	lr

0800ff2c <__retarget_lock_release_recursive>:
 800ff2c:	4770      	bx	lr

0800ff2e <__swhatbuf_r>:
 800ff2e:	b570      	push	{r4, r5, r6, lr}
 800ff30:	460e      	mov	r6, r1
 800ff32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff36:	2900      	cmp	r1, #0
 800ff38:	b096      	sub	sp, #88	; 0x58
 800ff3a:	4614      	mov	r4, r2
 800ff3c:	461d      	mov	r5, r3
 800ff3e:	da07      	bge.n	800ff50 <__swhatbuf_r+0x22>
 800ff40:	2300      	movs	r3, #0
 800ff42:	602b      	str	r3, [r5, #0]
 800ff44:	89b3      	ldrh	r3, [r6, #12]
 800ff46:	061a      	lsls	r2, r3, #24
 800ff48:	d410      	bmi.n	800ff6c <__swhatbuf_r+0x3e>
 800ff4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff4e:	e00e      	b.n	800ff6e <__swhatbuf_r+0x40>
 800ff50:	466a      	mov	r2, sp
 800ff52:	f000 ffed 	bl	8010f30 <_fstat_r>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	dbf2      	blt.n	800ff40 <__swhatbuf_r+0x12>
 800ff5a:	9a01      	ldr	r2, [sp, #4]
 800ff5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff64:	425a      	negs	r2, r3
 800ff66:	415a      	adcs	r2, r3
 800ff68:	602a      	str	r2, [r5, #0]
 800ff6a:	e7ee      	b.n	800ff4a <__swhatbuf_r+0x1c>
 800ff6c:	2340      	movs	r3, #64	; 0x40
 800ff6e:	2000      	movs	r0, #0
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	b016      	add	sp, #88	; 0x58
 800ff74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff78 <__smakebuf_r>:
 800ff78:	898b      	ldrh	r3, [r1, #12]
 800ff7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff7c:	079d      	lsls	r5, r3, #30
 800ff7e:	4606      	mov	r6, r0
 800ff80:	460c      	mov	r4, r1
 800ff82:	d507      	bpl.n	800ff94 <__smakebuf_r+0x1c>
 800ff84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	6123      	str	r3, [r4, #16]
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	6163      	str	r3, [r4, #20]
 800ff90:	b002      	add	sp, #8
 800ff92:	bd70      	pop	{r4, r5, r6, pc}
 800ff94:	ab01      	add	r3, sp, #4
 800ff96:	466a      	mov	r2, sp
 800ff98:	f7ff ffc9 	bl	800ff2e <__swhatbuf_r>
 800ff9c:	9900      	ldr	r1, [sp, #0]
 800ff9e:	4605      	mov	r5, r0
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f000 fc0f 	bl	80107c4 <_malloc_r>
 800ffa6:	b948      	cbnz	r0, 800ffbc <__smakebuf_r+0x44>
 800ffa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffac:	059a      	lsls	r2, r3, #22
 800ffae:	d4ef      	bmi.n	800ff90 <__smakebuf_r+0x18>
 800ffb0:	f023 0303 	bic.w	r3, r3, #3
 800ffb4:	f043 0302 	orr.w	r3, r3, #2
 800ffb8:	81a3      	strh	r3, [r4, #12]
 800ffba:	e7e3      	b.n	800ff84 <__smakebuf_r+0xc>
 800ffbc:	4b0d      	ldr	r3, [pc, #52]	; (800fff4 <__smakebuf_r+0x7c>)
 800ffbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ffc0:	89a3      	ldrh	r3, [r4, #12]
 800ffc2:	6020      	str	r0, [r4, #0]
 800ffc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc8:	81a3      	strh	r3, [r4, #12]
 800ffca:	9b00      	ldr	r3, [sp, #0]
 800ffcc:	6163      	str	r3, [r4, #20]
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	6120      	str	r0, [r4, #16]
 800ffd2:	b15b      	cbz	r3, 800ffec <__smakebuf_r+0x74>
 800ffd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f000 ffbb 	bl	8010f54 <_isatty_r>
 800ffde:	b128      	cbz	r0, 800ffec <__smakebuf_r+0x74>
 800ffe0:	89a3      	ldrh	r3, [r4, #12]
 800ffe2:	f023 0303 	bic.w	r3, r3, #3
 800ffe6:	f043 0301 	orr.w	r3, r3, #1
 800ffea:	81a3      	strh	r3, [r4, #12]
 800ffec:	89a0      	ldrh	r0, [r4, #12]
 800ffee:	4305      	orrs	r5, r0
 800fff0:	81a5      	strh	r5, [r4, #12]
 800fff2:	e7cd      	b.n	800ff90 <__smakebuf_r+0x18>
 800fff4:	0800fd7d 	.word	0x0800fd7d

0800fff8 <malloc>:
 800fff8:	4b02      	ldr	r3, [pc, #8]	; (8010004 <malloc+0xc>)
 800fffa:	4601      	mov	r1, r0
 800fffc:	6818      	ldr	r0, [r3, #0]
 800fffe:	f000 bbe1 	b.w	80107c4 <_malloc_r>
 8010002:	bf00      	nop
 8010004:	20000068 	.word	0x20000068

08010008 <_Balloc>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801000c:	4604      	mov	r4, r0
 801000e:	460d      	mov	r5, r1
 8010010:	b976      	cbnz	r6, 8010030 <_Balloc+0x28>
 8010012:	2010      	movs	r0, #16
 8010014:	f7ff fff0 	bl	800fff8 <malloc>
 8010018:	4602      	mov	r2, r0
 801001a:	6260      	str	r0, [r4, #36]	; 0x24
 801001c:	b920      	cbnz	r0, 8010028 <_Balloc+0x20>
 801001e:	4b18      	ldr	r3, [pc, #96]	; (8010080 <_Balloc+0x78>)
 8010020:	4818      	ldr	r0, [pc, #96]	; (8010084 <_Balloc+0x7c>)
 8010022:	2166      	movs	r1, #102	; 0x66
 8010024:	f000 ff44 	bl	8010eb0 <__assert_func>
 8010028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801002c:	6006      	str	r6, [r0, #0]
 801002e:	60c6      	str	r6, [r0, #12]
 8010030:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010032:	68f3      	ldr	r3, [r6, #12]
 8010034:	b183      	cbz	r3, 8010058 <_Balloc+0x50>
 8010036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801003e:	b9b8      	cbnz	r0, 8010070 <_Balloc+0x68>
 8010040:	2101      	movs	r1, #1
 8010042:	fa01 f605 	lsl.w	r6, r1, r5
 8010046:	1d72      	adds	r2, r6, #5
 8010048:	0092      	lsls	r2, r2, #2
 801004a:	4620      	mov	r0, r4
 801004c:	f000 fb5a 	bl	8010704 <_calloc_r>
 8010050:	b160      	cbz	r0, 801006c <_Balloc+0x64>
 8010052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010056:	e00e      	b.n	8010076 <_Balloc+0x6e>
 8010058:	2221      	movs	r2, #33	; 0x21
 801005a:	2104      	movs	r1, #4
 801005c:	4620      	mov	r0, r4
 801005e:	f000 fb51 	bl	8010704 <_calloc_r>
 8010062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010064:	60f0      	str	r0, [r6, #12]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1e4      	bne.n	8010036 <_Balloc+0x2e>
 801006c:	2000      	movs	r0, #0
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	6802      	ldr	r2, [r0, #0]
 8010072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010076:	2300      	movs	r3, #0
 8010078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801007c:	e7f7      	b.n	801006e <_Balloc+0x66>
 801007e:	bf00      	nop
 8010080:	08014fd9 	.word	0x08014fd9
 8010084:	080150c0 	.word	0x080150c0

08010088 <_Bfree>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801008c:	4605      	mov	r5, r0
 801008e:	460c      	mov	r4, r1
 8010090:	b976      	cbnz	r6, 80100b0 <_Bfree+0x28>
 8010092:	2010      	movs	r0, #16
 8010094:	f7ff ffb0 	bl	800fff8 <malloc>
 8010098:	4602      	mov	r2, r0
 801009a:	6268      	str	r0, [r5, #36]	; 0x24
 801009c:	b920      	cbnz	r0, 80100a8 <_Bfree+0x20>
 801009e:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <_Bfree+0x3c>)
 80100a0:	4809      	ldr	r0, [pc, #36]	; (80100c8 <_Bfree+0x40>)
 80100a2:	218a      	movs	r1, #138	; 0x8a
 80100a4:	f000 ff04 	bl	8010eb0 <__assert_func>
 80100a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100ac:	6006      	str	r6, [r0, #0]
 80100ae:	60c6      	str	r6, [r0, #12]
 80100b0:	b13c      	cbz	r4, 80100c2 <_Bfree+0x3a>
 80100b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100b4:	6862      	ldr	r2, [r4, #4]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100bc:	6021      	str	r1, [r4, #0]
 80100be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100c2:	bd70      	pop	{r4, r5, r6, pc}
 80100c4:	08014fd9 	.word	0x08014fd9
 80100c8:	080150c0 	.word	0x080150c0

080100cc <__multadd>:
 80100cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d0:	690e      	ldr	r6, [r1, #16]
 80100d2:	4607      	mov	r7, r0
 80100d4:	4698      	mov	r8, r3
 80100d6:	460c      	mov	r4, r1
 80100d8:	f101 0014 	add.w	r0, r1, #20
 80100dc:	2300      	movs	r3, #0
 80100de:	6805      	ldr	r5, [r0, #0]
 80100e0:	b2a9      	uxth	r1, r5
 80100e2:	fb02 8101 	mla	r1, r2, r1, r8
 80100e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80100ea:	0c2d      	lsrs	r5, r5, #16
 80100ec:	fb02 c505 	mla	r5, r2, r5, ip
 80100f0:	b289      	uxth	r1, r1
 80100f2:	3301      	adds	r3, #1
 80100f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80100f8:	429e      	cmp	r6, r3
 80100fa:	f840 1b04 	str.w	r1, [r0], #4
 80100fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010102:	dcec      	bgt.n	80100de <__multadd+0x12>
 8010104:	f1b8 0f00 	cmp.w	r8, #0
 8010108:	d022      	beq.n	8010150 <__multadd+0x84>
 801010a:	68a3      	ldr	r3, [r4, #8]
 801010c:	42b3      	cmp	r3, r6
 801010e:	dc19      	bgt.n	8010144 <__multadd+0x78>
 8010110:	6861      	ldr	r1, [r4, #4]
 8010112:	4638      	mov	r0, r7
 8010114:	3101      	adds	r1, #1
 8010116:	f7ff ff77 	bl	8010008 <_Balloc>
 801011a:	4605      	mov	r5, r0
 801011c:	b928      	cbnz	r0, 801012a <__multadd+0x5e>
 801011e:	4602      	mov	r2, r0
 8010120:	4b0d      	ldr	r3, [pc, #52]	; (8010158 <__multadd+0x8c>)
 8010122:	480e      	ldr	r0, [pc, #56]	; (801015c <__multadd+0x90>)
 8010124:	21b5      	movs	r1, #181	; 0xb5
 8010126:	f000 fec3 	bl	8010eb0 <__assert_func>
 801012a:	6922      	ldr	r2, [r4, #16]
 801012c:	3202      	adds	r2, #2
 801012e:	f104 010c 	add.w	r1, r4, #12
 8010132:	0092      	lsls	r2, r2, #2
 8010134:	300c      	adds	r0, #12
 8010136:	f7fe f8d5 	bl	800e2e4 <memcpy>
 801013a:	4621      	mov	r1, r4
 801013c:	4638      	mov	r0, r7
 801013e:	f7ff ffa3 	bl	8010088 <_Bfree>
 8010142:	462c      	mov	r4, r5
 8010144:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010148:	3601      	adds	r6, #1
 801014a:	f8c3 8014 	str.w	r8, [r3, #20]
 801014e:	6126      	str	r6, [r4, #16]
 8010150:	4620      	mov	r0, r4
 8010152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010156:	bf00      	nop
 8010158:	0801504f 	.word	0x0801504f
 801015c:	080150c0 	.word	0x080150c0

08010160 <__hi0bits>:
 8010160:	0c03      	lsrs	r3, r0, #16
 8010162:	041b      	lsls	r3, r3, #16
 8010164:	b9d3      	cbnz	r3, 801019c <__hi0bits+0x3c>
 8010166:	0400      	lsls	r0, r0, #16
 8010168:	2310      	movs	r3, #16
 801016a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801016e:	bf04      	itt	eq
 8010170:	0200      	lsleq	r0, r0, #8
 8010172:	3308      	addeq	r3, #8
 8010174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010178:	bf04      	itt	eq
 801017a:	0100      	lsleq	r0, r0, #4
 801017c:	3304      	addeq	r3, #4
 801017e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010182:	bf04      	itt	eq
 8010184:	0080      	lsleq	r0, r0, #2
 8010186:	3302      	addeq	r3, #2
 8010188:	2800      	cmp	r0, #0
 801018a:	db05      	blt.n	8010198 <__hi0bits+0x38>
 801018c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010190:	f103 0301 	add.w	r3, r3, #1
 8010194:	bf08      	it	eq
 8010196:	2320      	moveq	r3, #32
 8010198:	4618      	mov	r0, r3
 801019a:	4770      	bx	lr
 801019c:	2300      	movs	r3, #0
 801019e:	e7e4      	b.n	801016a <__hi0bits+0xa>

080101a0 <__lo0bits>:
 80101a0:	6803      	ldr	r3, [r0, #0]
 80101a2:	f013 0207 	ands.w	r2, r3, #7
 80101a6:	4601      	mov	r1, r0
 80101a8:	d00b      	beq.n	80101c2 <__lo0bits+0x22>
 80101aa:	07da      	lsls	r2, r3, #31
 80101ac:	d424      	bmi.n	80101f8 <__lo0bits+0x58>
 80101ae:	0798      	lsls	r0, r3, #30
 80101b0:	bf49      	itett	mi
 80101b2:	085b      	lsrmi	r3, r3, #1
 80101b4:	089b      	lsrpl	r3, r3, #2
 80101b6:	2001      	movmi	r0, #1
 80101b8:	600b      	strmi	r3, [r1, #0]
 80101ba:	bf5c      	itt	pl
 80101bc:	600b      	strpl	r3, [r1, #0]
 80101be:	2002      	movpl	r0, #2
 80101c0:	4770      	bx	lr
 80101c2:	b298      	uxth	r0, r3
 80101c4:	b9b0      	cbnz	r0, 80101f4 <__lo0bits+0x54>
 80101c6:	0c1b      	lsrs	r3, r3, #16
 80101c8:	2010      	movs	r0, #16
 80101ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80101ce:	bf04      	itt	eq
 80101d0:	0a1b      	lsreq	r3, r3, #8
 80101d2:	3008      	addeq	r0, #8
 80101d4:	071a      	lsls	r2, r3, #28
 80101d6:	bf04      	itt	eq
 80101d8:	091b      	lsreq	r3, r3, #4
 80101da:	3004      	addeq	r0, #4
 80101dc:	079a      	lsls	r2, r3, #30
 80101de:	bf04      	itt	eq
 80101e0:	089b      	lsreq	r3, r3, #2
 80101e2:	3002      	addeq	r0, #2
 80101e4:	07da      	lsls	r2, r3, #31
 80101e6:	d403      	bmi.n	80101f0 <__lo0bits+0x50>
 80101e8:	085b      	lsrs	r3, r3, #1
 80101ea:	f100 0001 	add.w	r0, r0, #1
 80101ee:	d005      	beq.n	80101fc <__lo0bits+0x5c>
 80101f0:	600b      	str	r3, [r1, #0]
 80101f2:	4770      	bx	lr
 80101f4:	4610      	mov	r0, r2
 80101f6:	e7e8      	b.n	80101ca <__lo0bits+0x2a>
 80101f8:	2000      	movs	r0, #0
 80101fa:	4770      	bx	lr
 80101fc:	2020      	movs	r0, #32
 80101fe:	4770      	bx	lr

08010200 <__i2b>:
 8010200:	b510      	push	{r4, lr}
 8010202:	460c      	mov	r4, r1
 8010204:	2101      	movs	r1, #1
 8010206:	f7ff feff 	bl	8010008 <_Balloc>
 801020a:	4602      	mov	r2, r0
 801020c:	b928      	cbnz	r0, 801021a <__i2b+0x1a>
 801020e:	4b05      	ldr	r3, [pc, #20]	; (8010224 <__i2b+0x24>)
 8010210:	4805      	ldr	r0, [pc, #20]	; (8010228 <__i2b+0x28>)
 8010212:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010216:	f000 fe4b 	bl	8010eb0 <__assert_func>
 801021a:	2301      	movs	r3, #1
 801021c:	6144      	str	r4, [r0, #20]
 801021e:	6103      	str	r3, [r0, #16]
 8010220:	bd10      	pop	{r4, pc}
 8010222:	bf00      	nop
 8010224:	0801504f 	.word	0x0801504f
 8010228:	080150c0 	.word	0x080150c0

0801022c <__multiply>:
 801022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	4614      	mov	r4, r2
 8010232:	690a      	ldr	r2, [r1, #16]
 8010234:	6923      	ldr	r3, [r4, #16]
 8010236:	429a      	cmp	r2, r3
 8010238:	bfb8      	it	lt
 801023a:	460b      	movlt	r3, r1
 801023c:	460d      	mov	r5, r1
 801023e:	bfbc      	itt	lt
 8010240:	4625      	movlt	r5, r4
 8010242:	461c      	movlt	r4, r3
 8010244:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010248:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801024c:	68ab      	ldr	r3, [r5, #8]
 801024e:	6869      	ldr	r1, [r5, #4]
 8010250:	eb0a 0709 	add.w	r7, sl, r9
 8010254:	42bb      	cmp	r3, r7
 8010256:	b085      	sub	sp, #20
 8010258:	bfb8      	it	lt
 801025a:	3101      	addlt	r1, #1
 801025c:	f7ff fed4 	bl	8010008 <_Balloc>
 8010260:	b930      	cbnz	r0, 8010270 <__multiply+0x44>
 8010262:	4602      	mov	r2, r0
 8010264:	4b42      	ldr	r3, [pc, #264]	; (8010370 <__multiply+0x144>)
 8010266:	4843      	ldr	r0, [pc, #268]	; (8010374 <__multiply+0x148>)
 8010268:	f240 115d 	movw	r1, #349	; 0x15d
 801026c:	f000 fe20 	bl	8010eb0 <__assert_func>
 8010270:	f100 0614 	add.w	r6, r0, #20
 8010274:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010278:	4633      	mov	r3, r6
 801027a:	2200      	movs	r2, #0
 801027c:	4543      	cmp	r3, r8
 801027e:	d31e      	bcc.n	80102be <__multiply+0x92>
 8010280:	f105 0c14 	add.w	ip, r5, #20
 8010284:	f104 0314 	add.w	r3, r4, #20
 8010288:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801028c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010290:	9202      	str	r2, [sp, #8]
 8010292:	ebac 0205 	sub.w	r2, ip, r5
 8010296:	3a15      	subs	r2, #21
 8010298:	f022 0203 	bic.w	r2, r2, #3
 801029c:	3204      	adds	r2, #4
 801029e:	f105 0115 	add.w	r1, r5, #21
 80102a2:	458c      	cmp	ip, r1
 80102a4:	bf38      	it	cc
 80102a6:	2204      	movcc	r2, #4
 80102a8:	9201      	str	r2, [sp, #4]
 80102aa:	9a02      	ldr	r2, [sp, #8]
 80102ac:	9303      	str	r3, [sp, #12]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d808      	bhi.n	80102c4 <__multiply+0x98>
 80102b2:	2f00      	cmp	r7, #0
 80102b4:	dc55      	bgt.n	8010362 <__multiply+0x136>
 80102b6:	6107      	str	r7, [r0, #16]
 80102b8:	b005      	add	sp, #20
 80102ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102be:	f843 2b04 	str.w	r2, [r3], #4
 80102c2:	e7db      	b.n	801027c <__multiply+0x50>
 80102c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80102c8:	f1ba 0f00 	cmp.w	sl, #0
 80102cc:	d020      	beq.n	8010310 <__multiply+0xe4>
 80102ce:	f105 0e14 	add.w	lr, r5, #20
 80102d2:	46b1      	mov	r9, r6
 80102d4:	2200      	movs	r2, #0
 80102d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80102da:	f8d9 b000 	ldr.w	fp, [r9]
 80102de:	b2a1      	uxth	r1, r4
 80102e0:	fa1f fb8b 	uxth.w	fp, fp
 80102e4:	fb0a b101 	mla	r1, sl, r1, fp
 80102e8:	4411      	add	r1, r2
 80102ea:	f8d9 2000 	ldr.w	r2, [r9]
 80102ee:	0c24      	lsrs	r4, r4, #16
 80102f0:	0c12      	lsrs	r2, r2, #16
 80102f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80102f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80102fa:	b289      	uxth	r1, r1
 80102fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010300:	45f4      	cmp	ip, lr
 8010302:	f849 1b04 	str.w	r1, [r9], #4
 8010306:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801030a:	d8e4      	bhi.n	80102d6 <__multiply+0xaa>
 801030c:	9901      	ldr	r1, [sp, #4]
 801030e:	5072      	str	r2, [r6, r1]
 8010310:	9a03      	ldr	r2, [sp, #12]
 8010312:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010316:	3304      	adds	r3, #4
 8010318:	f1b9 0f00 	cmp.w	r9, #0
 801031c:	d01f      	beq.n	801035e <__multiply+0x132>
 801031e:	6834      	ldr	r4, [r6, #0]
 8010320:	f105 0114 	add.w	r1, r5, #20
 8010324:	46b6      	mov	lr, r6
 8010326:	f04f 0a00 	mov.w	sl, #0
 801032a:	880a      	ldrh	r2, [r1, #0]
 801032c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010330:	fb09 b202 	mla	r2, r9, r2, fp
 8010334:	4492      	add	sl, r2
 8010336:	b2a4      	uxth	r4, r4
 8010338:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801033c:	f84e 4b04 	str.w	r4, [lr], #4
 8010340:	f851 4b04 	ldr.w	r4, [r1], #4
 8010344:	f8be 2000 	ldrh.w	r2, [lr]
 8010348:	0c24      	lsrs	r4, r4, #16
 801034a:	fb09 2404 	mla	r4, r9, r4, r2
 801034e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010352:	458c      	cmp	ip, r1
 8010354:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010358:	d8e7      	bhi.n	801032a <__multiply+0xfe>
 801035a:	9a01      	ldr	r2, [sp, #4]
 801035c:	50b4      	str	r4, [r6, r2]
 801035e:	3604      	adds	r6, #4
 8010360:	e7a3      	b.n	80102aa <__multiply+0x7e>
 8010362:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1a5      	bne.n	80102b6 <__multiply+0x8a>
 801036a:	3f01      	subs	r7, #1
 801036c:	e7a1      	b.n	80102b2 <__multiply+0x86>
 801036e:	bf00      	nop
 8010370:	0801504f 	.word	0x0801504f
 8010374:	080150c0 	.word	0x080150c0

08010378 <__pow5mult>:
 8010378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801037c:	4615      	mov	r5, r2
 801037e:	f012 0203 	ands.w	r2, r2, #3
 8010382:	4606      	mov	r6, r0
 8010384:	460f      	mov	r7, r1
 8010386:	d007      	beq.n	8010398 <__pow5mult+0x20>
 8010388:	4c25      	ldr	r4, [pc, #148]	; (8010420 <__pow5mult+0xa8>)
 801038a:	3a01      	subs	r2, #1
 801038c:	2300      	movs	r3, #0
 801038e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010392:	f7ff fe9b 	bl	80100cc <__multadd>
 8010396:	4607      	mov	r7, r0
 8010398:	10ad      	asrs	r5, r5, #2
 801039a:	d03d      	beq.n	8010418 <__pow5mult+0xa0>
 801039c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801039e:	b97c      	cbnz	r4, 80103c0 <__pow5mult+0x48>
 80103a0:	2010      	movs	r0, #16
 80103a2:	f7ff fe29 	bl	800fff8 <malloc>
 80103a6:	4602      	mov	r2, r0
 80103a8:	6270      	str	r0, [r6, #36]	; 0x24
 80103aa:	b928      	cbnz	r0, 80103b8 <__pow5mult+0x40>
 80103ac:	4b1d      	ldr	r3, [pc, #116]	; (8010424 <__pow5mult+0xac>)
 80103ae:	481e      	ldr	r0, [pc, #120]	; (8010428 <__pow5mult+0xb0>)
 80103b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80103b4:	f000 fd7c 	bl	8010eb0 <__assert_func>
 80103b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103bc:	6004      	str	r4, [r0, #0]
 80103be:	60c4      	str	r4, [r0, #12]
 80103c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80103c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103c8:	b94c      	cbnz	r4, 80103de <__pow5mult+0x66>
 80103ca:	f240 2171 	movw	r1, #625	; 0x271
 80103ce:	4630      	mov	r0, r6
 80103d0:	f7ff ff16 	bl	8010200 <__i2b>
 80103d4:	2300      	movs	r3, #0
 80103d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80103da:	4604      	mov	r4, r0
 80103dc:	6003      	str	r3, [r0, #0]
 80103de:	f04f 0900 	mov.w	r9, #0
 80103e2:	07eb      	lsls	r3, r5, #31
 80103e4:	d50a      	bpl.n	80103fc <__pow5mult+0x84>
 80103e6:	4639      	mov	r1, r7
 80103e8:	4622      	mov	r2, r4
 80103ea:	4630      	mov	r0, r6
 80103ec:	f7ff ff1e 	bl	801022c <__multiply>
 80103f0:	4639      	mov	r1, r7
 80103f2:	4680      	mov	r8, r0
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff fe47 	bl	8010088 <_Bfree>
 80103fa:	4647      	mov	r7, r8
 80103fc:	106d      	asrs	r5, r5, #1
 80103fe:	d00b      	beq.n	8010418 <__pow5mult+0xa0>
 8010400:	6820      	ldr	r0, [r4, #0]
 8010402:	b938      	cbnz	r0, 8010414 <__pow5mult+0x9c>
 8010404:	4622      	mov	r2, r4
 8010406:	4621      	mov	r1, r4
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff ff0f 	bl	801022c <__multiply>
 801040e:	6020      	str	r0, [r4, #0]
 8010410:	f8c0 9000 	str.w	r9, [r0]
 8010414:	4604      	mov	r4, r0
 8010416:	e7e4      	b.n	80103e2 <__pow5mult+0x6a>
 8010418:	4638      	mov	r0, r7
 801041a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801041e:	bf00      	nop
 8010420:	08015210 	.word	0x08015210
 8010424:	08014fd9 	.word	0x08014fd9
 8010428:	080150c0 	.word	0x080150c0

0801042c <__lshift>:
 801042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010430:	460c      	mov	r4, r1
 8010432:	6849      	ldr	r1, [r1, #4]
 8010434:	6923      	ldr	r3, [r4, #16]
 8010436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801043a:	68a3      	ldr	r3, [r4, #8]
 801043c:	4607      	mov	r7, r0
 801043e:	4691      	mov	r9, r2
 8010440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010444:	f108 0601 	add.w	r6, r8, #1
 8010448:	42b3      	cmp	r3, r6
 801044a:	db0b      	blt.n	8010464 <__lshift+0x38>
 801044c:	4638      	mov	r0, r7
 801044e:	f7ff fddb 	bl	8010008 <_Balloc>
 8010452:	4605      	mov	r5, r0
 8010454:	b948      	cbnz	r0, 801046a <__lshift+0x3e>
 8010456:	4602      	mov	r2, r0
 8010458:	4b28      	ldr	r3, [pc, #160]	; (80104fc <__lshift+0xd0>)
 801045a:	4829      	ldr	r0, [pc, #164]	; (8010500 <__lshift+0xd4>)
 801045c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010460:	f000 fd26 	bl	8010eb0 <__assert_func>
 8010464:	3101      	adds	r1, #1
 8010466:	005b      	lsls	r3, r3, #1
 8010468:	e7ee      	b.n	8010448 <__lshift+0x1c>
 801046a:	2300      	movs	r3, #0
 801046c:	f100 0114 	add.w	r1, r0, #20
 8010470:	f100 0210 	add.w	r2, r0, #16
 8010474:	4618      	mov	r0, r3
 8010476:	4553      	cmp	r3, sl
 8010478:	db33      	blt.n	80104e2 <__lshift+0xb6>
 801047a:	6920      	ldr	r0, [r4, #16]
 801047c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010480:	f104 0314 	add.w	r3, r4, #20
 8010484:	f019 091f 	ands.w	r9, r9, #31
 8010488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801048c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010490:	d02b      	beq.n	80104ea <__lshift+0xbe>
 8010492:	f1c9 0e20 	rsb	lr, r9, #32
 8010496:	468a      	mov	sl, r1
 8010498:	2200      	movs	r2, #0
 801049a:	6818      	ldr	r0, [r3, #0]
 801049c:	fa00 f009 	lsl.w	r0, r0, r9
 80104a0:	4302      	orrs	r2, r0
 80104a2:	f84a 2b04 	str.w	r2, [sl], #4
 80104a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80104aa:	459c      	cmp	ip, r3
 80104ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80104b0:	d8f3      	bhi.n	801049a <__lshift+0x6e>
 80104b2:	ebac 0304 	sub.w	r3, ip, r4
 80104b6:	3b15      	subs	r3, #21
 80104b8:	f023 0303 	bic.w	r3, r3, #3
 80104bc:	3304      	adds	r3, #4
 80104be:	f104 0015 	add.w	r0, r4, #21
 80104c2:	4584      	cmp	ip, r0
 80104c4:	bf38      	it	cc
 80104c6:	2304      	movcc	r3, #4
 80104c8:	50ca      	str	r2, [r1, r3]
 80104ca:	b10a      	cbz	r2, 80104d0 <__lshift+0xa4>
 80104cc:	f108 0602 	add.w	r6, r8, #2
 80104d0:	3e01      	subs	r6, #1
 80104d2:	4638      	mov	r0, r7
 80104d4:	612e      	str	r6, [r5, #16]
 80104d6:	4621      	mov	r1, r4
 80104d8:	f7ff fdd6 	bl	8010088 <_Bfree>
 80104dc:	4628      	mov	r0, r5
 80104de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80104e6:	3301      	adds	r3, #1
 80104e8:	e7c5      	b.n	8010476 <__lshift+0x4a>
 80104ea:	3904      	subs	r1, #4
 80104ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80104f4:	459c      	cmp	ip, r3
 80104f6:	d8f9      	bhi.n	80104ec <__lshift+0xc0>
 80104f8:	e7ea      	b.n	80104d0 <__lshift+0xa4>
 80104fa:	bf00      	nop
 80104fc:	0801504f 	.word	0x0801504f
 8010500:	080150c0 	.word	0x080150c0

08010504 <__mcmp>:
 8010504:	b530      	push	{r4, r5, lr}
 8010506:	6902      	ldr	r2, [r0, #16]
 8010508:	690c      	ldr	r4, [r1, #16]
 801050a:	1b12      	subs	r2, r2, r4
 801050c:	d10e      	bne.n	801052c <__mcmp+0x28>
 801050e:	f100 0314 	add.w	r3, r0, #20
 8010512:	3114      	adds	r1, #20
 8010514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801051c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010524:	42a5      	cmp	r5, r4
 8010526:	d003      	beq.n	8010530 <__mcmp+0x2c>
 8010528:	d305      	bcc.n	8010536 <__mcmp+0x32>
 801052a:	2201      	movs	r2, #1
 801052c:	4610      	mov	r0, r2
 801052e:	bd30      	pop	{r4, r5, pc}
 8010530:	4283      	cmp	r3, r0
 8010532:	d3f3      	bcc.n	801051c <__mcmp+0x18>
 8010534:	e7fa      	b.n	801052c <__mcmp+0x28>
 8010536:	f04f 32ff 	mov.w	r2, #4294967295
 801053a:	e7f7      	b.n	801052c <__mcmp+0x28>

0801053c <__mdiff>:
 801053c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	460c      	mov	r4, r1
 8010542:	4606      	mov	r6, r0
 8010544:	4611      	mov	r1, r2
 8010546:	4620      	mov	r0, r4
 8010548:	4617      	mov	r7, r2
 801054a:	f7ff ffdb 	bl	8010504 <__mcmp>
 801054e:	1e05      	subs	r5, r0, #0
 8010550:	d110      	bne.n	8010574 <__mdiff+0x38>
 8010552:	4629      	mov	r1, r5
 8010554:	4630      	mov	r0, r6
 8010556:	f7ff fd57 	bl	8010008 <_Balloc>
 801055a:	b930      	cbnz	r0, 801056a <__mdiff+0x2e>
 801055c:	4b39      	ldr	r3, [pc, #228]	; (8010644 <__mdiff+0x108>)
 801055e:	4602      	mov	r2, r0
 8010560:	f240 2132 	movw	r1, #562	; 0x232
 8010564:	4838      	ldr	r0, [pc, #224]	; (8010648 <__mdiff+0x10c>)
 8010566:	f000 fca3 	bl	8010eb0 <__assert_func>
 801056a:	2301      	movs	r3, #1
 801056c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010574:	bfa4      	itt	ge
 8010576:	463b      	movge	r3, r7
 8010578:	4627      	movge	r7, r4
 801057a:	4630      	mov	r0, r6
 801057c:	6879      	ldr	r1, [r7, #4]
 801057e:	bfa6      	itte	ge
 8010580:	461c      	movge	r4, r3
 8010582:	2500      	movge	r5, #0
 8010584:	2501      	movlt	r5, #1
 8010586:	f7ff fd3f 	bl	8010008 <_Balloc>
 801058a:	b920      	cbnz	r0, 8010596 <__mdiff+0x5a>
 801058c:	4b2d      	ldr	r3, [pc, #180]	; (8010644 <__mdiff+0x108>)
 801058e:	4602      	mov	r2, r0
 8010590:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010594:	e7e6      	b.n	8010564 <__mdiff+0x28>
 8010596:	693e      	ldr	r6, [r7, #16]
 8010598:	60c5      	str	r5, [r0, #12]
 801059a:	6925      	ldr	r5, [r4, #16]
 801059c:	f107 0114 	add.w	r1, r7, #20
 80105a0:	f104 0914 	add.w	r9, r4, #20
 80105a4:	f100 0e14 	add.w	lr, r0, #20
 80105a8:	f107 0210 	add.w	r2, r7, #16
 80105ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80105b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80105b4:	46f2      	mov	sl, lr
 80105b6:	2700      	movs	r7, #0
 80105b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80105bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80105c0:	fa1f f883 	uxth.w	r8, r3
 80105c4:	fa17 f78b 	uxtah	r7, r7, fp
 80105c8:	0c1b      	lsrs	r3, r3, #16
 80105ca:	eba7 0808 	sub.w	r8, r7, r8
 80105ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80105d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80105d6:	fa1f f888 	uxth.w	r8, r8
 80105da:	141f      	asrs	r7, r3, #16
 80105dc:	454d      	cmp	r5, r9
 80105de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80105e2:	f84a 3b04 	str.w	r3, [sl], #4
 80105e6:	d8e7      	bhi.n	80105b8 <__mdiff+0x7c>
 80105e8:	1b2b      	subs	r3, r5, r4
 80105ea:	3b15      	subs	r3, #21
 80105ec:	f023 0303 	bic.w	r3, r3, #3
 80105f0:	3304      	adds	r3, #4
 80105f2:	3415      	adds	r4, #21
 80105f4:	42a5      	cmp	r5, r4
 80105f6:	bf38      	it	cc
 80105f8:	2304      	movcc	r3, #4
 80105fa:	4419      	add	r1, r3
 80105fc:	4473      	add	r3, lr
 80105fe:	469e      	mov	lr, r3
 8010600:	460d      	mov	r5, r1
 8010602:	4565      	cmp	r5, ip
 8010604:	d30e      	bcc.n	8010624 <__mdiff+0xe8>
 8010606:	f10c 0203 	add.w	r2, ip, #3
 801060a:	1a52      	subs	r2, r2, r1
 801060c:	f022 0203 	bic.w	r2, r2, #3
 8010610:	3903      	subs	r1, #3
 8010612:	458c      	cmp	ip, r1
 8010614:	bf38      	it	cc
 8010616:	2200      	movcc	r2, #0
 8010618:	441a      	add	r2, r3
 801061a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801061e:	b17b      	cbz	r3, 8010640 <__mdiff+0x104>
 8010620:	6106      	str	r6, [r0, #16]
 8010622:	e7a5      	b.n	8010570 <__mdiff+0x34>
 8010624:	f855 8b04 	ldr.w	r8, [r5], #4
 8010628:	fa17 f488 	uxtah	r4, r7, r8
 801062c:	1422      	asrs	r2, r4, #16
 801062e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010632:	b2a4      	uxth	r4, r4
 8010634:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010638:	f84e 4b04 	str.w	r4, [lr], #4
 801063c:	1417      	asrs	r7, r2, #16
 801063e:	e7e0      	b.n	8010602 <__mdiff+0xc6>
 8010640:	3e01      	subs	r6, #1
 8010642:	e7ea      	b.n	801061a <__mdiff+0xde>
 8010644:	0801504f 	.word	0x0801504f
 8010648:	080150c0 	.word	0x080150c0

0801064c <__d2b>:
 801064c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010650:	4689      	mov	r9, r1
 8010652:	2101      	movs	r1, #1
 8010654:	ec57 6b10 	vmov	r6, r7, d0
 8010658:	4690      	mov	r8, r2
 801065a:	f7ff fcd5 	bl	8010008 <_Balloc>
 801065e:	4604      	mov	r4, r0
 8010660:	b930      	cbnz	r0, 8010670 <__d2b+0x24>
 8010662:	4602      	mov	r2, r0
 8010664:	4b25      	ldr	r3, [pc, #148]	; (80106fc <__d2b+0xb0>)
 8010666:	4826      	ldr	r0, [pc, #152]	; (8010700 <__d2b+0xb4>)
 8010668:	f240 310a 	movw	r1, #778	; 0x30a
 801066c:	f000 fc20 	bl	8010eb0 <__assert_func>
 8010670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010678:	bb35      	cbnz	r5, 80106c8 <__d2b+0x7c>
 801067a:	2e00      	cmp	r6, #0
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	d028      	beq.n	80106d2 <__d2b+0x86>
 8010680:	4668      	mov	r0, sp
 8010682:	9600      	str	r6, [sp, #0]
 8010684:	f7ff fd8c 	bl	80101a0 <__lo0bits>
 8010688:	9900      	ldr	r1, [sp, #0]
 801068a:	b300      	cbz	r0, 80106ce <__d2b+0x82>
 801068c:	9a01      	ldr	r2, [sp, #4]
 801068e:	f1c0 0320 	rsb	r3, r0, #32
 8010692:	fa02 f303 	lsl.w	r3, r2, r3
 8010696:	430b      	orrs	r3, r1
 8010698:	40c2      	lsrs	r2, r0
 801069a:	6163      	str	r3, [r4, #20]
 801069c:	9201      	str	r2, [sp, #4]
 801069e:	9b01      	ldr	r3, [sp, #4]
 80106a0:	61a3      	str	r3, [r4, #24]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	bf14      	ite	ne
 80106a6:	2202      	movne	r2, #2
 80106a8:	2201      	moveq	r2, #1
 80106aa:	6122      	str	r2, [r4, #16]
 80106ac:	b1d5      	cbz	r5, 80106e4 <__d2b+0x98>
 80106ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80106b2:	4405      	add	r5, r0
 80106b4:	f8c9 5000 	str.w	r5, [r9]
 80106b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80106bc:	f8c8 0000 	str.w	r0, [r8]
 80106c0:	4620      	mov	r0, r4
 80106c2:	b003      	add	sp, #12
 80106c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106cc:	e7d5      	b.n	801067a <__d2b+0x2e>
 80106ce:	6161      	str	r1, [r4, #20]
 80106d0:	e7e5      	b.n	801069e <__d2b+0x52>
 80106d2:	a801      	add	r0, sp, #4
 80106d4:	f7ff fd64 	bl	80101a0 <__lo0bits>
 80106d8:	9b01      	ldr	r3, [sp, #4]
 80106da:	6163      	str	r3, [r4, #20]
 80106dc:	2201      	movs	r2, #1
 80106de:	6122      	str	r2, [r4, #16]
 80106e0:	3020      	adds	r0, #32
 80106e2:	e7e3      	b.n	80106ac <__d2b+0x60>
 80106e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106ec:	f8c9 0000 	str.w	r0, [r9]
 80106f0:	6918      	ldr	r0, [r3, #16]
 80106f2:	f7ff fd35 	bl	8010160 <__hi0bits>
 80106f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106fa:	e7df      	b.n	80106bc <__d2b+0x70>
 80106fc:	0801504f 	.word	0x0801504f
 8010700:	080150c0 	.word	0x080150c0

08010704 <_calloc_r>:
 8010704:	b513      	push	{r0, r1, r4, lr}
 8010706:	434a      	muls	r2, r1
 8010708:	4611      	mov	r1, r2
 801070a:	9201      	str	r2, [sp, #4]
 801070c:	f000 f85a 	bl	80107c4 <_malloc_r>
 8010710:	4604      	mov	r4, r0
 8010712:	b118      	cbz	r0, 801071c <_calloc_r+0x18>
 8010714:	9a01      	ldr	r2, [sp, #4]
 8010716:	2100      	movs	r1, #0
 8010718:	f7fd fdf2 	bl	800e300 <memset>
 801071c:	4620      	mov	r0, r4
 801071e:	b002      	add	sp, #8
 8010720:	bd10      	pop	{r4, pc}
	...

08010724 <_free_r>:
 8010724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010726:	2900      	cmp	r1, #0
 8010728:	d048      	beq.n	80107bc <_free_r+0x98>
 801072a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801072e:	9001      	str	r0, [sp, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	f1a1 0404 	sub.w	r4, r1, #4
 8010736:	bfb8      	it	lt
 8010738:	18e4      	addlt	r4, r4, r3
 801073a:	f000 fc59 	bl	8010ff0 <__malloc_lock>
 801073e:	4a20      	ldr	r2, [pc, #128]	; (80107c0 <_free_r+0x9c>)
 8010740:	9801      	ldr	r0, [sp, #4]
 8010742:	6813      	ldr	r3, [r2, #0]
 8010744:	4615      	mov	r5, r2
 8010746:	b933      	cbnz	r3, 8010756 <_free_r+0x32>
 8010748:	6063      	str	r3, [r4, #4]
 801074a:	6014      	str	r4, [r2, #0]
 801074c:	b003      	add	sp, #12
 801074e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010752:	f000 bc53 	b.w	8010ffc <__malloc_unlock>
 8010756:	42a3      	cmp	r3, r4
 8010758:	d90b      	bls.n	8010772 <_free_r+0x4e>
 801075a:	6821      	ldr	r1, [r4, #0]
 801075c:	1862      	adds	r2, r4, r1
 801075e:	4293      	cmp	r3, r2
 8010760:	bf04      	itt	eq
 8010762:	681a      	ldreq	r2, [r3, #0]
 8010764:	685b      	ldreq	r3, [r3, #4]
 8010766:	6063      	str	r3, [r4, #4]
 8010768:	bf04      	itt	eq
 801076a:	1852      	addeq	r2, r2, r1
 801076c:	6022      	streq	r2, [r4, #0]
 801076e:	602c      	str	r4, [r5, #0]
 8010770:	e7ec      	b.n	801074c <_free_r+0x28>
 8010772:	461a      	mov	r2, r3
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	b10b      	cbz	r3, 801077c <_free_r+0x58>
 8010778:	42a3      	cmp	r3, r4
 801077a:	d9fa      	bls.n	8010772 <_free_r+0x4e>
 801077c:	6811      	ldr	r1, [r2, #0]
 801077e:	1855      	adds	r5, r2, r1
 8010780:	42a5      	cmp	r5, r4
 8010782:	d10b      	bne.n	801079c <_free_r+0x78>
 8010784:	6824      	ldr	r4, [r4, #0]
 8010786:	4421      	add	r1, r4
 8010788:	1854      	adds	r4, r2, r1
 801078a:	42a3      	cmp	r3, r4
 801078c:	6011      	str	r1, [r2, #0]
 801078e:	d1dd      	bne.n	801074c <_free_r+0x28>
 8010790:	681c      	ldr	r4, [r3, #0]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	6053      	str	r3, [r2, #4]
 8010796:	4421      	add	r1, r4
 8010798:	6011      	str	r1, [r2, #0]
 801079a:	e7d7      	b.n	801074c <_free_r+0x28>
 801079c:	d902      	bls.n	80107a4 <_free_r+0x80>
 801079e:	230c      	movs	r3, #12
 80107a0:	6003      	str	r3, [r0, #0]
 80107a2:	e7d3      	b.n	801074c <_free_r+0x28>
 80107a4:	6825      	ldr	r5, [r4, #0]
 80107a6:	1961      	adds	r1, r4, r5
 80107a8:	428b      	cmp	r3, r1
 80107aa:	bf04      	itt	eq
 80107ac:	6819      	ldreq	r1, [r3, #0]
 80107ae:	685b      	ldreq	r3, [r3, #4]
 80107b0:	6063      	str	r3, [r4, #4]
 80107b2:	bf04      	itt	eq
 80107b4:	1949      	addeq	r1, r1, r5
 80107b6:	6021      	streq	r1, [r4, #0]
 80107b8:	6054      	str	r4, [r2, #4]
 80107ba:	e7c7      	b.n	801074c <_free_r+0x28>
 80107bc:	b003      	add	sp, #12
 80107be:	bd30      	pop	{r4, r5, pc}
 80107c0:	2001f994 	.word	0x2001f994

080107c4 <_malloc_r>:
 80107c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c6:	1ccd      	adds	r5, r1, #3
 80107c8:	f025 0503 	bic.w	r5, r5, #3
 80107cc:	3508      	adds	r5, #8
 80107ce:	2d0c      	cmp	r5, #12
 80107d0:	bf38      	it	cc
 80107d2:	250c      	movcc	r5, #12
 80107d4:	2d00      	cmp	r5, #0
 80107d6:	4606      	mov	r6, r0
 80107d8:	db01      	blt.n	80107de <_malloc_r+0x1a>
 80107da:	42a9      	cmp	r1, r5
 80107dc:	d903      	bls.n	80107e6 <_malloc_r+0x22>
 80107de:	230c      	movs	r3, #12
 80107e0:	6033      	str	r3, [r6, #0]
 80107e2:	2000      	movs	r0, #0
 80107e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e6:	f000 fc03 	bl	8010ff0 <__malloc_lock>
 80107ea:	4921      	ldr	r1, [pc, #132]	; (8010870 <_malloc_r+0xac>)
 80107ec:	680a      	ldr	r2, [r1, #0]
 80107ee:	4614      	mov	r4, r2
 80107f0:	b99c      	cbnz	r4, 801081a <_malloc_r+0x56>
 80107f2:	4f20      	ldr	r7, [pc, #128]	; (8010874 <_malloc_r+0xb0>)
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	b923      	cbnz	r3, 8010802 <_malloc_r+0x3e>
 80107f8:	4621      	mov	r1, r4
 80107fa:	4630      	mov	r0, r6
 80107fc:	f000 faf2 	bl	8010de4 <_sbrk_r>
 8010800:	6038      	str	r0, [r7, #0]
 8010802:	4629      	mov	r1, r5
 8010804:	4630      	mov	r0, r6
 8010806:	f000 faed 	bl	8010de4 <_sbrk_r>
 801080a:	1c43      	adds	r3, r0, #1
 801080c:	d123      	bne.n	8010856 <_malloc_r+0x92>
 801080e:	230c      	movs	r3, #12
 8010810:	6033      	str	r3, [r6, #0]
 8010812:	4630      	mov	r0, r6
 8010814:	f000 fbf2 	bl	8010ffc <__malloc_unlock>
 8010818:	e7e3      	b.n	80107e2 <_malloc_r+0x1e>
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	1b5b      	subs	r3, r3, r5
 801081e:	d417      	bmi.n	8010850 <_malloc_r+0x8c>
 8010820:	2b0b      	cmp	r3, #11
 8010822:	d903      	bls.n	801082c <_malloc_r+0x68>
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	441c      	add	r4, r3
 8010828:	6025      	str	r5, [r4, #0]
 801082a:	e004      	b.n	8010836 <_malloc_r+0x72>
 801082c:	6863      	ldr	r3, [r4, #4]
 801082e:	42a2      	cmp	r2, r4
 8010830:	bf0c      	ite	eq
 8010832:	600b      	streq	r3, [r1, #0]
 8010834:	6053      	strne	r3, [r2, #4]
 8010836:	4630      	mov	r0, r6
 8010838:	f000 fbe0 	bl	8010ffc <__malloc_unlock>
 801083c:	f104 000b 	add.w	r0, r4, #11
 8010840:	1d23      	adds	r3, r4, #4
 8010842:	f020 0007 	bic.w	r0, r0, #7
 8010846:	1ac2      	subs	r2, r0, r3
 8010848:	d0cc      	beq.n	80107e4 <_malloc_r+0x20>
 801084a:	1a1b      	subs	r3, r3, r0
 801084c:	50a3      	str	r3, [r4, r2]
 801084e:	e7c9      	b.n	80107e4 <_malloc_r+0x20>
 8010850:	4622      	mov	r2, r4
 8010852:	6864      	ldr	r4, [r4, #4]
 8010854:	e7cc      	b.n	80107f0 <_malloc_r+0x2c>
 8010856:	1cc4      	adds	r4, r0, #3
 8010858:	f024 0403 	bic.w	r4, r4, #3
 801085c:	42a0      	cmp	r0, r4
 801085e:	d0e3      	beq.n	8010828 <_malloc_r+0x64>
 8010860:	1a21      	subs	r1, r4, r0
 8010862:	4630      	mov	r0, r6
 8010864:	f000 fabe 	bl	8010de4 <_sbrk_r>
 8010868:	3001      	adds	r0, #1
 801086a:	d1dd      	bne.n	8010828 <_malloc_r+0x64>
 801086c:	e7cf      	b.n	801080e <_malloc_r+0x4a>
 801086e:	bf00      	nop
 8010870:	2001f994 	.word	0x2001f994
 8010874:	2001f998 	.word	0x2001f998

08010878 <__ssputs_r>:
 8010878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801087c:	688e      	ldr	r6, [r1, #8]
 801087e:	429e      	cmp	r6, r3
 8010880:	4682      	mov	sl, r0
 8010882:	460c      	mov	r4, r1
 8010884:	4690      	mov	r8, r2
 8010886:	461f      	mov	r7, r3
 8010888:	d838      	bhi.n	80108fc <__ssputs_r+0x84>
 801088a:	898a      	ldrh	r2, [r1, #12]
 801088c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010890:	d032      	beq.n	80108f8 <__ssputs_r+0x80>
 8010892:	6825      	ldr	r5, [r4, #0]
 8010894:	6909      	ldr	r1, [r1, #16]
 8010896:	eba5 0901 	sub.w	r9, r5, r1
 801089a:	6965      	ldr	r5, [r4, #20]
 801089c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108a4:	3301      	adds	r3, #1
 80108a6:	444b      	add	r3, r9
 80108a8:	106d      	asrs	r5, r5, #1
 80108aa:	429d      	cmp	r5, r3
 80108ac:	bf38      	it	cc
 80108ae:	461d      	movcc	r5, r3
 80108b0:	0553      	lsls	r3, r2, #21
 80108b2:	d531      	bpl.n	8010918 <__ssputs_r+0xa0>
 80108b4:	4629      	mov	r1, r5
 80108b6:	f7ff ff85 	bl	80107c4 <_malloc_r>
 80108ba:	4606      	mov	r6, r0
 80108bc:	b950      	cbnz	r0, 80108d4 <__ssputs_r+0x5c>
 80108be:	230c      	movs	r3, #12
 80108c0:	f8ca 3000 	str.w	r3, [sl]
 80108c4:	89a3      	ldrh	r3, [r4, #12]
 80108c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ca:	81a3      	strh	r3, [r4, #12]
 80108cc:	f04f 30ff 	mov.w	r0, #4294967295
 80108d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d4:	6921      	ldr	r1, [r4, #16]
 80108d6:	464a      	mov	r2, r9
 80108d8:	f7fd fd04 	bl	800e2e4 <memcpy>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	6126      	str	r6, [r4, #16]
 80108ea:	6165      	str	r5, [r4, #20]
 80108ec:	444e      	add	r6, r9
 80108ee:	eba5 0509 	sub.w	r5, r5, r9
 80108f2:	6026      	str	r6, [r4, #0]
 80108f4:	60a5      	str	r5, [r4, #8]
 80108f6:	463e      	mov	r6, r7
 80108f8:	42be      	cmp	r6, r7
 80108fa:	d900      	bls.n	80108fe <__ssputs_r+0x86>
 80108fc:	463e      	mov	r6, r7
 80108fe:	4632      	mov	r2, r6
 8010900:	6820      	ldr	r0, [r4, #0]
 8010902:	4641      	mov	r1, r8
 8010904:	f000 fb5a 	bl	8010fbc <memmove>
 8010908:	68a3      	ldr	r3, [r4, #8]
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	1b9b      	subs	r3, r3, r6
 801090e:	4432      	add	r2, r6
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	6022      	str	r2, [r4, #0]
 8010914:	2000      	movs	r0, #0
 8010916:	e7db      	b.n	80108d0 <__ssputs_r+0x58>
 8010918:	462a      	mov	r2, r5
 801091a:	f000 fb75 	bl	8011008 <_realloc_r>
 801091e:	4606      	mov	r6, r0
 8010920:	2800      	cmp	r0, #0
 8010922:	d1e1      	bne.n	80108e8 <__ssputs_r+0x70>
 8010924:	6921      	ldr	r1, [r4, #16]
 8010926:	4650      	mov	r0, sl
 8010928:	f7ff fefc 	bl	8010724 <_free_r>
 801092c:	e7c7      	b.n	80108be <__ssputs_r+0x46>
	...

08010930 <_svfiprintf_r>:
 8010930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010934:	4698      	mov	r8, r3
 8010936:	898b      	ldrh	r3, [r1, #12]
 8010938:	061b      	lsls	r3, r3, #24
 801093a:	b09d      	sub	sp, #116	; 0x74
 801093c:	4607      	mov	r7, r0
 801093e:	460d      	mov	r5, r1
 8010940:	4614      	mov	r4, r2
 8010942:	d50e      	bpl.n	8010962 <_svfiprintf_r+0x32>
 8010944:	690b      	ldr	r3, [r1, #16]
 8010946:	b963      	cbnz	r3, 8010962 <_svfiprintf_r+0x32>
 8010948:	2140      	movs	r1, #64	; 0x40
 801094a:	f7ff ff3b 	bl	80107c4 <_malloc_r>
 801094e:	6028      	str	r0, [r5, #0]
 8010950:	6128      	str	r0, [r5, #16]
 8010952:	b920      	cbnz	r0, 801095e <_svfiprintf_r+0x2e>
 8010954:	230c      	movs	r3, #12
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	f04f 30ff 	mov.w	r0, #4294967295
 801095c:	e0d1      	b.n	8010b02 <_svfiprintf_r+0x1d2>
 801095e:	2340      	movs	r3, #64	; 0x40
 8010960:	616b      	str	r3, [r5, #20]
 8010962:	2300      	movs	r3, #0
 8010964:	9309      	str	r3, [sp, #36]	; 0x24
 8010966:	2320      	movs	r3, #32
 8010968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801096c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010970:	2330      	movs	r3, #48	; 0x30
 8010972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b1c <_svfiprintf_r+0x1ec>
 8010976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801097a:	f04f 0901 	mov.w	r9, #1
 801097e:	4623      	mov	r3, r4
 8010980:	469a      	mov	sl, r3
 8010982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010986:	b10a      	cbz	r2, 801098c <_svfiprintf_r+0x5c>
 8010988:	2a25      	cmp	r2, #37	; 0x25
 801098a:	d1f9      	bne.n	8010980 <_svfiprintf_r+0x50>
 801098c:	ebba 0b04 	subs.w	fp, sl, r4
 8010990:	d00b      	beq.n	80109aa <_svfiprintf_r+0x7a>
 8010992:	465b      	mov	r3, fp
 8010994:	4622      	mov	r2, r4
 8010996:	4629      	mov	r1, r5
 8010998:	4638      	mov	r0, r7
 801099a:	f7ff ff6d 	bl	8010878 <__ssputs_r>
 801099e:	3001      	adds	r0, #1
 80109a0:	f000 80aa 	beq.w	8010af8 <_svfiprintf_r+0x1c8>
 80109a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109a6:	445a      	add	r2, fp
 80109a8:	9209      	str	r2, [sp, #36]	; 0x24
 80109aa:	f89a 3000 	ldrb.w	r3, [sl]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 80a2 	beq.w	8010af8 <_svfiprintf_r+0x1c8>
 80109b4:	2300      	movs	r3, #0
 80109b6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109be:	f10a 0a01 	add.w	sl, sl, #1
 80109c2:	9304      	str	r3, [sp, #16]
 80109c4:	9307      	str	r3, [sp, #28]
 80109c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109ca:	931a      	str	r3, [sp, #104]	; 0x68
 80109cc:	4654      	mov	r4, sl
 80109ce:	2205      	movs	r2, #5
 80109d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d4:	4851      	ldr	r0, [pc, #324]	; (8010b1c <_svfiprintf_r+0x1ec>)
 80109d6:	f7ef fc13 	bl	8000200 <memchr>
 80109da:	9a04      	ldr	r2, [sp, #16]
 80109dc:	b9d8      	cbnz	r0, 8010a16 <_svfiprintf_r+0xe6>
 80109de:	06d0      	lsls	r0, r2, #27
 80109e0:	bf44      	itt	mi
 80109e2:	2320      	movmi	r3, #32
 80109e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109e8:	0711      	lsls	r1, r2, #28
 80109ea:	bf44      	itt	mi
 80109ec:	232b      	movmi	r3, #43	; 0x2b
 80109ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109f2:	f89a 3000 	ldrb.w	r3, [sl]
 80109f6:	2b2a      	cmp	r3, #42	; 0x2a
 80109f8:	d015      	beq.n	8010a26 <_svfiprintf_r+0xf6>
 80109fa:	9a07      	ldr	r2, [sp, #28]
 80109fc:	4654      	mov	r4, sl
 80109fe:	2000      	movs	r0, #0
 8010a00:	f04f 0c0a 	mov.w	ip, #10
 8010a04:	4621      	mov	r1, r4
 8010a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a0a:	3b30      	subs	r3, #48	; 0x30
 8010a0c:	2b09      	cmp	r3, #9
 8010a0e:	d94e      	bls.n	8010aae <_svfiprintf_r+0x17e>
 8010a10:	b1b0      	cbz	r0, 8010a40 <_svfiprintf_r+0x110>
 8010a12:	9207      	str	r2, [sp, #28]
 8010a14:	e014      	b.n	8010a40 <_svfiprintf_r+0x110>
 8010a16:	eba0 0308 	sub.w	r3, r0, r8
 8010a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	9304      	str	r3, [sp, #16]
 8010a22:	46a2      	mov	sl, r4
 8010a24:	e7d2      	b.n	80109cc <_svfiprintf_r+0x9c>
 8010a26:	9b03      	ldr	r3, [sp, #12]
 8010a28:	1d19      	adds	r1, r3, #4
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	9103      	str	r1, [sp, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	bfbb      	ittet	lt
 8010a32:	425b      	neglt	r3, r3
 8010a34:	f042 0202 	orrlt.w	r2, r2, #2
 8010a38:	9307      	strge	r3, [sp, #28]
 8010a3a:	9307      	strlt	r3, [sp, #28]
 8010a3c:	bfb8      	it	lt
 8010a3e:	9204      	strlt	r2, [sp, #16]
 8010a40:	7823      	ldrb	r3, [r4, #0]
 8010a42:	2b2e      	cmp	r3, #46	; 0x2e
 8010a44:	d10c      	bne.n	8010a60 <_svfiprintf_r+0x130>
 8010a46:	7863      	ldrb	r3, [r4, #1]
 8010a48:	2b2a      	cmp	r3, #42	; 0x2a
 8010a4a:	d135      	bne.n	8010ab8 <_svfiprintf_r+0x188>
 8010a4c:	9b03      	ldr	r3, [sp, #12]
 8010a4e:	1d1a      	adds	r2, r3, #4
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	9203      	str	r2, [sp, #12]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	bfb8      	it	lt
 8010a58:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a5c:	3402      	adds	r4, #2
 8010a5e:	9305      	str	r3, [sp, #20]
 8010a60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b2c <_svfiprintf_r+0x1fc>
 8010a64:	7821      	ldrb	r1, [r4, #0]
 8010a66:	2203      	movs	r2, #3
 8010a68:	4650      	mov	r0, sl
 8010a6a:	f7ef fbc9 	bl	8000200 <memchr>
 8010a6e:	b140      	cbz	r0, 8010a82 <_svfiprintf_r+0x152>
 8010a70:	2340      	movs	r3, #64	; 0x40
 8010a72:	eba0 000a 	sub.w	r0, r0, sl
 8010a76:	fa03 f000 	lsl.w	r0, r3, r0
 8010a7a:	9b04      	ldr	r3, [sp, #16]
 8010a7c:	4303      	orrs	r3, r0
 8010a7e:	3401      	adds	r4, #1
 8010a80:	9304      	str	r3, [sp, #16]
 8010a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a86:	4826      	ldr	r0, [pc, #152]	; (8010b20 <_svfiprintf_r+0x1f0>)
 8010a88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a8c:	2206      	movs	r2, #6
 8010a8e:	f7ef fbb7 	bl	8000200 <memchr>
 8010a92:	2800      	cmp	r0, #0
 8010a94:	d038      	beq.n	8010b08 <_svfiprintf_r+0x1d8>
 8010a96:	4b23      	ldr	r3, [pc, #140]	; (8010b24 <_svfiprintf_r+0x1f4>)
 8010a98:	bb1b      	cbnz	r3, 8010ae2 <_svfiprintf_r+0x1b2>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	3307      	adds	r3, #7
 8010a9e:	f023 0307 	bic.w	r3, r3, #7
 8010aa2:	3308      	adds	r3, #8
 8010aa4:	9303      	str	r3, [sp, #12]
 8010aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aa8:	4433      	add	r3, r6
 8010aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8010aac:	e767      	b.n	801097e <_svfiprintf_r+0x4e>
 8010aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	e7a5      	b.n	8010a04 <_svfiprintf_r+0xd4>
 8010ab8:	2300      	movs	r3, #0
 8010aba:	3401      	adds	r4, #1
 8010abc:	9305      	str	r3, [sp, #20]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	f04f 0c0a 	mov.w	ip, #10
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aca:	3a30      	subs	r2, #48	; 0x30
 8010acc:	2a09      	cmp	r2, #9
 8010ace:	d903      	bls.n	8010ad8 <_svfiprintf_r+0x1a8>
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d0c5      	beq.n	8010a60 <_svfiprintf_r+0x130>
 8010ad4:	9105      	str	r1, [sp, #20]
 8010ad6:	e7c3      	b.n	8010a60 <_svfiprintf_r+0x130>
 8010ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010adc:	4604      	mov	r4, r0
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e7f0      	b.n	8010ac4 <_svfiprintf_r+0x194>
 8010ae2:	ab03      	add	r3, sp, #12
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	462a      	mov	r2, r5
 8010ae8:	4b0f      	ldr	r3, [pc, #60]	; (8010b28 <_svfiprintf_r+0x1f8>)
 8010aea:	a904      	add	r1, sp, #16
 8010aec:	4638      	mov	r0, r7
 8010aee:	f7fd fcaf 	bl	800e450 <_printf_float>
 8010af2:	1c42      	adds	r2, r0, #1
 8010af4:	4606      	mov	r6, r0
 8010af6:	d1d6      	bne.n	8010aa6 <_svfiprintf_r+0x176>
 8010af8:	89ab      	ldrh	r3, [r5, #12]
 8010afa:	065b      	lsls	r3, r3, #25
 8010afc:	f53f af2c 	bmi.w	8010958 <_svfiprintf_r+0x28>
 8010b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b02:	b01d      	add	sp, #116	; 0x74
 8010b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b08:	ab03      	add	r3, sp, #12
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	462a      	mov	r2, r5
 8010b0e:	4b06      	ldr	r3, [pc, #24]	; (8010b28 <_svfiprintf_r+0x1f8>)
 8010b10:	a904      	add	r1, sp, #16
 8010b12:	4638      	mov	r0, r7
 8010b14:	f7fd ff40 	bl	800e998 <_printf_i>
 8010b18:	e7eb      	b.n	8010af2 <_svfiprintf_r+0x1c2>
 8010b1a:	bf00      	nop
 8010b1c:	0801521c 	.word	0x0801521c
 8010b20:	08015226 	.word	0x08015226
 8010b24:	0800e451 	.word	0x0800e451
 8010b28:	08010879 	.word	0x08010879
 8010b2c:	08015222 	.word	0x08015222

08010b30 <__sfputc_r>:
 8010b30:	6893      	ldr	r3, [r2, #8]
 8010b32:	3b01      	subs	r3, #1
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	b410      	push	{r4}
 8010b38:	6093      	str	r3, [r2, #8]
 8010b3a:	da08      	bge.n	8010b4e <__sfputc_r+0x1e>
 8010b3c:	6994      	ldr	r4, [r2, #24]
 8010b3e:	42a3      	cmp	r3, r4
 8010b40:	db01      	blt.n	8010b46 <__sfputc_r+0x16>
 8010b42:	290a      	cmp	r1, #10
 8010b44:	d103      	bne.n	8010b4e <__sfputc_r+0x1e>
 8010b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b4a:	f7fe b8f9 	b.w	800ed40 <__swbuf_r>
 8010b4e:	6813      	ldr	r3, [r2, #0]
 8010b50:	1c58      	adds	r0, r3, #1
 8010b52:	6010      	str	r0, [r2, #0]
 8010b54:	7019      	strb	r1, [r3, #0]
 8010b56:	4608      	mov	r0, r1
 8010b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <__sfputs_r>:
 8010b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b60:	4606      	mov	r6, r0
 8010b62:	460f      	mov	r7, r1
 8010b64:	4614      	mov	r4, r2
 8010b66:	18d5      	adds	r5, r2, r3
 8010b68:	42ac      	cmp	r4, r5
 8010b6a:	d101      	bne.n	8010b70 <__sfputs_r+0x12>
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	e007      	b.n	8010b80 <__sfputs_r+0x22>
 8010b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b74:	463a      	mov	r2, r7
 8010b76:	4630      	mov	r0, r6
 8010b78:	f7ff ffda 	bl	8010b30 <__sfputc_r>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	d1f3      	bne.n	8010b68 <__sfputs_r+0xa>
 8010b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b84 <_vfiprintf_r>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	460d      	mov	r5, r1
 8010b8a:	b09d      	sub	sp, #116	; 0x74
 8010b8c:	4614      	mov	r4, r2
 8010b8e:	4698      	mov	r8, r3
 8010b90:	4606      	mov	r6, r0
 8010b92:	b118      	cbz	r0, 8010b9c <_vfiprintf_r+0x18>
 8010b94:	6983      	ldr	r3, [r0, #24]
 8010b96:	b90b      	cbnz	r3, 8010b9c <_vfiprintf_r+0x18>
 8010b98:	f7ff f924 	bl	800fde4 <__sinit>
 8010b9c:	4b89      	ldr	r3, [pc, #548]	; (8010dc4 <_vfiprintf_r+0x240>)
 8010b9e:	429d      	cmp	r5, r3
 8010ba0:	d11b      	bne.n	8010bda <_vfiprintf_r+0x56>
 8010ba2:	6875      	ldr	r5, [r6, #4]
 8010ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ba6:	07d9      	lsls	r1, r3, #31
 8010ba8:	d405      	bmi.n	8010bb6 <_vfiprintf_r+0x32>
 8010baa:	89ab      	ldrh	r3, [r5, #12]
 8010bac:	059a      	lsls	r2, r3, #22
 8010bae:	d402      	bmi.n	8010bb6 <_vfiprintf_r+0x32>
 8010bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bb2:	f7ff f9ba 	bl	800ff2a <__retarget_lock_acquire_recursive>
 8010bb6:	89ab      	ldrh	r3, [r5, #12]
 8010bb8:	071b      	lsls	r3, r3, #28
 8010bba:	d501      	bpl.n	8010bc0 <_vfiprintf_r+0x3c>
 8010bbc:	692b      	ldr	r3, [r5, #16]
 8010bbe:	b9eb      	cbnz	r3, 8010bfc <_vfiprintf_r+0x78>
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	f7fe f90e 	bl	800ede4 <__swsetup_r>
 8010bc8:	b1c0      	cbz	r0, 8010bfc <_vfiprintf_r+0x78>
 8010bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bcc:	07dc      	lsls	r4, r3, #31
 8010bce:	d50e      	bpl.n	8010bee <_vfiprintf_r+0x6a>
 8010bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd4:	b01d      	add	sp, #116	; 0x74
 8010bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bda:	4b7b      	ldr	r3, [pc, #492]	; (8010dc8 <_vfiprintf_r+0x244>)
 8010bdc:	429d      	cmp	r5, r3
 8010bde:	d101      	bne.n	8010be4 <_vfiprintf_r+0x60>
 8010be0:	68b5      	ldr	r5, [r6, #8]
 8010be2:	e7df      	b.n	8010ba4 <_vfiprintf_r+0x20>
 8010be4:	4b79      	ldr	r3, [pc, #484]	; (8010dcc <_vfiprintf_r+0x248>)
 8010be6:	429d      	cmp	r5, r3
 8010be8:	bf08      	it	eq
 8010bea:	68f5      	ldreq	r5, [r6, #12]
 8010bec:	e7da      	b.n	8010ba4 <_vfiprintf_r+0x20>
 8010bee:	89ab      	ldrh	r3, [r5, #12]
 8010bf0:	0598      	lsls	r0, r3, #22
 8010bf2:	d4ed      	bmi.n	8010bd0 <_vfiprintf_r+0x4c>
 8010bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bf6:	f7ff f999 	bl	800ff2c <__retarget_lock_release_recursive>
 8010bfa:	e7e9      	b.n	8010bd0 <_vfiprintf_r+0x4c>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010c00:	2320      	movs	r3, #32
 8010c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c0a:	2330      	movs	r3, #48	; 0x30
 8010c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010dd0 <_vfiprintf_r+0x24c>
 8010c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c14:	f04f 0901 	mov.w	r9, #1
 8010c18:	4623      	mov	r3, r4
 8010c1a:	469a      	mov	sl, r3
 8010c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c20:	b10a      	cbz	r2, 8010c26 <_vfiprintf_r+0xa2>
 8010c22:	2a25      	cmp	r2, #37	; 0x25
 8010c24:	d1f9      	bne.n	8010c1a <_vfiprintf_r+0x96>
 8010c26:	ebba 0b04 	subs.w	fp, sl, r4
 8010c2a:	d00b      	beq.n	8010c44 <_vfiprintf_r+0xc0>
 8010c2c:	465b      	mov	r3, fp
 8010c2e:	4622      	mov	r2, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	4630      	mov	r0, r6
 8010c34:	f7ff ff93 	bl	8010b5e <__sfputs_r>
 8010c38:	3001      	adds	r0, #1
 8010c3a:	f000 80aa 	beq.w	8010d92 <_vfiprintf_r+0x20e>
 8010c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c40:	445a      	add	r2, fp
 8010c42:	9209      	str	r2, [sp, #36]	; 0x24
 8010c44:	f89a 3000 	ldrb.w	r3, [sl]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	f000 80a2 	beq.w	8010d92 <_vfiprintf_r+0x20e>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	f04f 32ff 	mov.w	r2, #4294967295
 8010c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c58:	f10a 0a01 	add.w	sl, sl, #1
 8010c5c:	9304      	str	r3, [sp, #16]
 8010c5e:	9307      	str	r3, [sp, #28]
 8010c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c64:	931a      	str	r3, [sp, #104]	; 0x68
 8010c66:	4654      	mov	r4, sl
 8010c68:	2205      	movs	r2, #5
 8010c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c6e:	4858      	ldr	r0, [pc, #352]	; (8010dd0 <_vfiprintf_r+0x24c>)
 8010c70:	f7ef fac6 	bl	8000200 <memchr>
 8010c74:	9a04      	ldr	r2, [sp, #16]
 8010c76:	b9d8      	cbnz	r0, 8010cb0 <_vfiprintf_r+0x12c>
 8010c78:	06d1      	lsls	r1, r2, #27
 8010c7a:	bf44      	itt	mi
 8010c7c:	2320      	movmi	r3, #32
 8010c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c82:	0713      	lsls	r3, r2, #28
 8010c84:	bf44      	itt	mi
 8010c86:	232b      	movmi	r3, #43	; 0x2b
 8010c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c90:	2b2a      	cmp	r3, #42	; 0x2a
 8010c92:	d015      	beq.n	8010cc0 <_vfiprintf_r+0x13c>
 8010c94:	9a07      	ldr	r2, [sp, #28]
 8010c96:	4654      	mov	r4, sl
 8010c98:	2000      	movs	r0, #0
 8010c9a:	f04f 0c0a 	mov.w	ip, #10
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ca4:	3b30      	subs	r3, #48	; 0x30
 8010ca6:	2b09      	cmp	r3, #9
 8010ca8:	d94e      	bls.n	8010d48 <_vfiprintf_r+0x1c4>
 8010caa:	b1b0      	cbz	r0, 8010cda <_vfiprintf_r+0x156>
 8010cac:	9207      	str	r2, [sp, #28]
 8010cae:	e014      	b.n	8010cda <_vfiprintf_r+0x156>
 8010cb0:	eba0 0308 	sub.w	r3, r0, r8
 8010cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	9304      	str	r3, [sp, #16]
 8010cbc:	46a2      	mov	sl, r4
 8010cbe:	e7d2      	b.n	8010c66 <_vfiprintf_r+0xe2>
 8010cc0:	9b03      	ldr	r3, [sp, #12]
 8010cc2:	1d19      	adds	r1, r3, #4
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	9103      	str	r1, [sp, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	bfbb      	ittet	lt
 8010ccc:	425b      	neglt	r3, r3
 8010cce:	f042 0202 	orrlt.w	r2, r2, #2
 8010cd2:	9307      	strge	r3, [sp, #28]
 8010cd4:	9307      	strlt	r3, [sp, #28]
 8010cd6:	bfb8      	it	lt
 8010cd8:	9204      	strlt	r2, [sp, #16]
 8010cda:	7823      	ldrb	r3, [r4, #0]
 8010cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8010cde:	d10c      	bne.n	8010cfa <_vfiprintf_r+0x176>
 8010ce0:	7863      	ldrb	r3, [r4, #1]
 8010ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ce4:	d135      	bne.n	8010d52 <_vfiprintf_r+0x1ce>
 8010ce6:	9b03      	ldr	r3, [sp, #12]
 8010ce8:	1d1a      	adds	r2, r3, #4
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	9203      	str	r2, [sp, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	bfb8      	it	lt
 8010cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cf6:	3402      	adds	r4, #2
 8010cf8:	9305      	str	r3, [sp, #20]
 8010cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010de0 <_vfiprintf_r+0x25c>
 8010cfe:	7821      	ldrb	r1, [r4, #0]
 8010d00:	2203      	movs	r2, #3
 8010d02:	4650      	mov	r0, sl
 8010d04:	f7ef fa7c 	bl	8000200 <memchr>
 8010d08:	b140      	cbz	r0, 8010d1c <_vfiprintf_r+0x198>
 8010d0a:	2340      	movs	r3, #64	; 0x40
 8010d0c:	eba0 000a 	sub.w	r0, r0, sl
 8010d10:	fa03 f000 	lsl.w	r0, r3, r0
 8010d14:	9b04      	ldr	r3, [sp, #16]
 8010d16:	4303      	orrs	r3, r0
 8010d18:	3401      	adds	r4, #1
 8010d1a:	9304      	str	r3, [sp, #16]
 8010d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d20:	482c      	ldr	r0, [pc, #176]	; (8010dd4 <_vfiprintf_r+0x250>)
 8010d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d26:	2206      	movs	r2, #6
 8010d28:	f7ef fa6a 	bl	8000200 <memchr>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d03f      	beq.n	8010db0 <_vfiprintf_r+0x22c>
 8010d30:	4b29      	ldr	r3, [pc, #164]	; (8010dd8 <_vfiprintf_r+0x254>)
 8010d32:	bb1b      	cbnz	r3, 8010d7c <_vfiprintf_r+0x1f8>
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	3307      	adds	r3, #7
 8010d38:	f023 0307 	bic.w	r3, r3, #7
 8010d3c:	3308      	adds	r3, #8
 8010d3e:	9303      	str	r3, [sp, #12]
 8010d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d42:	443b      	add	r3, r7
 8010d44:	9309      	str	r3, [sp, #36]	; 0x24
 8010d46:	e767      	b.n	8010c18 <_vfiprintf_r+0x94>
 8010d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d4c:	460c      	mov	r4, r1
 8010d4e:	2001      	movs	r0, #1
 8010d50:	e7a5      	b.n	8010c9e <_vfiprintf_r+0x11a>
 8010d52:	2300      	movs	r3, #0
 8010d54:	3401      	adds	r4, #1
 8010d56:	9305      	str	r3, [sp, #20]
 8010d58:	4619      	mov	r1, r3
 8010d5a:	f04f 0c0a 	mov.w	ip, #10
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d64:	3a30      	subs	r2, #48	; 0x30
 8010d66:	2a09      	cmp	r2, #9
 8010d68:	d903      	bls.n	8010d72 <_vfiprintf_r+0x1ee>
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d0c5      	beq.n	8010cfa <_vfiprintf_r+0x176>
 8010d6e:	9105      	str	r1, [sp, #20]
 8010d70:	e7c3      	b.n	8010cfa <_vfiprintf_r+0x176>
 8010d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d76:	4604      	mov	r4, r0
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e7f0      	b.n	8010d5e <_vfiprintf_r+0x1da>
 8010d7c:	ab03      	add	r3, sp, #12
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	462a      	mov	r2, r5
 8010d82:	4b16      	ldr	r3, [pc, #88]	; (8010ddc <_vfiprintf_r+0x258>)
 8010d84:	a904      	add	r1, sp, #16
 8010d86:	4630      	mov	r0, r6
 8010d88:	f7fd fb62 	bl	800e450 <_printf_float>
 8010d8c:	4607      	mov	r7, r0
 8010d8e:	1c78      	adds	r0, r7, #1
 8010d90:	d1d6      	bne.n	8010d40 <_vfiprintf_r+0x1bc>
 8010d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d94:	07d9      	lsls	r1, r3, #31
 8010d96:	d405      	bmi.n	8010da4 <_vfiprintf_r+0x220>
 8010d98:	89ab      	ldrh	r3, [r5, #12]
 8010d9a:	059a      	lsls	r2, r3, #22
 8010d9c:	d402      	bmi.n	8010da4 <_vfiprintf_r+0x220>
 8010d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010da0:	f7ff f8c4 	bl	800ff2c <__retarget_lock_release_recursive>
 8010da4:	89ab      	ldrh	r3, [r5, #12]
 8010da6:	065b      	lsls	r3, r3, #25
 8010da8:	f53f af12 	bmi.w	8010bd0 <_vfiprintf_r+0x4c>
 8010dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dae:	e711      	b.n	8010bd4 <_vfiprintf_r+0x50>
 8010db0:	ab03      	add	r3, sp, #12
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	462a      	mov	r2, r5
 8010db6:	4b09      	ldr	r3, [pc, #36]	; (8010ddc <_vfiprintf_r+0x258>)
 8010db8:	a904      	add	r1, sp, #16
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7fd fdec 	bl	800e998 <_printf_i>
 8010dc0:	e7e4      	b.n	8010d8c <_vfiprintf_r+0x208>
 8010dc2:	bf00      	nop
 8010dc4:	08015080 	.word	0x08015080
 8010dc8:	080150a0 	.word	0x080150a0
 8010dcc:	08015060 	.word	0x08015060
 8010dd0:	0801521c 	.word	0x0801521c
 8010dd4:	08015226 	.word	0x08015226
 8010dd8:	0800e451 	.word	0x0800e451
 8010ddc:	08010b5f 	.word	0x08010b5f
 8010de0:	08015222 	.word	0x08015222

08010de4 <_sbrk_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4d06      	ldr	r5, [pc, #24]	; (8010e00 <_sbrk_r+0x1c>)
 8010de8:	2300      	movs	r3, #0
 8010dea:	4604      	mov	r4, r0
 8010dec:	4608      	mov	r0, r1
 8010dee:	602b      	str	r3, [r5, #0]
 8010df0:	f7f1 f922 	bl	8002038 <_sbrk>
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	d102      	bne.n	8010dfe <_sbrk_r+0x1a>
 8010df8:	682b      	ldr	r3, [r5, #0]
 8010dfa:	b103      	cbz	r3, 8010dfe <_sbrk_r+0x1a>
 8010dfc:	6023      	str	r3, [r4, #0]
 8010dfe:	bd38      	pop	{r3, r4, r5, pc}
 8010e00:	2001fe60 	.word	0x2001fe60

08010e04 <__sread>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	460c      	mov	r4, r1
 8010e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e0c:	f000 f922 	bl	8011054 <_read_r>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	bfab      	itete	ge
 8010e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e16:	89a3      	ldrhlt	r3, [r4, #12]
 8010e18:	181b      	addge	r3, r3, r0
 8010e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e1e:	bfac      	ite	ge
 8010e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e22:	81a3      	strhlt	r3, [r4, #12]
 8010e24:	bd10      	pop	{r4, pc}

08010e26 <__swrite>:
 8010e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2a:	461f      	mov	r7, r3
 8010e2c:	898b      	ldrh	r3, [r1, #12]
 8010e2e:	05db      	lsls	r3, r3, #23
 8010e30:	4605      	mov	r5, r0
 8010e32:	460c      	mov	r4, r1
 8010e34:	4616      	mov	r6, r2
 8010e36:	d505      	bpl.n	8010e44 <__swrite+0x1e>
 8010e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f000 f898 	bl	8010f74 <_lseek_r>
 8010e44:	89a3      	ldrh	r3, [r4, #12]
 8010e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e4e:	81a3      	strh	r3, [r4, #12]
 8010e50:	4632      	mov	r2, r6
 8010e52:	463b      	mov	r3, r7
 8010e54:	4628      	mov	r0, r5
 8010e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5a:	f000 b817 	b.w	8010e8c <_write_r>

08010e5e <__sseek>:
 8010e5e:	b510      	push	{r4, lr}
 8010e60:	460c      	mov	r4, r1
 8010e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e66:	f000 f885 	bl	8010f74 <_lseek_r>
 8010e6a:	1c43      	adds	r3, r0, #1
 8010e6c:	89a3      	ldrh	r3, [r4, #12]
 8010e6e:	bf15      	itete	ne
 8010e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e7a:	81a3      	strheq	r3, [r4, #12]
 8010e7c:	bf18      	it	ne
 8010e7e:	81a3      	strhne	r3, [r4, #12]
 8010e80:	bd10      	pop	{r4, pc}

08010e82 <__sclose>:
 8010e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e86:	f000 b831 	b.w	8010eec <_close_r>
	...

08010e8c <_write_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d07      	ldr	r5, [pc, #28]	; (8010eac <_write_r+0x20>)
 8010e90:	4604      	mov	r4, r0
 8010e92:	4608      	mov	r0, r1
 8010e94:	4611      	mov	r1, r2
 8010e96:	2200      	movs	r2, #0
 8010e98:	602a      	str	r2, [r5, #0]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f7f1 f87b 	bl	8001f96 <_write>
 8010ea0:	1c43      	adds	r3, r0, #1
 8010ea2:	d102      	bne.n	8010eaa <_write_r+0x1e>
 8010ea4:	682b      	ldr	r3, [r5, #0]
 8010ea6:	b103      	cbz	r3, 8010eaa <_write_r+0x1e>
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	bd38      	pop	{r3, r4, r5, pc}
 8010eac:	2001fe60 	.word	0x2001fe60

08010eb0 <__assert_func>:
 8010eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eb2:	4614      	mov	r4, r2
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4b09      	ldr	r3, [pc, #36]	; (8010edc <__assert_func+0x2c>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4605      	mov	r5, r0
 8010ebc:	68d8      	ldr	r0, [r3, #12]
 8010ebe:	b14c      	cbz	r4, 8010ed4 <__assert_func+0x24>
 8010ec0:	4b07      	ldr	r3, [pc, #28]	; (8010ee0 <__assert_func+0x30>)
 8010ec2:	9100      	str	r1, [sp, #0]
 8010ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ec8:	4906      	ldr	r1, [pc, #24]	; (8010ee4 <__assert_func+0x34>)
 8010eca:	462b      	mov	r3, r5
 8010ecc:	f000 f81e 	bl	8010f0c <fiprintf>
 8010ed0:	f000 f8df 	bl	8011092 <abort>
 8010ed4:	4b04      	ldr	r3, [pc, #16]	; (8010ee8 <__assert_func+0x38>)
 8010ed6:	461c      	mov	r4, r3
 8010ed8:	e7f3      	b.n	8010ec2 <__assert_func+0x12>
 8010eda:	bf00      	nop
 8010edc:	20000068 	.word	0x20000068
 8010ee0:	0801522d 	.word	0x0801522d
 8010ee4:	0801523a 	.word	0x0801523a
 8010ee8:	08015268 	.word	0x08015268

08010eec <_close_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d06      	ldr	r5, [pc, #24]	; (8010f08 <_close_r+0x1c>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	602b      	str	r3, [r5, #0]
 8010ef8:	f7f1 f869 	bl	8001fce <_close>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_close_r+0x1a>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_close_r+0x1a>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	2001fe60 	.word	0x2001fe60

08010f0c <fiprintf>:
 8010f0c:	b40e      	push	{r1, r2, r3}
 8010f0e:	b503      	push	{r0, r1, lr}
 8010f10:	4601      	mov	r1, r0
 8010f12:	ab03      	add	r3, sp, #12
 8010f14:	4805      	ldr	r0, [pc, #20]	; (8010f2c <fiprintf+0x20>)
 8010f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1a:	6800      	ldr	r0, [r0, #0]
 8010f1c:	9301      	str	r3, [sp, #4]
 8010f1e:	f7ff fe31 	bl	8010b84 <_vfiprintf_r>
 8010f22:	b002      	add	sp, #8
 8010f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f28:	b003      	add	sp, #12
 8010f2a:	4770      	bx	lr
 8010f2c:	20000068 	.word	0x20000068

08010f30 <_fstat_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d07      	ldr	r5, [pc, #28]	; (8010f50 <_fstat_r+0x20>)
 8010f34:	2300      	movs	r3, #0
 8010f36:	4604      	mov	r4, r0
 8010f38:	4608      	mov	r0, r1
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	602b      	str	r3, [r5, #0]
 8010f3e:	f7f1 f852 	bl	8001fe6 <_fstat>
 8010f42:	1c43      	adds	r3, r0, #1
 8010f44:	d102      	bne.n	8010f4c <_fstat_r+0x1c>
 8010f46:	682b      	ldr	r3, [r5, #0]
 8010f48:	b103      	cbz	r3, 8010f4c <_fstat_r+0x1c>
 8010f4a:	6023      	str	r3, [r4, #0]
 8010f4c:	bd38      	pop	{r3, r4, r5, pc}
 8010f4e:	bf00      	nop
 8010f50:	2001fe60 	.word	0x2001fe60

08010f54 <_isatty_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4d06      	ldr	r5, [pc, #24]	; (8010f70 <_isatty_r+0x1c>)
 8010f58:	2300      	movs	r3, #0
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	4608      	mov	r0, r1
 8010f5e:	602b      	str	r3, [r5, #0]
 8010f60:	f7f1 f851 	bl	8002006 <_isatty>
 8010f64:	1c43      	adds	r3, r0, #1
 8010f66:	d102      	bne.n	8010f6e <_isatty_r+0x1a>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	b103      	cbz	r3, 8010f6e <_isatty_r+0x1a>
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	2001fe60 	.word	0x2001fe60

08010f74 <_lseek_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	4d07      	ldr	r5, [pc, #28]	; (8010f94 <_lseek_r+0x20>)
 8010f78:	4604      	mov	r4, r0
 8010f7a:	4608      	mov	r0, r1
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	2200      	movs	r2, #0
 8010f80:	602a      	str	r2, [r5, #0]
 8010f82:	461a      	mov	r2, r3
 8010f84:	f7f1 f84a 	bl	800201c <_lseek>
 8010f88:	1c43      	adds	r3, r0, #1
 8010f8a:	d102      	bne.n	8010f92 <_lseek_r+0x1e>
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	b103      	cbz	r3, 8010f92 <_lseek_r+0x1e>
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	2001fe60 	.word	0x2001fe60

08010f98 <__ascii_mbtowc>:
 8010f98:	b082      	sub	sp, #8
 8010f9a:	b901      	cbnz	r1, 8010f9e <__ascii_mbtowc+0x6>
 8010f9c:	a901      	add	r1, sp, #4
 8010f9e:	b142      	cbz	r2, 8010fb2 <__ascii_mbtowc+0x1a>
 8010fa0:	b14b      	cbz	r3, 8010fb6 <__ascii_mbtowc+0x1e>
 8010fa2:	7813      	ldrb	r3, [r2, #0]
 8010fa4:	600b      	str	r3, [r1, #0]
 8010fa6:	7812      	ldrb	r2, [r2, #0]
 8010fa8:	1e10      	subs	r0, r2, #0
 8010faa:	bf18      	it	ne
 8010fac:	2001      	movne	r0, #1
 8010fae:	b002      	add	sp, #8
 8010fb0:	4770      	bx	lr
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	e7fb      	b.n	8010fae <__ascii_mbtowc+0x16>
 8010fb6:	f06f 0001 	mvn.w	r0, #1
 8010fba:	e7f8      	b.n	8010fae <__ascii_mbtowc+0x16>

08010fbc <memmove>:
 8010fbc:	4288      	cmp	r0, r1
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	eb01 0402 	add.w	r4, r1, r2
 8010fc4:	d902      	bls.n	8010fcc <memmove+0x10>
 8010fc6:	4284      	cmp	r4, r0
 8010fc8:	4623      	mov	r3, r4
 8010fca:	d807      	bhi.n	8010fdc <memmove+0x20>
 8010fcc:	1e43      	subs	r3, r0, #1
 8010fce:	42a1      	cmp	r1, r4
 8010fd0:	d008      	beq.n	8010fe4 <memmove+0x28>
 8010fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fda:	e7f8      	b.n	8010fce <memmove+0x12>
 8010fdc:	4402      	add	r2, r0
 8010fde:	4601      	mov	r1, r0
 8010fe0:	428a      	cmp	r2, r1
 8010fe2:	d100      	bne.n	8010fe6 <memmove+0x2a>
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fee:	e7f7      	b.n	8010fe0 <memmove+0x24>

08010ff0 <__malloc_lock>:
 8010ff0:	4801      	ldr	r0, [pc, #4]	; (8010ff8 <__malloc_lock+0x8>)
 8010ff2:	f7fe bf9a 	b.w	800ff2a <__retarget_lock_acquire_recursive>
 8010ff6:	bf00      	nop
 8010ff8:	2001fe58 	.word	0x2001fe58

08010ffc <__malloc_unlock>:
 8010ffc:	4801      	ldr	r0, [pc, #4]	; (8011004 <__malloc_unlock+0x8>)
 8010ffe:	f7fe bf95 	b.w	800ff2c <__retarget_lock_release_recursive>
 8011002:	bf00      	nop
 8011004:	2001fe58 	.word	0x2001fe58

08011008 <_realloc_r>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	4607      	mov	r7, r0
 801100c:	4614      	mov	r4, r2
 801100e:	460e      	mov	r6, r1
 8011010:	b921      	cbnz	r1, 801101c <_realloc_r+0x14>
 8011012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011016:	4611      	mov	r1, r2
 8011018:	f7ff bbd4 	b.w	80107c4 <_malloc_r>
 801101c:	b922      	cbnz	r2, 8011028 <_realloc_r+0x20>
 801101e:	f7ff fb81 	bl	8010724 <_free_r>
 8011022:	4625      	mov	r5, r4
 8011024:	4628      	mov	r0, r5
 8011026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011028:	f000 f83a 	bl	80110a0 <_malloc_usable_size_r>
 801102c:	42a0      	cmp	r0, r4
 801102e:	d20f      	bcs.n	8011050 <_realloc_r+0x48>
 8011030:	4621      	mov	r1, r4
 8011032:	4638      	mov	r0, r7
 8011034:	f7ff fbc6 	bl	80107c4 <_malloc_r>
 8011038:	4605      	mov	r5, r0
 801103a:	2800      	cmp	r0, #0
 801103c:	d0f2      	beq.n	8011024 <_realloc_r+0x1c>
 801103e:	4631      	mov	r1, r6
 8011040:	4622      	mov	r2, r4
 8011042:	f7fd f94f 	bl	800e2e4 <memcpy>
 8011046:	4631      	mov	r1, r6
 8011048:	4638      	mov	r0, r7
 801104a:	f7ff fb6b 	bl	8010724 <_free_r>
 801104e:	e7e9      	b.n	8011024 <_realloc_r+0x1c>
 8011050:	4635      	mov	r5, r6
 8011052:	e7e7      	b.n	8011024 <_realloc_r+0x1c>

08011054 <_read_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d07      	ldr	r5, [pc, #28]	; (8011074 <_read_r+0x20>)
 8011058:	4604      	mov	r4, r0
 801105a:	4608      	mov	r0, r1
 801105c:	4611      	mov	r1, r2
 801105e:	2200      	movs	r2, #0
 8011060:	602a      	str	r2, [r5, #0]
 8011062:	461a      	mov	r2, r3
 8011064:	f7f0 ff7a 	bl	8001f5c <_read>
 8011068:	1c43      	adds	r3, r0, #1
 801106a:	d102      	bne.n	8011072 <_read_r+0x1e>
 801106c:	682b      	ldr	r3, [r5, #0]
 801106e:	b103      	cbz	r3, 8011072 <_read_r+0x1e>
 8011070:	6023      	str	r3, [r4, #0]
 8011072:	bd38      	pop	{r3, r4, r5, pc}
 8011074:	2001fe60 	.word	0x2001fe60

08011078 <__ascii_wctomb>:
 8011078:	b149      	cbz	r1, 801108e <__ascii_wctomb+0x16>
 801107a:	2aff      	cmp	r2, #255	; 0xff
 801107c:	bf85      	ittet	hi
 801107e:	238a      	movhi	r3, #138	; 0x8a
 8011080:	6003      	strhi	r3, [r0, #0]
 8011082:	700a      	strbls	r2, [r1, #0]
 8011084:	f04f 30ff 	movhi.w	r0, #4294967295
 8011088:	bf98      	it	ls
 801108a:	2001      	movls	r0, #1
 801108c:	4770      	bx	lr
 801108e:	4608      	mov	r0, r1
 8011090:	4770      	bx	lr

08011092 <abort>:
 8011092:	b508      	push	{r3, lr}
 8011094:	2006      	movs	r0, #6
 8011096:	f000 f833 	bl	8011100 <raise>
 801109a:	2001      	movs	r0, #1
 801109c:	f7f0 ff54 	bl	8001f48 <_exit>

080110a0 <_malloc_usable_size_r>:
 80110a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110a4:	1f18      	subs	r0, r3, #4
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	bfbc      	itt	lt
 80110aa:	580b      	ldrlt	r3, [r1, r0]
 80110ac:	18c0      	addlt	r0, r0, r3
 80110ae:	4770      	bx	lr

080110b0 <_raise_r>:
 80110b0:	291f      	cmp	r1, #31
 80110b2:	b538      	push	{r3, r4, r5, lr}
 80110b4:	4604      	mov	r4, r0
 80110b6:	460d      	mov	r5, r1
 80110b8:	d904      	bls.n	80110c4 <_raise_r+0x14>
 80110ba:	2316      	movs	r3, #22
 80110bc:	6003      	str	r3, [r0, #0]
 80110be:	f04f 30ff 	mov.w	r0, #4294967295
 80110c2:	bd38      	pop	{r3, r4, r5, pc}
 80110c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80110c6:	b112      	cbz	r2, 80110ce <_raise_r+0x1e>
 80110c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110cc:	b94b      	cbnz	r3, 80110e2 <_raise_r+0x32>
 80110ce:	4620      	mov	r0, r4
 80110d0:	f000 f830 	bl	8011134 <_getpid_r>
 80110d4:	462a      	mov	r2, r5
 80110d6:	4601      	mov	r1, r0
 80110d8:	4620      	mov	r0, r4
 80110da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110de:	f000 b817 	b.w	8011110 <_kill_r>
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d00a      	beq.n	80110fc <_raise_r+0x4c>
 80110e6:	1c59      	adds	r1, r3, #1
 80110e8:	d103      	bne.n	80110f2 <_raise_r+0x42>
 80110ea:	2316      	movs	r3, #22
 80110ec:	6003      	str	r3, [r0, #0]
 80110ee:	2001      	movs	r0, #1
 80110f0:	e7e7      	b.n	80110c2 <_raise_r+0x12>
 80110f2:	2400      	movs	r4, #0
 80110f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110f8:	4628      	mov	r0, r5
 80110fa:	4798      	blx	r3
 80110fc:	2000      	movs	r0, #0
 80110fe:	e7e0      	b.n	80110c2 <_raise_r+0x12>

08011100 <raise>:
 8011100:	4b02      	ldr	r3, [pc, #8]	; (801110c <raise+0xc>)
 8011102:	4601      	mov	r1, r0
 8011104:	6818      	ldr	r0, [r3, #0]
 8011106:	f7ff bfd3 	b.w	80110b0 <_raise_r>
 801110a:	bf00      	nop
 801110c:	20000068 	.word	0x20000068

08011110 <_kill_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d07      	ldr	r5, [pc, #28]	; (8011130 <_kill_r+0x20>)
 8011114:	2300      	movs	r3, #0
 8011116:	4604      	mov	r4, r0
 8011118:	4608      	mov	r0, r1
 801111a:	4611      	mov	r1, r2
 801111c:	602b      	str	r3, [r5, #0]
 801111e:	f7f0 ff03 	bl	8001f28 <_kill>
 8011122:	1c43      	adds	r3, r0, #1
 8011124:	d102      	bne.n	801112c <_kill_r+0x1c>
 8011126:	682b      	ldr	r3, [r5, #0]
 8011128:	b103      	cbz	r3, 801112c <_kill_r+0x1c>
 801112a:	6023      	str	r3, [r4, #0]
 801112c:	bd38      	pop	{r3, r4, r5, pc}
 801112e:	bf00      	nop
 8011130:	2001fe60 	.word	0x2001fe60

08011134 <_getpid_r>:
 8011134:	f7f0 bef0 	b.w	8001f18 <_getpid>

08011138 <cos>:
 8011138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801113a:	ec53 2b10 	vmov	r2, r3, d0
 801113e:	4824      	ldr	r0, [pc, #144]	; (80111d0 <cos+0x98>)
 8011140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011144:	4281      	cmp	r1, r0
 8011146:	dc06      	bgt.n	8011156 <cos+0x1e>
 8011148:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80111c8 <cos+0x90>
 801114c:	f000 fab0 	bl	80116b0 <__kernel_cos>
 8011150:	ec51 0b10 	vmov	r0, r1, d0
 8011154:	e007      	b.n	8011166 <cos+0x2e>
 8011156:	481f      	ldr	r0, [pc, #124]	; (80111d4 <cos+0x9c>)
 8011158:	4281      	cmp	r1, r0
 801115a:	dd09      	ble.n	8011170 <cos+0x38>
 801115c:	ee10 0a10 	vmov	r0, s0
 8011160:	4619      	mov	r1, r3
 8011162:	f7ef f8a1 	bl	80002a8 <__aeabi_dsub>
 8011166:	ec41 0b10 	vmov	d0, r0, r1
 801116a:	b005      	add	sp, #20
 801116c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011170:	4668      	mov	r0, sp
 8011172:	f000 f891 	bl	8011298 <__ieee754_rem_pio2>
 8011176:	f000 0003 	and.w	r0, r0, #3
 801117a:	2801      	cmp	r0, #1
 801117c:	d007      	beq.n	801118e <cos+0x56>
 801117e:	2802      	cmp	r0, #2
 8011180:	d012      	beq.n	80111a8 <cos+0x70>
 8011182:	b9c0      	cbnz	r0, 80111b6 <cos+0x7e>
 8011184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011188:	ed9d 0b00 	vldr	d0, [sp]
 801118c:	e7de      	b.n	801114c <cos+0x14>
 801118e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011192:	ed9d 0b00 	vldr	d0, [sp]
 8011196:	f000 fe93 	bl	8011ec0 <__kernel_sin>
 801119a:	ec53 2b10 	vmov	r2, r3, d0
 801119e:	ee10 0a10 	vmov	r0, s0
 80111a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80111a6:	e7de      	b.n	8011166 <cos+0x2e>
 80111a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80111ac:	ed9d 0b00 	vldr	d0, [sp]
 80111b0:	f000 fa7e 	bl	80116b0 <__kernel_cos>
 80111b4:	e7f1      	b.n	801119a <cos+0x62>
 80111b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80111ba:	ed9d 0b00 	vldr	d0, [sp]
 80111be:	2001      	movs	r0, #1
 80111c0:	f000 fe7e 	bl	8011ec0 <__kernel_sin>
 80111c4:	e7c4      	b.n	8011150 <cos+0x18>
 80111c6:	bf00      	nop
	...
 80111d0:	3fe921fb 	.word	0x3fe921fb
 80111d4:	7fefffff 	.word	0x7fefffff

080111d8 <fabs>:
 80111d8:	ec51 0b10 	vmov	r0, r1, d0
 80111dc:	ee10 2a10 	vmov	r2, s0
 80111e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111e4:	ec43 2b10 	vmov	d0, r2, r3
 80111e8:	4770      	bx	lr
 80111ea:	0000      	movs	r0, r0
 80111ec:	0000      	movs	r0, r0
	...

080111f0 <sin>:
 80111f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111f2:	ec53 2b10 	vmov	r2, r3, d0
 80111f6:	4826      	ldr	r0, [pc, #152]	; (8011290 <sin+0xa0>)
 80111f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80111fc:	4281      	cmp	r1, r0
 80111fe:	dc07      	bgt.n	8011210 <sin+0x20>
 8011200:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011288 <sin+0x98>
 8011204:	2000      	movs	r0, #0
 8011206:	f000 fe5b 	bl	8011ec0 <__kernel_sin>
 801120a:	ec51 0b10 	vmov	r0, r1, d0
 801120e:	e007      	b.n	8011220 <sin+0x30>
 8011210:	4820      	ldr	r0, [pc, #128]	; (8011294 <sin+0xa4>)
 8011212:	4281      	cmp	r1, r0
 8011214:	dd09      	ble.n	801122a <sin+0x3a>
 8011216:	ee10 0a10 	vmov	r0, s0
 801121a:	4619      	mov	r1, r3
 801121c:	f7ef f844 	bl	80002a8 <__aeabi_dsub>
 8011220:	ec41 0b10 	vmov	d0, r0, r1
 8011224:	b005      	add	sp, #20
 8011226:	f85d fb04 	ldr.w	pc, [sp], #4
 801122a:	4668      	mov	r0, sp
 801122c:	f000 f834 	bl	8011298 <__ieee754_rem_pio2>
 8011230:	f000 0003 	and.w	r0, r0, #3
 8011234:	2801      	cmp	r0, #1
 8011236:	d008      	beq.n	801124a <sin+0x5a>
 8011238:	2802      	cmp	r0, #2
 801123a:	d00d      	beq.n	8011258 <sin+0x68>
 801123c:	b9d0      	cbnz	r0, 8011274 <sin+0x84>
 801123e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011242:	ed9d 0b00 	vldr	d0, [sp]
 8011246:	2001      	movs	r0, #1
 8011248:	e7dd      	b.n	8011206 <sin+0x16>
 801124a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801124e:	ed9d 0b00 	vldr	d0, [sp]
 8011252:	f000 fa2d 	bl	80116b0 <__kernel_cos>
 8011256:	e7d8      	b.n	801120a <sin+0x1a>
 8011258:	ed9d 1b02 	vldr	d1, [sp, #8]
 801125c:	ed9d 0b00 	vldr	d0, [sp]
 8011260:	2001      	movs	r0, #1
 8011262:	f000 fe2d 	bl	8011ec0 <__kernel_sin>
 8011266:	ec53 2b10 	vmov	r2, r3, d0
 801126a:	ee10 0a10 	vmov	r0, s0
 801126e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011272:	e7d5      	b.n	8011220 <sin+0x30>
 8011274:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011278:	ed9d 0b00 	vldr	d0, [sp]
 801127c:	f000 fa18 	bl	80116b0 <__kernel_cos>
 8011280:	e7f1      	b.n	8011266 <sin+0x76>
 8011282:	bf00      	nop
 8011284:	f3af 8000 	nop.w
	...
 8011290:	3fe921fb 	.word	0x3fe921fb
 8011294:	7fefffff 	.word	0x7fefffff

08011298 <__ieee754_rem_pio2>:
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	ed2d 8b02 	vpush	{d8}
 80112a0:	ec55 4b10 	vmov	r4, r5, d0
 80112a4:	4bca      	ldr	r3, [pc, #808]	; (80115d0 <__ieee754_rem_pio2+0x338>)
 80112a6:	b08b      	sub	sp, #44	; 0x2c
 80112a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80112ac:	4598      	cmp	r8, r3
 80112ae:	4682      	mov	sl, r0
 80112b0:	9502      	str	r5, [sp, #8]
 80112b2:	dc08      	bgt.n	80112c6 <__ieee754_rem_pio2+0x2e>
 80112b4:	2200      	movs	r2, #0
 80112b6:	2300      	movs	r3, #0
 80112b8:	ed80 0b00 	vstr	d0, [r0]
 80112bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80112c0:	f04f 0b00 	mov.w	fp, #0
 80112c4:	e028      	b.n	8011318 <__ieee754_rem_pio2+0x80>
 80112c6:	4bc3      	ldr	r3, [pc, #780]	; (80115d4 <__ieee754_rem_pio2+0x33c>)
 80112c8:	4598      	cmp	r8, r3
 80112ca:	dc78      	bgt.n	80113be <__ieee754_rem_pio2+0x126>
 80112cc:	9b02      	ldr	r3, [sp, #8]
 80112ce:	4ec2      	ldr	r6, [pc, #776]	; (80115d8 <__ieee754_rem_pio2+0x340>)
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	ee10 0a10 	vmov	r0, s0
 80112d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011598 <__ieee754_rem_pio2+0x300>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	4629      	mov	r1, r5
 80112de:	dd39      	ble.n	8011354 <__ieee754_rem_pio2+0xbc>
 80112e0:	f7ee ffe2 	bl	80002a8 <__aeabi_dsub>
 80112e4:	45b0      	cmp	r8, r6
 80112e6:	4604      	mov	r4, r0
 80112e8:	460d      	mov	r5, r1
 80112ea:	d01b      	beq.n	8011324 <__ieee754_rem_pio2+0x8c>
 80112ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80115a0 <__ieee754_rem_pio2+0x308>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	f7ee ffd9 	bl	80002a8 <__aeabi_dsub>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	e9ca 2300 	strd	r2, r3, [sl]
 80112fe:	4620      	mov	r0, r4
 8011300:	4629      	mov	r1, r5
 8011302:	f7ee ffd1 	bl	80002a8 <__aeabi_dsub>
 8011306:	a3a6      	add	r3, pc, #664	; (adr r3, 80115a0 <__ieee754_rem_pio2+0x308>)
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	f7ee ffcc 	bl	80002a8 <__aeabi_dsub>
 8011310:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011314:	f04f 0b01 	mov.w	fp, #1
 8011318:	4658      	mov	r0, fp
 801131a:	b00b      	add	sp, #44	; 0x2c
 801131c:	ecbd 8b02 	vpop	{d8}
 8011320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011324:	a3a0      	add	r3, pc, #640	; (adr r3, 80115a8 <__ieee754_rem_pio2+0x310>)
 8011326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132a:	f7ee ffbd 	bl	80002a8 <__aeabi_dsub>
 801132e:	a3a0      	add	r3, pc, #640	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x318>)
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	4604      	mov	r4, r0
 8011336:	460d      	mov	r5, r1
 8011338:	f7ee ffb6 	bl	80002a8 <__aeabi_dsub>
 801133c:	4602      	mov	r2, r0
 801133e:	460b      	mov	r3, r1
 8011340:	e9ca 2300 	strd	r2, r3, [sl]
 8011344:	4620      	mov	r0, r4
 8011346:	4629      	mov	r1, r5
 8011348:	f7ee ffae 	bl	80002a8 <__aeabi_dsub>
 801134c:	a398      	add	r3, pc, #608	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x318>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	e7db      	b.n	801130c <__ieee754_rem_pio2+0x74>
 8011354:	f7ee ffaa 	bl	80002ac <__adddf3>
 8011358:	45b0      	cmp	r8, r6
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
 801135e:	d016      	beq.n	801138e <__ieee754_rem_pio2+0xf6>
 8011360:	a38f      	add	r3, pc, #572	; (adr r3, 80115a0 <__ieee754_rem_pio2+0x308>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ee ffa1 	bl	80002ac <__adddf3>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	e9ca 2300 	strd	r2, r3, [sl]
 8011372:	4620      	mov	r0, r4
 8011374:	4629      	mov	r1, r5
 8011376:	f7ee ff97 	bl	80002a8 <__aeabi_dsub>
 801137a:	a389      	add	r3, pc, #548	; (adr r3, 80115a0 <__ieee754_rem_pio2+0x308>)
 801137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011380:	f7ee ff94 	bl	80002ac <__adddf3>
 8011384:	f04f 3bff 	mov.w	fp, #4294967295
 8011388:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801138c:	e7c4      	b.n	8011318 <__ieee754_rem_pio2+0x80>
 801138e:	a386      	add	r3, pc, #536	; (adr r3, 80115a8 <__ieee754_rem_pio2+0x310>)
 8011390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011394:	f7ee ff8a 	bl	80002ac <__adddf3>
 8011398:	a385      	add	r3, pc, #532	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x318>)
 801139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139e:	4604      	mov	r4, r0
 80113a0:	460d      	mov	r5, r1
 80113a2:	f7ee ff83 	bl	80002ac <__adddf3>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	e9ca 2300 	strd	r2, r3, [sl]
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ee ff79 	bl	80002a8 <__aeabi_dsub>
 80113b6:	a37e      	add	r3, pc, #504	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x318>)
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	e7e0      	b.n	8011380 <__ieee754_rem_pio2+0xe8>
 80113be:	4b87      	ldr	r3, [pc, #540]	; (80115dc <__ieee754_rem_pio2+0x344>)
 80113c0:	4598      	cmp	r8, r3
 80113c2:	f300 80d9 	bgt.w	8011578 <__ieee754_rem_pio2+0x2e0>
 80113c6:	f7ff ff07 	bl	80111d8 <fabs>
 80113ca:	ec55 4b10 	vmov	r4, r5, d0
 80113ce:	ee10 0a10 	vmov	r0, s0
 80113d2:	a379      	add	r3, pc, #484	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x320>)
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	4629      	mov	r1, r5
 80113da:	f7ef f91d 	bl	8000618 <__aeabi_dmul>
 80113de:	4b80      	ldr	r3, [pc, #512]	; (80115e0 <__ieee754_rem_pio2+0x348>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	f7ee ff63 	bl	80002ac <__adddf3>
 80113e6:	f7ef fbc7 	bl	8000b78 <__aeabi_d2iz>
 80113ea:	4683      	mov	fp, r0
 80113ec:	f7ef f8aa 	bl	8000544 <__aeabi_i2d>
 80113f0:	4602      	mov	r2, r0
 80113f2:	460b      	mov	r3, r1
 80113f4:	ec43 2b18 	vmov	d8, r2, r3
 80113f8:	a367      	add	r3, pc, #412	; (adr r3, 8011598 <__ieee754_rem_pio2+0x300>)
 80113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fe:	f7ef f90b 	bl	8000618 <__aeabi_dmul>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	4620      	mov	r0, r4
 8011408:	4629      	mov	r1, r5
 801140a:	f7ee ff4d 	bl	80002a8 <__aeabi_dsub>
 801140e:	a364      	add	r3, pc, #400	; (adr r3, 80115a0 <__ieee754_rem_pio2+0x308>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	4606      	mov	r6, r0
 8011416:	460f      	mov	r7, r1
 8011418:	ec51 0b18 	vmov	r0, r1, d8
 801141c:	f7ef f8fc 	bl	8000618 <__aeabi_dmul>
 8011420:	f1bb 0f1f 	cmp.w	fp, #31
 8011424:	4604      	mov	r4, r0
 8011426:	460d      	mov	r5, r1
 8011428:	dc0d      	bgt.n	8011446 <__ieee754_rem_pio2+0x1ae>
 801142a:	4b6e      	ldr	r3, [pc, #440]	; (80115e4 <__ieee754_rem_pio2+0x34c>)
 801142c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011434:	4543      	cmp	r3, r8
 8011436:	d006      	beq.n	8011446 <__ieee754_rem_pio2+0x1ae>
 8011438:	4622      	mov	r2, r4
 801143a:	462b      	mov	r3, r5
 801143c:	4630      	mov	r0, r6
 801143e:	4639      	mov	r1, r7
 8011440:	f7ee ff32 	bl	80002a8 <__aeabi_dsub>
 8011444:	e00f      	b.n	8011466 <__ieee754_rem_pio2+0x1ce>
 8011446:	462b      	mov	r3, r5
 8011448:	4622      	mov	r2, r4
 801144a:	4630      	mov	r0, r6
 801144c:	4639      	mov	r1, r7
 801144e:	f7ee ff2b 	bl	80002a8 <__aeabi_dsub>
 8011452:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011456:	9303      	str	r3, [sp, #12]
 8011458:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801145c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011460:	f1b8 0f10 	cmp.w	r8, #16
 8011464:	dc02      	bgt.n	801146c <__ieee754_rem_pio2+0x1d4>
 8011466:	e9ca 0100 	strd	r0, r1, [sl]
 801146a:	e039      	b.n	80114e0 <__ieee754_rem_pio2+0x248>
 801146c:	a34e      	add	r3, pc, #312	; (adr r3, 80115a8 <__ieee754_rem_pio2+0x310>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	ec51 0b18 	vmov	r0, r1, d8
 8011476:	f7ef f8cf 	bl	8000618 <__aeabi_dmul>
 801147a:	4604      	mov	r4, r0
 801147c:	460d      	mov	r5, r1
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	4630      	mov	r0, r6
 8011484:	4639      	mov	r1, r7
 8011486:	f7ee ff0f 	bl	80002a8 <__aeabi_dsub>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4680      	mov	r8, r0
 8011490:	4689      	mov	r9, r1
 8011492:	4630      	mov	r0, r6
 8011494:	4639      	mov	r1, r7
 8011496:	f7ee ff07 	bl	80002a8 <__aeabi_dsub>
 801149a:	4622      	mov	r2, r4
 801149c:	462b      	mov	r3, r5
 801149e:	f7ee ff03 	bl	80002a8 <__aeabi_dsub>
 80114a2:	a343      	add	r3, pc, #268	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x318>)
 80114a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a8:	4604      	mov	r4, r0
 80114aa:	460d      	mov	r5, r1
 80114ac:	ec51 0b18 	vmov	r0, r1, d8
 80114b0:	f7ef f8b2 	bl	8000618 <__aeabi_dmul>
 80114b4:	4622      	mov	r2, r4
 80114b6:	462b      	mov	r3, r5
 80114b8:	f7ee fef6 	bl	80002a8 <__aeabi_dsub>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	4604      	mov	r4, r0
 80114c2:	460d      	mov	r5, r1
 80114c4:	4640      	mov	r0, r8
 80114c6:	4649      	mov	r1, r9
 80114c8:	f7ee feee 	bl	80002a8 <__aeabi_dsub>
 80114cc:	9a03      	ldr	r2, [sp, #12]
 80114ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	2b31      	cmp	r3, #49	; 0x31
 80114d6:	dc24      	bgt.n	8011522 <__ieee754_rem_pio2+0x28a>
 80114d8:	e9ca 0100 	strd	r0, r1, [sl]
 80114dc:	4646      	mov	r6, r8
 80114de:	464f      	mov	r7, r9
 80114e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80114e4:	4630      	mov	r0, r6
 80114e6:	4642      	mov	r2, r8
 80114e8:	464b      	mov	r3, r9
 80114ea:	4639      	mov	r1, r7
 80114ec:	f7ee fedc 	bl	80002a8 <__aeabi_dsub>
 80114f0:	462b      	mov	r3, r5
 80114f2:	4622      	mov	r2, r4
 80114f4:	f7ee fed8 	bl	80002a8 <__aeabi_dsub>
 80114f8:	9b02      	ldr	r3, [sp, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011500:	f6bf af0a 	bge.w	8011318 <__ieee754_rem_pio2+0x80>
 8011504:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011508:	f8ca 3004 	str.w	r3, [sl, #4]
 801150c:	f8ca 8000 	str.w	r8, [sl]
 8011510:	f8ca 0008 	str.w	r0, [sl, #8]
 8011514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011518:	f8ca 300c 	str.w	r3, [sl, #12]
 801151c:	f1cb 0b00 	rsb	fp, fp, #0
 8011520:	e6fa      	b.n	8011318 <__ieee754_rem_pio2+0x80>
 8011522:	a327      	add	r3, pc, #156	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x328>)
 8011524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011528:	ec51 0b18 	vmov	r0, r1, d8
 801152c:	f7ef f874 	bl	8000618 <__aeabi_dmul>
 8011530:	4604      	mov	r4, r0
 8011532:	460d      	mov	r5, r1
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	4640      	mov	r0, r8
 801153a:	4649      	mov	r1, r9
 801153c:	f7ee feb4 	bl	80002a8 <__aeabi_dsub>
 8011540:	4602      	mov	r2, r0
 8011542:	460b      	mov	r3, r1
 8011544:	4606      	mov	r6, r0
 8011546:	460f      	mov	r7, r1
 8011548:	4640      	mov	r0, r8
 801154a:	4649      	mov	r1, r9
 801154c:	f7ee feac 	bl	80002a8 <__aeabi_dsub>
 8011550:	4622      	mov	r2, r4
 8011552:	462b      	mov	r3, r5
 8011554:	f7ee fea8 	bl	80002a8 <__aeabi_dsub>
 8011558:	a31b      	add	r3, pc, #108	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x330>)
 801155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155e:	4604      	mov	r4, r0
 8011560:	460d      	mov	r5, r1
 8011562:	ec51 0b18 	vmov	r0, r1, d8
 8011566:	f7ef f857 	bl	8000618 <__aeabi_dmul>
 801156a:	4622      	mov	r2, r4
 801156c:	462b      	mov	r3, r5
 801156e:	f7ee fe9b 	bl	80002a8 <__aeabi_dsub>
 8011572:	4604      	mov	r4, r0
 8011574:	460d      	mov	r5, r1
 8011576:	e75f      	b.n	8011438 <__ieee754_rem_pio2+0x1a0>
 8011578:	4b1b      	ldr	r3, [pc, #108]	; (80115e8 <__ieee754_rem_pio2+0x350>)
 801157a:	4598      	cmp	r8, r3
 801157c:	dd36      	ble.n	80115ec <__ieee754_rem_pio2+0x354>
 801157e:	ee10 2a10 	vmov	r2, s0
 8011582:	462b      	mov	r3, r5
 8011584:	4620      	mov	r0, r4
 8011586:	4629      	mov	r1, r5
 8011588:	f7ee fe8e 	bl	80002a8 <__aeabi_dsub>
 801158c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011590:	e9ca 0100 	strd	r0, r1, [sl]
 8011594:	e694      	b.n	80112c0 <__ieee754_rem_pio2+0x28>
 8011596:	bf00      	nop
 8011598:	54400000 	.word	0x54400000
 801159c:	3ff921fb 	.word	0x3ff921fb
 80115a0:	1a626331 	.word	0x1a626331
 80115a4:	3dd0b461 	.word	0x3dd0b461
 80115a8:	1a600000 	.word	0x1a600000
 80115ac:	3dd0b461 	.word	0x3dd0b461
 80115b0:	2e037073 	.word	0x2e037073
 80115b4:	3ba3198a 	.word	0x3ba3198a
 80115b8:	6dc9c883 	.word	0x6dc9c883
 80115bc:	3fe45f30 	.word	0x3fe45f30
 80115c0:	2e000000 	.word	0x2e000000
 80115c4:	3ba3198a 	.word	0x3ba3198a
 80115c8:	252049c1 	.word	0x252049c1
 80115cc:	397b839a 	.word	0x397b839a
 80115d0:	3fe921fb 	.word	0x3fe921fb
 80115d4:	4002d97b 	.word	0x4002d97b
 80115d8:	3ff921fb 	.word	0x3ff921fb
 80115dc:	413921fb 	.word	0x413921fb
 80115e0:	3fe00000 	.word	0x3fe00000
 80115e4:	08015374 	.word	0x08015374
 80115e8:	7fefffff 	.word	0x7fefffff
 80115ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80115f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80115f4:	ee10 0a10 	vmov	r0, s0
 80115f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80115fc:	ee10 6a10 	vmov	r6, s0
 8011600:	460f      	mov	r7, r1
 8011602:	f7ef fab9 	bl	8000b78 <__aeabi_d2iz>
 8011606:	f7ee ff9d 	bl	8000544 <__aeabi_i2d>
 801160a:	4602      	mov	r2, r0
 801160c:	460b      	mov	r3, r1
 801160e:	4630      	mov	r0, r6
 8011610:	4639      	mov	r1, r7
 8011612:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011616:	f7ee fe47 	bl	80002a8 <__aeabi_dsub>
 801161a:	4b22      	ldr	r3, [pc, #136]	; (80116a4 <__ieee754_rem_pio2+0x40c>)
 801161c:	2200      	movs	r2, #0
 801161e:	f7ee fffb 	bl	8000618 <__aeabi_dmul>
 8011622:	460f      	mov	r7, r1
 8011624:	4606      	mov	r6, r0
 8011626:	f7ef faa7 	bl	8000b78 <__aeabi_d2iz>
 801162a:	f7ee ff8b 	bl	8000544 <__aeabi_i2d>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	4630      	mov	r0, r6
 8011634:	4639      	mov	r1, r7
 8011636:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801163a:	f7ee fe35 	bl	80002a8 <__aeabi_dsub>
 801163e:	4b19      	ldr	r3, [pc, #100]	; (80116a4 <__ieee754_rem_pio2+0x40c>)
 8011640:	2200      	movs	r2, #0
 8011642:	f7ee ffe9 	bl	8000618 <__aeabi_dmul>
 8011646:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801164a:	ad04      	add	r5, sp, #16
 801164c:	f04f 0803 	mov.w	r8, #3
 8011650:	46a9      	mov	r9, r5
 8011652:	2600      	movs	r6, #0
 8011654:	2700      	movs	r7, #0
 8011656:	4632      	mov	r2, r6
 8011658:	463b      	mov	r3, r7
 801165a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801165e:	46c3      	mov	fp, r8
 8011660:	3d08      	subs	r5, #8
 8011662:	f108 38ff 	add.w	r8, r8, #4294967295
 8011666:	f7ef fa3f 	bl	8000ae8 <__aeabi_dcmpeq>
 801166a:	2800      	cmp	r0, #0
 801166c:	d1f3      	bne.n	8011656 <__ieee754_rem_pio2+0x3be>
 801166e:	4b0e      	ldr	r3, [pc, #56]	; (80116a8 <__ieee754_rem_pio2+0x410>)
 8011670:	9301      	str	r3, [sp, #4]
 8011672:	2302      	movs	r3, #2
 8011674:	9300      	str	r3, [sp, #0]
 8011676:	4622      	mov	r2, r4
 8011678:	465b      	mov	r3, fp
 801167a:	4651      	mov	r1, sl
 801167c:	4648      	mov	r0, r9
 801167e:	f000 f8df 	bl	8011840 <__kernel_rem_pio2>
 8011682:	9b02      	ldr	r3, [sp, #8]
 8011684:	2b00      	cmp	r3, #0
 8011686:	4683      	mov	fp, r0
 8011688:	f6bf ae46 	bge.w	8011318 <__ieee754_rem_pio2+0x80>
 801168c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011690:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011694:	f8ca 3004 	str.w	r3, [sl, #4]
 8011698:	f8da 300c 	ldr.w	r3, [sl, #12]
 801169c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116a0:	e73a      	b.n	8011518 <__ieee754_rem_pio2+0x280>
 80116a2:	bf00      	nop
 80116a4:	41700000 	.word	0x41700000
 80116a8:	080153f4 	.word	0x080153f4
 80116ac:	00000000 	.word	0x00000000

080116b0 <__kernel_cos>:
 80116b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	ec57 6b10 	vmov	r6, r7, d0
 80116b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80116bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80116c0:	ed8d 1b00 	vstr	d1, [sp]
 80116c4:	da07      	bge.n	80116d6 <__kernel_cos+0x26>
 80116c6:	ee10 0a10 	vmov	r0, s0
 80116ca:	4639      	mov	r1, r7
 80116cc:	f7ef fa54 	bl	8000b78 <__aeabi_d2iz>
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f000 8088 	beq.w	80117e6 <__kernel_cos+0x136>
 80116d6:	4632      	mov	r2, r6
 80116d8:	463b      	mov	r3, r7
 80116da:	4630      	mov	r0, r6
 80116dc:	4639      	mov	r1, r7
 80116de:	f7ee ff9b 	bl	8000618 <__aeabi_dmul>
 80116e2:	4b51      	ldr	r3, [pc, #324]	; (8011828 <__kernel_cos+0x178>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	4604      	mov	r4, r0
 80116e8:	460d      	mov	r5, r1
 80116ea:	f7ee ff95 	bl	8000618 <__aeabi_dmul>
 80116ee:	a340      	add	r3, pc, #256	; (adr r3, 80117f0 <__kernel_cos+0x140>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	4682      	mov	sl, r0
 80116f6:	468b      	mov	fp, r1
 80116f8:	4620      	mov	r0, r4
 80116fa:	4629      	mov	r1, r5
 80116fc:	f7ee ff8c 	bl	8000618 <__aeabi_dmul>
 8011700:	a33d      	add	r3, pc, #244	; (adr r3, 80117f8 <__kernel_cos+0x148>)
 8011702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011706:	f7ee fdd1 	bl	80002ac <__adddf3>
 801170a:	4622      	mov	r2, r4
 801170c:	462b      	mov	r3, r5
 801170e:	f7ee ff83 	bl	8000618 <__aeabi_dmul>
 8011712:	a33b      	add	r3, pc, #236	; (adr r3, 8011800 <__kernel_cos+0x150>)
 8011714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011718:	f7ee fdc6 	bl	80002a8 <__aeabi_dsub>
 801171c:	4622      	mov	r2, r4
 801171e:	462b      	mov	r3, r5
 8011720:	f7ee ff7a 	bl	8000618 <__aeabi_dmul>
 8011724:	a338      	add	r3, pc, #224	; (adr r3, 8011808 <__kernel_cos+0x158>)
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	f7ee fdbf 	bl	80002ac <__adddf3>
 801172e:	4622      	mov	r2, r4
 8011730:	462b      	mov	r3, r5
 8011732:	f7ee ff71 	bl	8000618 <__aeabi_dmul>
 8011736:	a336      	add	r3, pc, #216	; (adr r3, 8011810 <__kernel_cos+0x160>)
 8011738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173c:	f7ee fdb4 	bl	80002a8 <__aeabi_dsub>
 8011740:	4622      	mov	r2, r4
 8011742:	462b      	mov	r3, r5
 8011744:	f7ee ff68 	bl	8000618 <__aeabi_dmul>
 8011748:	a333      	add	r3, pc, #204	; (adr r3, 8011818 <__kernel_cos+0x168>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	f7ee fdad 	bl	80002ac <__adddf3>
 8011752:	4622      	mov	r2, r4
 8011754:	462b      	mov	r3, r5
 8011756:	f7ee ff5f 	bl	8000618 <__aeabi_dmul>
 801175a:	4622      	mov	r2, r4
 801175c:	462b      	mov	r3, r5
 801175e:	f7ee ff5b 	bl	8000618 <__aeabi_dmul>
 8011762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011766:	4604      	mov	r4, r0
 8011768:	460d      	mov	r5, r1
 801176a:	4630      	mov	r0, r6
 801176c:	4639      	mov	r1, r7
 801176e:	f7ee ff53 	bl	8000618 <__aeabi_dmul>
 8011772:	460b      	mov	r3, r1
 8011774:	4602      	mov	r2, r0
 8011776:	4629      	mov	r1, r5
 8011778:	4620      	mov	r0, r4
 801177a:	f7ee fd95 	bl	80002a8 <__aeabi_dsub>
 801177e:	4b2b      	ldr	r3, [pc, #172]	; (801182c <__kernel_cos+0x17c>)
 8011780:	4598      	cmp	r8, r3
 8011782:	4606      	mov	r6, r0
 8011784:	460f      	mov	r7, r1
 8011786:	dc10      	bgt.n	80117aa <__kernel_cos+0xfa>
 8011788:	4602      	mov	r2, r0
 801178a:	460b      	mov	r3, r1
 801178c:	4650      	mov	r0, sl
 801178e:	4659      	mov	r1, fp
 8011790:	f7ee fd8a 	bl	80002a8 <__aeabi_dsub>
 8011794:	460b      	mov	r3, r1
 8011796:	4926      	ldr	r1, [pc, #152]	; (8011830 <__kernel_cos+0x180>)
 8011798:	4602      	mov	r2, r0
 801179a:	2000      	movs	r0, #0
 801179c:	f7ee fd84 	bl	80002a8 <__aeabi_dsub>
 80117a0:	ec41 0b10 	vmov	d0, r0, r1
 80117a4:	b003      	add	sp, #12
 80117a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117aa:	4b22      	ldr	r3, [pc, #136]	; (8011834 <__kernel_cos+0x184>)
 80117ac:	4920      	ldr	r1, [pc, #128]	; (8011830 <__kernel_cos+0x180>)
 80117ae:	4598      	cmp	r8, r3
 80117b0:	bfcc      	ite	gt
 80117b2:	4d21      	ldrgt	r5, [pc, #132]	; (8011838 <__kernel_cos+0x188>)
 80117b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80117b8:	2400      	movs	r4, #0
 80117ba:	4622      	mov	r2, r4
 80117bc:	462b      	mov	r3, r5
 80117be:	2000      	movs	r0, #0
 80117c0:	f7ee fd72 	bl	80002a8 <__aeabi_dsub>
 80117c4:	4622      	mov	r2, r4
 80117c6:	4680      	mov	r8, r0
 80117c8:	4689      	mov	r9, r1
 80117ca:	462b      	mov	r3, r5
 80117cc:	4650      	mov	r0, sl
 80117ce:	4659      	mov	r1, fp
 80117d0:	f7ee fd6a 	bl	80002a8 <__aeabi_dsub>
 80117d4:	4632      	mov	r2, r6
 80117d6:	463b      	mov	r3, r7
 80117d8:	f7ee fd66 	bl	80002a8 <__aeabi_dsub>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	4640      	mov	r0, r8
 80117e2:	4649      	mov	r1, r9
 80117e4:	e7da      	b.n	801179c <__kernel_cos+0xec>
 80117e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011820 <__kernel_cos+0x170>
 80117ea:	e7db      	b.n	80117a4 <__kernel_cos+0xf4>
 80117ec:	f3af 8000 	nop.w
 80117f0:	be8838d4 	.word	0xbe8838d4
 80117f4:	bda8fae9 	.word	0xbda8fae9
 80117f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80117fc:	3e21ee9e 	.word	0x3e21ee9e
 8011800:	809c52ad 	.word	0x809c52ad
 8011804:	3e927e4f 	.word	0x3e927e4f
 8011808:	19cb1590 	.word	0x19cb1590
 801180c:	3efa01a0 	.word	0x3efa01a0
 8011810:	16c15177 	.word	0x16c15177
 8011814:	3f56c16c 	.word	0x3f56c16c
 8011818:	5555554c 	.word	0x5555554c
 801181c:	3fa55555 	.word	0x3fa55555
 8011820:	00000000 	.word	0x00000000
 8011824:	3ff00000 	.word	0x3ff00000
 8011828:	3fe00000 	.word	0x3fe00000
 801182c:	3fd33332 	.word	0x3fd33332
 8011830:	3ff00000 	.word	0x3ff00000
 8011834:	3fe90000 	.word	0x3fe90000
 8011838:	3fd20000 	.word	0x3fd20000
 801183c:	00000000 	.word	0x00000000

08011840 <__kernel_rem_pio2>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	ed2d 8b02 	vpush	{d8}
 8011848:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801184c:	f112 0f14 	cmn.w	r2, #20
 8011850:	9308      	str	r3, [sp, #32]
 8011852:	9101      	str	r1, [sp, #4]
 8011854:	4bc6      	ldr	r3, [pc, #792]	; (8011b70 <__kernel_rem_pio2+0x330>)
 8011856:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011858:	9009      	str	r0, [sp, #36]	; 0x24
 801185a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801185e:	9304      	str	r3, [sp, #16]
 8011860:	9b08      	ldr	r3, [sp, #32]
 8011862:	f103 33ff 	add.w	r3, r3, #4294967295
 8011866:	bfa8      	it	ge
 8011868:	1ed4      	subge	r4, r2, #3
 801186a:	9306      	str	r3, [sp, #24]
 801186c:	bfb2      	itee	lt
 801186e:	2400      	movlt	r4, #0
 8011870:	2318      	movge	r3, #24
 8011872:	fb94 f4f3 	sdivge	r4, r4, r3
 8011876:	f06f 0317 	mvn.w	r3, #23
 801187a:	fb04 3303 	mla	r3, r4, r3, r3
 801187e:	eb03 0a02 	add.w	sl, r3, r2
 8011882:	9b04      	ldr	r3, [sp, #16]
 8011884:	9a06      	ldr	r2, [sp, #24]
 8011886:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011b60 <__kernel_rem_pio2+0x320>
 801188a:	eb03 0802 	add.w	r8, r3, r2
 801188e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011890:	1aa7      	subs	r7, r4, r2
 8011892:	ae20      	add	r6, sp, #128	; 0x80
 8011894:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011898:	2500      	movs	r5, #0
 801189a:	4545      	cmp	r5, r8
 801189c:	dd18      	ble.n	80118d0 <__kernel_rem_pio2+0x90>
 801189e:	9b08      	ldr	r3, [sp, #32]
 80118a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80118a4:	aa20      	add	r2, sp, #128	; 0x80
 80118a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8011b60 <__kernel_rem_pio2+0x320>
 80118aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80118ae:	f1c3 0301 	rsb	r3, r3, #1
 80118b2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80118b6:	9307      	str	r3, [sp, #28]
 80118b8:	9b07      	ldr	r3, [sp, #28]
 80118ba:	9a04      	ldr	r2, [sp, #16]
 80118bc:	4443      	add	r3, r8
 80118be:	429a      	cmp	r2, r3
 80118c0:	db2f      	blt.n	8011922 <__kernel_rem_pio2+0xe2>
 80118c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80118c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80118ca:	462f      	mov	r7, r5
 80118cc:	2600      	movs	r6, #0
 80118ce:	e01b      	b.n	8011908 <__kernel_rem_pio2+0xc8>
 80118d0:	42ef      	cmn	r7, r5
 80118d2:	d407      	bmi.n	80118e4 <__kernel_rem_pio2+0xa4>
 80118d4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80118d8:	f7ee fe34 	bl	8000544 <__aeabi_i2d>
 80118dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80118e0:	3501      	adds	r5, #1
 80118e2:	e7da      	b.n	801189a <__kernel_rem_pio2+0x5a>
 80118e4:	ec51 0b18 	vmov	r0, r1, d8
 80118e8:	e7f8      	b.n	80118dc <__kernel_rem_pio2+0x9c>
 80118ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118ee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80118f2:	f7ee fe91 	bl	8000618 <__aeabi_dmul>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118fe:	f7ee fcd5 	bl	80002ac <__adddf3>
 8011902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011906:	3601      	adds	r6, #1
 8011908:	9b06      	ldr	r3, [sp, #24]
 801190a:	429e      	cmp	r6, r3
 801190c:	f1a7 0708 	sub.w	r7, r7, #8
 8011910:	ddeb      	ble.n	80118ea <__kernel_rem_pio2+0xaa>
 8011912:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011916:	3508      	adds	r5, #8
 8011918:	ecab 7b02 	vstmia	fp!, {d7}
 801191c:	f108 0801 	add.w	r8, r8, #1
 8011920:	e7ca      	b.n	80118b8 <__kernel_rem_pio2+0x78>
 8011922:	9b04      	ldr	r3, [sp, #16]
 8011924:	aa0c      	add	r2, sp, #48	; 0x30
 8011926:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801192a:	930b      	str	r3, [sp, #44]	; 0x2c
 801192c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801192e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011932:	9c04      	ldr	r4, [sp, #16]
 8011934:	930a      	str	r3, [sp, #40]	; 0x28
 8011936:	ab98      	add	r3, sp, #608	; 0x260
 8011938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801193c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011940:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8011944:	f8cd b008 	str.w	fp, [sp, #8]
 8011948:	4625      	mov	r5, r4
 801194a:	2d00      	cmp	r5, #0
 801194c:	dc78      	bgt.n	8011a40 <__kernel_rem_pio2+0x200>
 801194e:	ec47 6b10 	vmov	d0, r6, r7
 8011952:	4650      	mov	r0, sl
 8011954:	f000 fbf4 	bl	8012140 <scalbn>
 8011958:	ec57 6b10 	vmov	r6, r7, d0
 801195c:	2200      	movs	r2, #0
 801195e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011962:	ee10 0a10 	vmov	r0, s0
 8011966:	4639      	mov	r1, r7
 8011968:	f7ee fe56 	bl	8000618 <__aeabi_dmul>
 801196c:	ec41 0b10 	vmov	d0, r0, r1
 8011970:	f000 fb66 	bl	8012040 <floor>
 8011974:	4b7f      	ldr	r3, [pc, #508]	; (8011b74 <__kernel_rem_pio2+0x334>)
 8011976:	ec51 0b10 	vmov	r0, r1, d0
 801197a:	2200      	movs	r2, #0
 801197c:	f7ee fe4c 	bl	8000618 <__aeabi_dmul>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	4630      	mov	r0, r6
 8011986:	4639      	mov	r1, r7
 8011988:	f7ee fc8e 	bl	80002a8 <__aeabi_dsub>
 801198c:	460f      	mov	r7, r1
 801198e:	4606      	mov	r6, r0
 8011990:	f7ef f8f2 	bl	8000b78 <__aeabi_d2iz>
 8011994:	9007      	str	r0, [sp, #28]
 8011996:	f7ee fdd5 	bl	8000544 <__aeabi_i2d>
 801199a:	4602      	mov	r2, r0
 801199c:	460b      	mov	r3, r1
 801199e:	4630      	mov	r0, r6
 80119a0:	4639      	mov	r1, r7
 80119a2:	f7ee fc81 	bl	80002a8 <__aeabi_dsub>
 80119a6:	f1ba 0f00 	cmp.w	sl, #0
 80119aa:	4606      	mov	r6, r0
 80119ac:	460f      	mov	r7, r1
 80119ae:	dd70      	ble.n	8011a92 <__kernel_rem_pio2+0x252>
 80119b0:	1e62      	subs	r2, r4, #1
 80119b2:	ab0c      	add	r3, sp, #48	; 0x30
 80119b4:	9d07      	ldr	r5, [sp, #28]
 80119b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80119ba:	f1ca 0118 	rsb	r1, sl, #24
 80119be:	fa40 f301 	asr.w	r3, r0, r1
 80119c2:	441d      	add	r5, r3
 80119c4:	408b      	lsls	r3, r1
 80119c6:	1ac0      	subs	r0, r0, r3
 80119c8:	ab0c      	add	r3, sp, #48	; 0x30
 80119ca:	9507      	str	r5, [sp, #28]
 80119cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80119d0:	f1ca 0317 	rsb	r3, sl, #23
 80119d4:	fa40 f303 	asr.w	r3, r0, r3
 80119d8:	9302      	str	r3, [sp, #8]
 80119da:	9b02      	ldr	r3, [sp, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dd66      	ble.n	8011aae <__kernel_rem_pio2+0x26e>
 80119e0:	9b07      	ldr	r3, [sp, #28]
 80119e2:	2200      	movs	r2, #0
 80119e4:	3301      	adds	r3, #1
 80119e6:	9307      	str	r3, [sp, #28]
 80119e8:	4615      	mov	r5, r2
 80119ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80119ee:	4294      	cmp	r4, r2
 80119f0:	f300 8099 	bgt.w	8011b26 <__kernel_rem_pio2+0x2e6>
 80119f4:	f1ba 0f00 	cmp.w	sl, #0
 80119f8:	dd07      	ble.n	8011a0a <__kernel_rem_pio2+0x1ca>
 80119fa:	f1ba 0f01 	cmp.w	sl, #1
 80119fe:	f000 80a5 	beq.w	8011b4c <__kernel_rem_pio2+0x30c>
 8011a02:	f1ba 0f02 	cmp.w	sl, #2
 8011a06:	f000 80c1 	beq.w	8011b8c <__kernel_rem_pio2+0x34c>
 8011a0a:	9b02      	ldr	r3, [sp, #8]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d14e      	bne.n	8011aae <__kernel_rem_pio2+0x26e>
 8011a10:	4632      	mov	r2, r6
 8011a12:	463b      	mov	r3, r7
 8011a14:	4958      	ldr	r1, [pc, #352]	; (8011b78 <__kernel_rem_pio2+0x338>)
 8011a16:	2000      	movs	r0, #0
 8011a18:	f7ee fc46 	bl	80002a8 <__aeabi_dsub>
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	460f      	mov	r7, r1
 8011a20:	2d00      	cmp	r5, #0
 8011a22:	d044      	beq.n	8011aae <__kernel_rem_pio2+0x26e>
 8011a24:	4650      	mov	r0, sl
 8011a26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011b68 <__kernel_rem_pio2+0x328>
 8011a2a:	f000 fb89 	bl	8012140 <scalbn>
 8011a2e:	4630      	mov	r0, r6
 8011a30:	4639      	mov	r1, r7
 8011a32:	ec53 2b10 	vmov	r2, r3, d0
 8011a36:	f7ee fc37 	bl	80002a8 <__aeabi_dsub>
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	e036      	b.n	8011aae <__kernel_rem_pio2+0x26e>
 8011a40:	4b4e      	ldr	r3, [pc, #312]	; (8011b7c <__kernel_rem_pio2+0x33c>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	4630      	mov	r0, r6
 8011a46:	4639      	mov	r1, r7
 8011a48:	f7ee fde6 	bl	8000618 <__aeabi_dmul>
 8011a4c:	f7ef f894 	bl	8000b78 <__aeabi_d2iz>
 8011a50:	f7ee fd78 	bl	8000544 <__aeabi_i2d>
 8011a54:	4b4a      	ldr	r3, [pc, #296]	; (8011b80 <__kernel_rem_pio2+0x340>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	4680      	mov	r8, r0
 8011a5a:	4689      	mov	r9, r1
 8011a5c:	f7ee fddc 	bl	8000618 <__aeabi_dmul>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4630      	mov	r0, r6
 8011a66:	4639      	mov	r1, r7
 8011a68:	f7ee fc1e 	bl	80002a8 <__aeabi_dsub>
 8011a6c:	f7ef f884 	bl	8000b78 <__aeabi_d2iz>
 8011a70:	9b02      	ldr	r3, [sp, #8]
 8011a72:	f843 0b04 	str.w	r0, [r3], #4
 8011a76:	3d01      	subs	r5, #1
 8011a78:	9302      	str	r3, [sp, #8]
 8011a7a:	ab70      	add	r3, sp, #448	; 0x1c0
 8011a7c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a84:	4640      	mov	r0, r8
 8011a86:	4649      	mov	r1, r9
 8011a88:	f7ee fc10 	bl	80002ac <__adddf3>
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	460f      	mov	r7, r1
 8011a90:	e75b      	b.n	801194a <__kernel_rem_pio2+0x10a>
 8011a92:	d105      	bne.n	8011aa0 <__kernel_rem_pio2+0x260>
 8011a94:	1e63      	subs	r3, r4, #1
 8011a96:	aa0c      	add	r2, sp, #48	; 0x30
 8011a98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a9c:	15c3      	asrs	r3, r0, #23
 8011a9e:	e79b      	b.n	80119d8 <__kernel_rem_pio2+0x198>
 8011aa0:	4b38      	ldr	r3, [pc, #224]	; (8011b84 <__kernel_rem_pio2+0x344>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f7ef f83e 	bl	8000b24 <__aeabi_dcmpge>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d139      	bne.n	8011b20 <__kernel_rem_pio2+0x2e0>
 8011aac:	9002      	str	r0, [sp, #8]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	4630      	mov	r0, r6
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	f7ef f817 	bl	8000ae8 <__aeabi_dcmpeq>
 8011aba:	2800      	cmp	r0, #0
 8011abc:	f000 80b4 	beq.w	8011c28 <__kernel_rem_pio2+0x3e8>
 8011ac0:	f104 3bff 	add.w	fp, r4, #4294967295
 8011ac4:	465b      	mov	r3, fp
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	9904      	ldr	r1, [sp, #16]
 8011aca:	428b      	cmp	r3, r1
 8011acc:	da65      	bge.n	8011b9a <__kernel_rem_pio2+0x35a>
 8011ace:	2a00      	cmp	r2, #0
 8011ad0:	d07b      	beq.n	8011bca <__kernel_rem_pio2+0x38a>
 8011ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8011ad4:	f1aa 0a18 	sub.w	sl, sl, #24
 8011ad8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 80a0 	beq.w	8011c22 <__kernel_rem_pio2+0x3e2>
 8011ae2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011b68 <__kernel_rem_pio2+0x328>
 8011ae6:	4650      	mov	r0, sl
 8011ae8:	f000 fb2a 	bl	8012140 <scalbn>
 8011aec:	4f23      	ldr	r7, [pc, #140]	; (8011b7c <__kernel_rem_pio2+0x33c>)
 8011aee:	ec55 4b10 	vmov	r4, r5, d0
 8011af2:	46d8      	mov	r8, fp
 8011af4:	2600      	movs	r6, #0
 8011af6:	f1b8 0f00 	cmp.w	r8, #0
 8011afa:	f280 80cf 	bge.w	8011c9c <__kernel_rem_pio2+0x45c>
 8011afe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8011b60 <__kernel_rem_pio2+0x320>
 8011b02:	465f      	mov	r7, fp
 8011b04:	f04f 0800 	mov.w	r8, #0
 8011b08:	2f00      	cmp	r7, #0
 8011b0a:	f2c0 80fd 	blt.w	8011d08 <__kernel_rem_pio2+0x4c8>
 8011b0e:	ab70      	add	r3, sp, #448	; 0x1c0
 8011b10:	f8df a074 	ldr.w	sl, [pc, #116]	; 8011b88 <__kernel_rem_pio2+0x348>
 8011b14:	ec55 4b18 	vmov	r4, r5, d8
 8011b18:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8011b1c:	2600      	movs	r6, #0
 8011b1e:	e0e5      	b.n	8011cec <__kernel_rem_pio2+0x4ac>
 8011b20:	2302      	movs	r3, #2
 8011b22:	9302      	str	r3, [sp, #8]
 8011b24:	e75c      	b.n	80119e0 <__kernel_rem_pio2+0x1a0>
 8011b26:	f8db 3000 	ldr.w	r3, [fp]
 8011b2a:	b955      	cbnz	r5, 8011b42 <__kernel_rem_pio2+0x302>
 8011b2c:	b123      	cbz	r3, 8011b38 <__kernel_rem_pio2+0x2f8>
 8011b2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011b32:	f8cb 3000 	str.w	r3, [fp]
 8011b36:	2301      	movs	r3, #1
 8011b38:	3201      	adds	r2, #1
 8011b3a:	f10b 0b04 	add.w	fp, fp, #4
 8011b3e:	461d      	mov	r5, r3
 8011b40:	e755      	b.n	80119ee <__kernel_rem_pio2+0x1ae>
 8011b42:	1acb      	subs	r3, r1, r3
 8011b44:	f8cb 3000 	str.w	r3, [fp]
 8011b48:	462b      	mov	r3, r5
 8011b4a:	e7f5      	b.n	8011b38 <__kernel_rem_pio2+0x2f8>
 8011b4c:	1e62      	subs	r2, r4, #1
 8011b4e:	ab0c      	add	r3, sp, #48	; 0x30
 8011b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b58:	a90c      	add	r1, sp, #48	; 0x30
 8011b5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b5e:	e754      	b.n	8011a0a <__kernel_rem_pio2+0x1ca>
	...
 8011b6c:	3ff00000 	.word	0x3ff00000
 8011b70:	08015540 	.word	0x08015540
 8011b74:	40200000 	.word	0x40200000
 8011b78:	3ff00000 	.word	0x3ff00000
 8011b7c:	3e700000 	.word	0x3e700000
 8011b80:	41700000 	.word	0x41700000
 8011b84:	3fe00000 	.word	0x3fe00000
 8011b88:	08015500 	.word	0x08015500
 8011b8c:	1e62      	subs	r2, r4, #1
 8011b8e:	ab0c      	add	r3, sp, #48	; 0x30
 8011b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b98:	e7de      	b.n	8011b58 <__kernel_rem_pio2+0x318>
 8011b9a:	a90c      	add	r1, sp, #48	; 0x30
 8011b9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	430a      	orrs	r2, r1
 8011ba4:	e790      	b.n	8011ac8 <__kernel_rem_pio2+0x288>
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011bac:	2900      	cmp	r1, #0
 8011bae:	d0fa      	beq.n	8011ba6 <__kernel_rem_pio2+0x366>
 8011bb0:	9a08      	ldr	r2, [sp, #32]
 8011bb2:	18e3      	adds	r3, r4, r3
 8011bb4:	18a6      	adds	r6, r4, r2
 8011bb6:	aa20      	add	r2, sp, #128	; 0x80
 8011bb8:	1c65      	adds	r5, r4, #1
 8011bba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011bbe:	9302      	str	r3, [sp, #8]
 8011bc0:	9b02      	ldr	r3, [sp, #8]
 8011bc2:	42ab      	cmp	r3, r5
 8011bc4:	da04      	bge.n	8011bd0 <__kernel_rem_pio2+0x390>
 8011bc6:	461c      	mov	r4, r3
 8011bc8:	e6b5      	b.n	8011936 <__kernel_rem_pio2+0xf6>
 8011bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bcc:	2301      	movs	r3, #1
 8011bce:	e7eb      	b.n	8011ba8 <__kernel_rem_pio2+0x368>
 8011bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011bd6:	f7ee fcb5 	bl	8000544 <__aeabi_i2d>
 8011bda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011be0:	46b3      	mov	fp, r6
 8011be2:	461c      	mov	r4, r3
 8011be4:	2700      	movs	r7, #0
 8011be6:	f04f 0800 	mov.w	r8, #0
 8011bea:	f04f 0900 	mov.w	r9, #0
 8011bee:	9b06      	ldr	r3, [sp, #24]
 8011bf0:	429f      	cmp	r7, r3
 8011bf2:	dd06      	ble.n	8011c02 <__kernel_rem_pio2+0x3c2>
 8011bf4:	ab70      	add	r3, sp, #448	; 0x1c0
 8011bf6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011bfa:	e9c3 8900 	strd	r8, r9, [r3]
 8011bfe:	3501      	adds	r5, #1
 8011c00:	e7de      	b.n	8011bc0 <__kernel_rem_pio2+0x380>
 8011c02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011c06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011c0a:	f7ee fd05 	bl	8000618 <__aeabi_dmul>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	4640      	mov	r0, r8
 8011c14:	4649      	mov	r1, r9
 8011c16:	f7ee fb49 	bl	80002ac <__adddf3>
 8011c1a:	3701      	adds	r7, #1
 8011c1c:	4680      	mov	r8, r0
 8011c1e:	4689      	mov	r9, r1
 8011c20:	e7e5      	b.n	8011bee <__kernel_rem_pio2+0x3ae>
 8011c22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c26:	e754      	b.n	8011ad2 <__kernel_rem_pio2+0x292>
 8011c28:	ec47 6b10 	vmov	d0, r6, r7
 8011c2c:	f1ca 0000 	rsb	r0, sl, #0
 8011c30:	f000 fa86 	bl	8012140 <scalbn>
 8011c34:	ec57 6b10 	vmov	r6, r7, d0
 8011c38:	4b9f      	ldr	r3, [pc, #636]	; (8011eb8 <__kernel_rem_pio2+0x678>)
 8011c3a:	ee10 0a10 	vmov	r0, s0
 8011c3e:	2200      	movs	r2, #0
 8011c40:	4639      	mov	r1, r7
 8011c42:	f7ee ff6f 	bl	8000b24 <__aeabi_dcmpge>
 8011c46:	b300      	cbz	r0, 8011c8a <__kernel_rem_pio2+0x44a>
 8011c48:	4b9c      	ldr	r3, [pc, #624]	; (8011ebc <__kernel_rem_pio2+0x67c>)
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	4630      	mov	r0, r6
 8011c4e:	4639      	mov	r1, r7
 8011c50:	f7ee fce2 	bl	8000618 <__aeabi_dmul>
 8011c54:	f7ee ff90 	bl	8000b78 <__aeabi_d2iz>
 8011c58:	4605      	mov	r5, r0
 8011c5a:	f7ee fc73 	bl	8000544 <__aeabi_i2d>
 8011c5e:	4b96      	ldr	r3, [pc, #600]	; (8011eb8 <__kernel_rem_pio2+0x678>)
 8011c60:	2200      	movs	r2, #0
 8011c62:	f7ee fcd9 	bl	8000618 <__aeabi_dmul>
 8011c66:	460b      	mov	r3, r1
 8011c68:	4602      	mov	r2, r0
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f7ee fb1b 	bl	80002a8 <__aeabi_dsub>
 8011c72:	f7ee ff81 	bl	8000b78 <__aeabi_d2iz>
 8011c76:	f104 0b01 	add.w	fp, r4, #1
 8011c7a:	ab0c      	add	r3, sp, #48	; 0x30
 8011c7c:	f10a 0a18 	add.w	sl, sl, #24
 8011c80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c84:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8011c88:	e72b      	b.n	8011ae2 <__kernel_rem_pio2+0x2a2>
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	f7ee ff73 	bl	8000b78 <__aeabi_d2iz>
 8011c92:	ab0c      	add	r3, sp, #48	; 0x30
 8011c94:	46a3      	mov	fp, r4
 8011c96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c9a:	e722      	b.n	8011ae2 <__kernel_rem_pio2+0x2a2>
 8011c9c:	ab70      	add	r3, sp, #448	; 0x1c0
 8011c9e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8011ca2:	ab0c      	add	r3, sp, #48	; 0x30
 8011ca4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011ca8:	f7ee fc4c 	bl	8000544 <__aeabi_i2d>
 8011cac:	4622      	mov	r2, r4
 8011cae:	462b      	mov	r3, r5
 8011cb0:	f7ee fcb2 	bl	8000618 <__aeabi_dmul>
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	e9c9 0100 	strd	r0, r1, [r9]
 8011cba:	463b      	mov	r3, r7
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	f7ee fcaa 	bl	8000618 <__aeabi_dmul>
 8011cc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8011cc8:	4604      	mov	r4, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	e713      	b.n	8011af6 <__kernel_rem_pio2+0x2b6>
 8011cce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011cd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011cd6:	f7ee fc9f 	bl	8000618 <__aeabi_dmul>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	4620      	mov	r0, r4
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	f7ee fae3 	bl	80002ac <__adddf3>
 8011ce6:	3601      	adds	r6, #1
 8011ce8:	4604      	mov	r4, r0
 8011cea:	460d      	mov	r5, r1
 8011cec:	9b04      	ldr	r3, [sp, #16]
 8011cee:	429e      	cmp	r6, r3
 8011cf0:	dc01      	bgt.n	8011cf6 <__kernel_rem_pio2+0x4b6>
 8011cf2:	45b0      	cmp	r8, r6
 8011cf4:	daeb      	bge.n	8011cce <__kernel_rem_pio2+0x48e>
 8011cf6:	ab48      	add	r3, sp, #288	; 0x120
 8011cf8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011cfc:	e9c3 4500 	strd	r4, r5, [r3]
 8011d00:	3f01      	subs	r7, #1
 8011d02:	f108 0801 	add.w	r8, r8, #1
 8011d06:	e6ff      	b.n	8011b08 <__kernel_rem_pio2+0x2c8>
 8011d08:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011d0a:	2b02      	cmp	r3, #2
 8011d0c:	dc0b      	bgt.n	8011d26 <__kernel_rem_pio2+0x4e6>
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	dc6e      	bgt.n	8011df0 <__kernel_rem_pio2+0x5b0>
 8011d12:	d045      	beq.n	8011da0 <__kernel_rem_pio2+0x560>
 8011d14:	9b07      	ldr	r3, [sp, #28]
 8011d16:	f003 0007 	and.w	r0, r3, #7
 8011d1a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011d1e:	ecbd 8b02 	vpop	{d8}
 8011d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011d28:	2b03      	cmp	r3, #3
 8011d2a:	d1f3      	bne.n	8011d14 <__kernel_rem_pio2+0x4d4>
 8011d2c:	ab48      	add	r3, sp, #288	; 0x120
 8011d2e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8011d32:	46d0      	mov	r8, sl
 8011d34:	46d9      	mov	r9, fp
 8011d36:	f1b9 0f00 	cmp.w	r9, #0
 8011d3a:	f1a8 0808 	sub.w	r8, r8, #8
 8011d3e:	dc64      	bgt.n	8011e0a <__kernel_rem_pio2+0x5ca>
 8011d40:	465c      	mov	r4, fp
 8011d42:	2c01      	cmp	r4, #1
 8011d44:	f1aa 0a08 	sub.w	sl, sl, #8
 8011d48:	dc7e      	bgt.n	8011e48 <__kernel_rem_pio2+0x608>
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	f1bb 0f01 	cmp.w	fp, #1
 8011d52:	f300 8097 	bgt.w	8011e84 <__kernel_rem_pio2+0x644>
 8011d56:	9b02      	ldr	r3, [sp, #8]
 8011d58:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8011d5c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f040 8099 	bne.w	8011e98 <__kernel_rem_pio2+0x658>
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	e9c3 5600 	strd	r5, r6, [r3]
 8011d6c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011d70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d74:	e7ce      	b.n	8011d14 <__kernel_rem_pio2+0x4d4>
 8011d76:	ab48      	add	r3, sp, #288	; 0x120
 8011d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d80:	f7ee fa94 	bl	80002ac <__adddf3>
 8011d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d88:	f1bb 0f00 	cmp.w	fp, #0
 8011d8c:	daf3      	bge.n	8011d76 <__kernel_rem_pio2+0x536>
 8011d8e:	9b02      	ldr	r3, [sp, #8]
 8011d90:	b113      	cbz	r3, 8011d98 <__kernel_rem_pio2+0x558>
 8011d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d96:	4619      	mov	r1, r3
 8011d98:	9b01      	ldr	r3, [sp, #4]
 8011d9a:	e9c3 0100 	strd	r0, r1, [r3]
 8011d9e:	e7b9      	b.n	8011d14 <__kernel_rem_pio2+0x4d4>
 8011da0:	2000      	movs	r0, #0
 8011da2:	2100      	movs	r1, #0
 8011da4:	e7f0      	b.n	8011d88 <__kernel_rem_pio2+0x548>
 8011da6:	ab48      	add	r3, sp, #288	; 0x120
 8011da8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	f7ee fa7c 	bl	80002ac <__adddf3>
 8011db4:	3c01      	subs	r4, #1
 8011db6:	2c00      	cmp	r4, #0
 8011db8:	daf5      	bge.n	8011da6 <__kernel_rem_pio2+0x566>
 8011dba:	9b02      	ldr	r3, [sp, #8]
 8011dbc:	b1e3      	cbz	r3, 8011df8 <__kernel_rem_pio2+0x5b8>
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dc4:	9c01      	ldr	r4, [sp, #4]
 8011dc6:	e9c4 2300 	strd	r2, r3, [r4]
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011dd2:	f7ee fa69 	bl	80002a8 <__aeabi_dsub>
 8011dd6:	ad4a      	add	r5, sp, #296	; 0x128
 8011dd8:	2401      	movs	r4, #1
 8011dda:	45a3      	cmp	fp, r4
 8011ddc:	da0f      	bge.n	8011dfe <__kernel_rem_pio2+0x5be>
 8011dde:	9b02      	ldr	r3, [sp, #8]
 8011de0:	b113      	cbz	r3, 8011de8 <__kernel_rem_pio2+0x5a8>
 8011de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011de6:	4619      	mov	r1, r3
 8011de8:	9b01      	ldr	r3, [sp, #4]
 8011dea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011dee:	e791      	b.n	8011d14 <__kernel_rem_pio2+0x4d4>
 8011df0:	465c      	mov	r4, fp
 8011df2:	2000      	movs	r0, #0
 8011df4:	2100      	movs	r1, #0
 8011df6:	e7de      	b.n	8011db6 <__kernel_rem_pio2+0x576>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	e7e2      	b.n	8011dc4 <__kernel_rem_pio2+0x584>
 8011dfe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011e02:	f7ee fa53 	bl	80002ac <__adddf3>
 8011e06:	3401      	adds	r4, #1
 8011e08:	e7e7      	b.n	8011dda <__kernel_rem_pio2+0x59a>
 8011e0a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8011e0e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8011e12:	4620      	mov	r0, r4
 8011e14:	4632      	mov	r2, r6
 8011e16:	463b      	mov	r3, r7
 8011e18:	4629      	mov	r1, r5
 8011e1a:	f7ee fa47 	bl	80002ac <__adddf3>
 8011e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e22:	4602      	mov	r2, r0
 8011e24:	460b      	mov	r3, r1
 8011e26:	4620      	mov	r0, r4
 8011e28:	4629      	mov	r1, r5
 8011e2a:	f7ee fa3d 	bl	80002a8 <__aeabi_dsub>
 8011e2e:	4632      	mov	r2, r6
 8011e30:	463b      	mov	r3, r7
 8011e32:	f7ee fa3b 	bl	80002ac <__adddf3>
 8011e36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011e3a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8011e3e:	ed88 7b00 	vstr	d7, [r8]
 8011e42:	f109 39ff 	add.w	r9, r9, #4294967295
 8011e46:	e776      	b.n	8011d36 <__kernel_rem_pio2+0x4f6>
 8011e48:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e4c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011e50:	4640      	mov	r0, r8
 8011e52:	4632      	mov	r2, r6
 8011e54:	463b      	mov	r3, r7
 8011e56:	4649      	mov	r1, r9
 8011e58:	f7ee fa28 	bl	80002ac <__adddf3>
 8011e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	4640      	mov	r0, r8
 8011e66:	4649      	mov	r1, r9
 8011e68:	f7ee fa1e 	bl	80002a8 <__aeabi_dsub>
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	463b      	mov	r3, r7
 8011e70:	f7ee fa1c 	bl	80002ac <__adddf3>
 8011e74:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011e78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e7c:	ed8a 7b00 	vstr	d7, [sl]
 8011e80:	3c01      	subs	r4, #1
 8011e82:	e75e      	b.n	8011d42 <__kernel_rem_pio2+0x502>
 8011e84:	ab48      	add	r3, sp, #288	; 0x120
 8011e86:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	f7ee fa0d 	bl	80002ac <__adddf3>
 8011e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e96:	e75a      	b.n	8011d4e <__kernel_rem_pio2+0x50e>
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	9a01      	ldr	r2, [sp, #4]
 8011e9c:	601d      	str	r5, [r3, #0]
 8011e9e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011ea2:	605c      	str	r4, [r3, #4]
 8011ea4:	609f      	str	r7, [r3, #8]
 8011ea6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011eaa:	60d3      	str	r3, [r2, #12]
 8011eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011eb0:	6110      	str	r0, [r2, #16]
 8011eb2:	6153      	str	r3, [r2, #20]
 8011eb4:	e72e      	b.n	8011d14 <__kernel_rem_pio2+0x4d4>
 8011eb6:	bf00      	nop
 8011eb8:	41700000 	.word	0x41700000
 8011ebc:	3e700000 	.word	0x3e700000

08011ec0 <__kernel_sin>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	ed2d 8b04 	vpush	{d8-d9}
 8011ec8:	eeb0 8a41 	vmov.f32	s16, s2
 8011ecc:	eef0 8a61 	vmov.f32	s17, s3
 8011ed0:	ec55 4b10 	vmov	r4, r5, d0
 8011ed4:	b083      	sub	sp, #12
 8011ed6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011eda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011ede:	9001      	str	r0, [sp, #4]
 8011ee0:	da06      	bge.n	8011ef0 <__kernel_sin+0x30>
 8011ee2:	ee10 0a10 	vmov	r0, s0
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	f7ee fe46 	bl	8000b78 <__aeabi_d2iz>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d051      	beq.n	8011f94 <__kernel_sin+0xd4>
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	462b      	mov	r3, r5
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee fb8e 	bl	8000618 <__aeabi_dmul>
 8011efc:	4682      	mov	sl, r0
 8011efe:	468b      	mov	fp, r1
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	4620      	mov	r0, r4
 8011f06:	4629      	mov	r1, r5
 8011f08:	f7ee fb86 	bl	8000618 <__aeabi_dmul>
 8011f0c:	a341      	add	r3, pc, #260	; (adr r3, 8012014 <__kernel_sin+0x154>)
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	4680      	mov	r8, r0
 8011f14:	4689      	mov	r9, r1
 8011f16:	4650      	mov	r0, sl
 8011f18:	4659      	mov	r1, fp
 8011f1a:	f7ee fb7d 	bl	8000618 <__aeabi_dmul>
 8011f1e:	a33f      	add	r3, pc, #252	; (adr r3, 801201c <__kernel_sin+0x15c>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	f7ee f9c0 	bl	80002a8 <__aeabi_dsub>
 8011f28:	4652      	mov	r2, sl
 8011f2a:	465b      	mov	r3, fp
 8011f2c:	f7ee fb74 	bl	8000618 <__aeabi_dmul>
 8011f30:	a33c      	add	r3, pc, #240	; (adr r3, 8012024 <__kernel_sin+0x164>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	f7ee f9b9 	bl	80002ac <__adddf3>
 8011f3a:	4652      	mov	r2, sl
 8011f3c:	465b      	mov	r3, fp
 8011f3e:	f7ee fb6b 	bl	8000618 <__aeabi_dmul>
 8011f42:	a33a      	add	r3, pc, #232	; (adr r3, 801202c <__kernel_sin+0x16c>)
 8011f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f48:	f7ee f9ae 	bl	80002a8 <__aeabi_dsub>
 8011f4c:	4652      	mov	r2, sl
 8011f4e:	465b      	mov	r3, fp
 8011f50:	f7ee fb62 	bl	8000618 <__aeabi_dmul>
 8011f54:	a337      	add	r3, pc, #220	; (adr r3, 8012034 <__kernel_sin+0x174>)
 8011f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5a:	f7ee f9a7 	bl	80002ac <__adddf3>
 8011f5e:	9b01      	ldr	r3, [sp, #4]
 8011f60:	4606      	mov	r6, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	b9eb      	cbnz	r3, 8011fa2 <__kernel_sin+0xe2>
 8011f66:	4602      	mov	r2, r0
 8011f68:	460b      	mov	r3, r1
 8011f6a:	4650      	mov	r0, sl
 8011f6c:	4659      	mov	r1, fp
 8011f6e:	f7ee fb53 	bl	8000618 <__aeabi_dmul>
 8011f72:	a325      	add	r3, pc, #148	; (adr r3, 8012008 <__kernel_sin+0x148>)
 8011f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f78:	f7ee f996 	bl	80002a8 <__aeabi_dsub>
 8011f7c:	4642      	mov	r2, r8
 8011f7e:	464b      	mov	r3, r9
 8011f80:	f7ee fb4a 	bl	8000618 <__aeabi_dmul>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee f98e 	bl	80002ac <__adddf3>
 8011f90:	4604      	mov	r4, r0
 8011f92:	460d      	mov	r5, r1
 8011f94:	ec45 4b10 	vmov	d0, r4, r5
 8011f98:	b003      	add	sp, #12
 8011f9a:	ecbd 8b04 	vpop	{d8-d9}
 8011f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	4b1b      	ldr	r3, [pc, #108]	; (8012010 <__kernel_sin+0x150>)
 8011fa4:	ec51 0b18 	vmov	r0, r1, d8
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f7ee fb35 	bl	8000618 <__aeabi_dmul>
 8011fae:	4632      	mov	r2, r6
 8011fb0:	ec41 0b19 	vmov	d9, r0, r1
 8011fb4:	463b      	mov	r3, r7
 8011fb6:	4640      	mov	r0, r8
 8011fb8:	4649      	mov	r1, r9
 8011fba:	f7ee fb2d 	bl	8000618 <__aeabi_dmul>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	ec51 0b19 	vmov	r0, r1, d9
 8011fc6:	f7ee f96f 	bl	80002a8 <__aeabi_dsub>
 8011fca:	4652      	mov	r2, sl
 8011fcc:	465b      	mov	r3, fp
 8011fce:	f7ee fb23 	bl	8000618 <__aeabi_dmul>
 8011fd2:	ec53 2b18 	vmov	r2, r3, d8
 8011fd6:	f7ee f967 	bl	80002a8 <__aeabi_dsub>
 8011fda:	a30b      	add	r3, pc, #44	; (adr r3, 8012008 <__kernel_sin+0x148>)
 8011fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	460f      	mov	r7, r1
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4649      	mov	r1, r9
 8011fe8:	f7ee fb16 	bl	8000618 <__aeabi_dmul>
 8011fec:	4602      	mov	r2, r0
 8011fee:	460b      	mov	r3, r1
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee f95a 	bl	80002ac <__adddf3>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	4629      	mov	r1, r5
 8012000:	f7ee f952 	bl	80002a8 <__aeabi_dsub>
 8012004:	e7c4      	b.n	8011f90 <__kernel_sin+0xd0>
 8012006:	bf00      	nop
 8012008:	55555549 	.word	0x55555549
 801200c:	3fc55555 	.word	0x3fc55555
 8012010:	3fe00000 	.word	0x3fe00000
 8012014:	5acfd57c 	.word	0x5acfd57c
 8012018:	3de5d93a 	.word	0x3de5d93a
 801201c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012020:	3e5ae5e6 	.word	0x3e5ae5e6
 8012024:	57b1fe7d 	.word	0x57b1fe7d
 8012028:	3ec71de3 	.word	0x3ec71de3
 801202c:	19c161d5 	.word	0x19c161d5
 8012030:	3f2a01a0 	.word	0x3f2a01a0
 8012034:	1110f8a6 	.word	0x1110f8a6
 8012038:	3f811111 	.word	0x3f811111
 801203c:	00000000 	.word	0x00000000

08012040 <floor>:
 8012040:	ec51 0b10 	vmov	r0, r1, d0
 8012044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012048:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801204c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012050:	2e13      	cmp	r6, #19
 8012052:	ee10 5a10 	vmov	r5, s0
 8012056:	ee10 8a10 	vmov	r8, s0
 801205a:	460c      	mov	r4, r1
 801205c:	dc32      	bgt.n	80120c4 <floor+0x84>
 801205e:	2e00      	cmp	r6, #0
 8012060:	da14      	bge.n	801208c <floor+0x4c>
 8012062:	a333      	add	r3, pc, #204	; (adr r3, 8012130 <floor+0xf0>)
 8012064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012068:	f7ee f920 	bl	80002ac <__adddf3>
 801206c:	2200      	movs	r2, #0
 801206e:	2300      	movs	r3, #0
 8012070:	f7ee fd62 	bl	8000b38 <__aeabi_dcmpgt>
 8012074:	b138      	cbz	r0, 8012086 <floor+0x46>
 8012076:	2c00      	cmp	r4, #0
 8012078:	da57      	bge.n	801212a <floor+0xea>
 801207a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801207e:	431d      	orrs	r5, r3
 8012080:	d001      	beq.n	8012086 <floor+0x46>
 8012082:	4c2d      	ldr	r4, [pc, #180]	; (8012138 <floor+0xf8>)
 8012084:	2500      	movs	r5, #0
 8012086:	4621      	mov	r1, r4
 8012088:	4628      	mov	r0, r5
 801208a:	e025      	b.n	80120d8 <floor+0x98>
 801208c:	4f2b      	ldr	r7, [pc, #172]	; (801213c <floor+0xfc>)
 801208e:	4137      	asrs	r7, r6
 8012090:	ea01 0307 	and.w	r3, r1, r7
 8012094:	4303      	orrs	r3, r0
 8012096:	d01f      	beq.n	80120d8 <floor+0x98>
 8012098:	a325      	add	r3, pc, #148	; (adr r3, 8012130 <floor+0xf0>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee f905 	bl	80002ac <__adddf3>
 80120a2:	2200      	movs	r2, #0
 80120a4:	2300      	movs	r3, #0
 80120a6:	f7ee fd47 	bl	8000b38 <__aeabi_dcmpgt>
 80120aa:	2800      	cmp	r0, #0
 80120ac:	d0eb      	beq.n	8012086 <floor+0x46>
 80120ae:	2c00      	cmp	r4, #0
 80120b0:	bfbe      	ittt	lt
 80120b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80120b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80120ba:	19a4      	addlt	r4, r4, r6
 80120bc:	ea24 0407 	bic.w	r4, r4, r7
 80120c0:	2500      	movs	r5, #0
 80120c2:	e7e0      	b.n	8012086 <floor+0x46>
 80120c4:	2e33      	cmp	r6, #51	; 0x33
 80120c6:	dd0b      	ble.n	80120e0 <floor+0xa0>
 80120c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80120cc:	d104      	bne.n	80120d8 <floor+0x98>
 80120ce:	ee10 2a10 	vmov	r2, s0
 80120d2:	460b      	mov	r3, r1
 80120d4:	f7ee f8ea 	bl	80002ac <__adddf3>
 80120d8:	ec41 0b10 	vmov	d0, r0, r1
 80120dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80120e4:	f04f 33ff 	mov.w	r3, #4294967295
 80120e8:	fa23 f707 	lsr.w	r7, r3, r7
 80120ec:	4207      	tst	r7, r0
 80120ee:	d0f3      	beq.n	80120d8 <floor+0x98>
 80120f0:	a30f      	add	r3, pc, #60	; (adr r3, 8012130 <floor+0xf0>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f8d9 	bl	80002ac <__adddf3>
 80120fa:	2200      	movs	r2, #0
 80120fc:	2300      	movs	r3, #0
 80120fe:	f7ee fd1b 	bl	8000b38 <__aeabi_dcmpgt>
 8012102:	2800      	cmp	r0, #0
 8012104:	d0bf      	beq.n	8012086 <floor+0x46>
 8012106:	2c00      	cmp	r4, #0
 8012108:	da02      	bge.n	8012110 <floor+0xd0>
 801210a:	2e14      	cmp	r6, #20
 801210c:	d103      	bne.n	8012116 <floor+0xd6>
 801210e:	3401      	adds	r4, #1
 8012110:	ea25 0507 	bic.w	r5, r5, r7
 8012114:	e7b7      	b.n	8012086 <floor+0x46>
 8012116:	2301      	movs	r3, #1
 8012118:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801211c:	fa03 f606 	lsl.w	r6, r3, r6
 8012120:	4435      	add	r5, r6
 8012122:	4545      	cmp	r5, r8
 8012124:	bf38      	it	cc
 8012126:	18e4      	addcc	r4, r4, r3
 8012128:	e7f2      	b.n	8012110 <floor+0xd0>
 801212a:	2500      	movs	r5, #0
 801212c:	462c      	mov	r4, r5
 801212e:	e7aa      	b.n	8012086 <floor+0x46>
 8012130:	8800759c 	.word	0x8800759c
 8012134:	7e37e43c 	.word	0x7e37e43c
 8012138:	bff00000 	.word	0xbff00000
 801213c:	000fffff 	.word	0x000fffff

08012140 <scalbn>:
 8012140:	b570      	push	{r4, r5, r6, lr}
 8012142:	ec55 4b10 	vmov	r4, r5, d0
 8012146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801214a:	4606      	mov	r6, r0
 801214c:	462b      	mov	r3, r5
 801214e:	b99a      	cbnz	r2, 8012178 <scalbn+0x38>
 8012150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012154:	4323      	orrs	r3, r4
 8012156:	d036      	beq.n	80121c6 <scalbn+0x86>
 8012158:	4b39      	ldr	r3, [pc, #228]	; (8012240 <scalbn+0x100>)
 801215a:	4629      	mov	r1, r5
 801215c:	ee10 0a10 	vmov	r0, s0
 8012160:	2200      	movs	r2, #0
 8012162:	f7ee fa59 	bl	8000618 <__aeabi_dmul>
 8012166:	4b37      	ldr	r3, [pc, #220]	; (8012244 <scalbn+0x104>)
 8012168:	429e      	cmp	r6, r3
 801216a:	4604      	mov	r4, r0
 801216c:	460d      	mov	r5, r1
 801216e:	da10      	bge.n	8012192 <scalbn+0x52>
 8012170:	a32b      	add	r3, pc, #172	; (adr r3, 8012220 <scalbn+0xe0>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	e03a      	b.n	80121ee <scalbn+0xae>
 8012178:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801217c:	428a      	cmp	r2, r1
 801217e:	d10c      	bne.n	801219a <scalbn+0x5a>
 8012180:	ee10 2a10 	vmov	r2, s0
 8012184:	4620      	mov	r0, r4
 8012186:	4629      	mov	r1, r5
 8012188:	f7ee f890 	bl	80002ac <__adddf3>
 801218c:	4604      	mov	r4, r0
 801218e:	460d      	mov	r5, r1
 8012190:	e019      	b.n	80121c6 <scalbn+0x86>
 8012192:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012196:	460b      	mov	r3, r1
 8012198:	3a36      	subs	r2, #54	; 0x36
 801219a:	4432      	add	r2, r6
 801219c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80121a0:	428a      	cmp	r2, r1
 80121a2:	dd08      	ble.n	80121b6 <scalbn+0x76>
 80121a4:	2d00      	cmp	r5, #0
 80121a6:	a120      	add	r1, pc, #128	; (adr r1, 8012228 <scalbn+0xe8>)
 80121a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121ac:	da1c      	bge.n	80121e8 <scalbn+0xa8>
 80121ae:	a120      	add	r1, pc, #128	; (adr r1, 8012230 <scalbn+0xf0>)
 80121b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121b4:	e018      	b.n	80121e8 <scalbn+0xa8>
 80121b6:	2a00      	cmp	r2, #0
 80121b8:	dd08      	ble.n	80121cc <scalbn+0x8c>
 80121ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80121be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80121c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80121c6:	ec45 4b10 	vmov	d0, r4, r5
 80121ca:	bd70      	pop	{r4, r5, r6, pc}
 80121cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80121d0:	da19      	bge.n	8012206 <scalbn+0xc6>
 80121d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80121d6:	429e      	cmp	r6, r3
 80121d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80121dc:	dd0a      	ble.n	80121f4 <scalbn+0xb4>
 80121de:	a112      	add	r1, pc, #72	; (adr r1, 8012228 <scalbn+0xe8>)
 80121e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1e2      	bne.n	80121ae <scalbn+0x6e>
 80121e8:	a30f      	add	r3, pc, #60	; (adr r3, 8012228 <scalbn+0xe8>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f7ee fa13 	bl	8000618 <__aeabi_dmul>
 80121f2:	e7cb      	b.n	801218c <scalbn+0x4c>
 80121f4:	a10a      	add	r1, pc, #40	; (adr r1, 8012220 <scalbn+0xe0>)
 80121f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0b8      	beq.n	8012170 <scalbn+0x30>
 80121fe:	a10e      	add	r1, pc, #56	; (adr r1, 8012238 <scalbn+0xf8>)
 8012200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012204:	e7b4      	b.n	8012170 <scalbn+0x30>
 8012206:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801220a:	3236      	adds	r2, #54	; 0x36
 801220c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012210:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012214:	4620      	mov	r0, r4
 8012216:	4b0c      	ldr	r3, [pc, #48]	; (8012248 <scalbn+0x108>)
 8012218:	2200      	movs	r2, #0
 801221a:	e7e8      	b.n	80121ee <scalbn+0xae>
 801221c:	f3af 8000 	nop.w
 8012220:	c2f8f359 	.word	0xc2f8f359
 8012224:	01a56e1f 	.word	0x01a56e1f
 8012228:	8800759c 	.word	0x8800759c
 801222c:	7e37e43c 	.word	0x7e37e43c
 8012230:	8800759c 	.word	0x8800759c
 8012234:	fe37e43c 	.word	0xfe37e43c
 8012238:	c2f8f359 	.word	0xc2f8f359
 801223c:	81a56e1f 	.word	0x81a56e1f
 8012240:	43500000 	.word	0x43500000
 8012244:	ffff3cb0 	.word	0xffff3cb0
 8012248:	3c900000 	.word	0x3c900000

0801224c <_init>:
 801224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224e:	bf00      	nop
 8012250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012252:	bc08      	pop	{r3}
 8012254:	469e      	mov	lr, r3
 8012256:	4770      	bx	lr

08012258 <_fini>:
 8012258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225a:	bf00      	nop
 801225c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225e:	bc08      	pop	{r3}
 8012260:	469e      	mov	lr, r3
 8012262:	4770      	bx	lr
